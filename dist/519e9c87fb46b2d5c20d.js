(window.webpackJsonp=window.webpackJsonp||[]).push([[1],Array(53).concat([function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s={names:["LBRACE","RBRACE","LPAREN","RPAREN","LBRACK","RBRACK","COMMA","QUESTION","COLON","SEMICOLON","CATCH","GLOBAL","AS","VOID","IMPORT","IF","ELSE","WHILE","DO","FOR","BREAK","CONTINUE","SWITCH","CASE","DEFAULT","BOOLEAN_LITERAL","CONST","VAR","POW","NEW","RETURN","BOOLEAN","INTEGER","DOUBLE","CHAR","STRING","LTEQ","LT","REQEQ","EQEQ","GTEQ","GT","NOTEQ","OROR","XOR","ANDAND","NOT","EQ","PLUSPLUS","PLUS","MINUSMINUS","MINUS","MULT","DIV","MOD","DOT","ATTR_DECLARATION","NULL_LITERAL","IDENTIFIER","DOUBLE_LITERAL","INTEGER_LITERAL","STRING_LITERAL","CAST","ARRAY","PREINC","PREDEC","POSTINC","POSTDEC","ARRAY_ACCESS","FUNCTION_CALL","ARRAY_DIMS","DIM","NEW_ARRAY","EXPRESSION_LIST","CONSTRUCTOR_CALL","CASE_LABEL_LIST","SWITCH_BODY","EXPRESSION_STMT","NO_OP","VAR_DECLARATION","STMT_LIST","BLOCK","VARIABLE_INITIALIZER","DEFINE","TYPE_DECLARATIONS","STRUCT_DECLARATION","STRUCT_LIST","ARRAY_TYPE","ASSIGN_LIST","FUNCTION_DECLARATION","METHOD_HEADER","FORMAL_PARAMETER","FORMAL_PARAMETER_LIST","CONSTRUCTOR_DECLARATOR","CONSTRUCTOR_DECLARATION","PROGRAM","BODY","METHOD_DECLARATOR","NATIVE_FUNCTION_CALL","OBJECT","MAIN_DECLARATION","ARRAY_IDENTIFIER","CHARACTER_LITERAL","ARRAY_LITERAL","TRY","VAR_DECLARATION_NO_TYPE","ID_LIST","FOR_INIT","FOR_UPDATE","FOR_COND","IMPORTS","FINAL","DOLLAR","THROW"],types:{LBRACE:0,RBRACE:1,LPAREN:2,RPAREN:3,LBRACK:4,RBRACK:5,COMMA:6,QUESTION:7,COLON:8,SEMICOLON:9,CATCH:10,GLOBAL:11,AS:12,VOID:13,IMPORT:14,IF:15,ELSE:16,WHILE:17,DO:18,FOR:19,BREAK:20,CONTINUE:21,SWITCH:22,CASE:23,DEFAULT:24,BOOLEAN_LITERAL:25,CONST:26,VAR:27,POW:28,NEW:29,RETURN:30,BOOLEAN:31,INTEGER:32,DOUBLE:33,CHAR:34,STRING:35,LTEQ:36,LT:37,REQEQ:38,EQEQ:39,GTEQ:40,GT:41,NOTEQ:42,OROR:43,XOR:44,ANDAND:45,NOT:46,EQ:47,PLUSPLUS:48,PLUS:49,MINUSMINUS:50,MINUS:51,MULT:52,DIV:53,MOD:54,DOT:55,ATTR_DECLARATION:56,NULL_LITERAL:57,IDENTIFIER:58,DOUBLE_LITERAL:59,INTEGER_LITERAL:60,STRING_LITERAL:61,CAST:62,ARRAY:63,PREINC:64,PREDEC:65,POSTINC:66,POSTDEC:67,ARRAY_ACCESS:68,FUNCTION_CALL:69,ARRAY_DIMS:70,DIM:71,NEW_ARRAY:72,EXPRESSION_LIST:73,CONSTRUCTOR_CALL:74,CASE_LABEL_LIST:75,SWITCH_BODY:76,EXPRESSION_STMT:77,NO_OP:78,VAR_DECLARATION:79,STMT_LIST:80,BLOCK:81,VARIABLE_INITIALIZER:82,DEFINE:83,TYPE_DECLARATIONS:84,STRUCT_DECLARATION:85,STRUCT_LIST:86,ARRAY_TYPE:87,ASSIGN_LIST:88,FUNCTION_DECLARATION:89,METHOD_HEADER:90,FORMAL_PARAMETER:91,FORMAL_PARAMETER_LIST:92,CONSTRUCTOR_DECLARATOR:93,CONSTRUCTOR_DECLARATION:94,PROGRAM:95,BODY:96,METHOD_DECLARATOR:97,NATIVE_FUNCTION_CALL:98,OBJECT:99,MAIN_DECLARATION:100,ARRAY_IDENTIFIER:101,CHARACTER_LITERAL:102,ARRAY_LITERAL:103,TRY:104,VAR_DECLARATION_NO_TYPE:105,ID_LIST:106,FOR_INIT:107,FOR_UPDATE:108,FOR_COND:109,IMPORTS:110,FINAL:111,DOLLAR:112,THROW:113}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s=class{constructor(e,t,i,s){this.token=e,this.texto=t,this.location=i,this.hijos=s,this.indice=0}generarIndices(e){window.indices=window.indices+1,e instanceof s&&(e.indice=window.indices);for(let t=0;t<e.hijos.length;t++)e.hijos[t]instanceof s&&this.generarIndices(e.hijos[t])}graficarArbol2(){window.indices=0,this.generarIndices(this),window.strArbol="",window.strArbol+="Digraph G{\n",window.strArbol+="graph [ranksep=2]\n node[shape=record,height=.1,style=filled];\n",null!=this&&this.grafNodos2(),window.strArbol+="}"}traducir(){return""}graficarArbol(){window.indices=0,this.generarIndices(this),window.strArbol="",window.strArbol+="Digraph G{\n",window.strArbol+="graph [ranksep=2]\n node[shape=record,height=.1,style=filled];\n",null!=this&&this.grafNodos(),window.strArbol+="}"}traducir(){return""}declasGlobales(){return""}grafNodos2(){if(this instanceof s){window.strArbol+="node"+this.indice+'[label = "'+this.texto.replaceAll(">","\\>").replaceAll("<","\\<")+'",fillcolor="lightcyan2"];\n';for(let e=0;e<this.hijos.length;e++)this.hijos[e]instanceof s&&(this.hijos[e].grafNodos2(),window.strArbol+="node"+this.indice+"->node"+this.hijos[e].indice+";\n")}}grafNodos(){if(this instanceof s){window.strArbol+="node"+this.indice+'[label = "'+this.texto.replaceAll(">","\\>").replaceAll("<","\\<")+'",fillcolor="green"];\n';for(let e=0;e<this.hijos.length;e++)this.hijos[e]instanceof s&&(this.hijos[e].grafNodos(),window.strArbol+="node"+this.indice+"->node"+this.hijos[e].indice+";\n")}}getToken(){return this.token}ejecutar(){}ejecutar2(){}ejecutar3(){}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s=class{constructor(e,t,i,s){this.descripcion=t,this.fila=i,this.columna=s,this.tipo=e}getDescripcion(){return this.descripcion}getLinea(){return this.fila}getColumna(){return this.columna}getTipo(){return this.tipo}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s={names:["+","-","*","%","/","number","identifier","method","begin","end","label","tmp","stack","heap","goto","==","<>",">","<",">=","<=","print","=","sp","hp","call","var","E"],types:{"+":0,"-":1,"*":2,"%":3,"/":4,number:5,identifier:6,method:7,begin:8,end:9,label:10,tmp:11,stack:12,heap:13,goto:14,"==":15,"<>":16,">":17,"<":18,">=":19,"<=":20,sysin:21,print:22,"=":23,sp:24,hp:25,exit:26,call:27,var:28,e:29}}},,function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(8);class r extends s.a{shouldUpdate(){return this.active}static get styles(){return[s.b`
        :host {
          height: fit-content;
          display: block;
          padding: 25px;
          background: var(--light-secondary-color);
        }
      `]}static get properties(){return{active:{type:Boolean}}}}},,,function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s=class{constructor(e,t,i,s,r,n,a){this.cambio=e,this.nombre=t,this.valor=i,this.tipo=s,this.rol=r,this.dimensiones=n,this.asigIndice=a}buscarVariable(e,t,i,s,r){return this.nombre==e&&this.tipo==i&&this.dimensiones==r&&this.rol==s?this:null}buscarVariableSoloNombre(e){return this.nombre==e?this:null}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s=class{constructor(e){this.nombre=e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return be}));class s{constructor(){this.runtimeEnv=[]}peek(){return this.runtimeEnv[this.runtimeEnv-1]}getCurrentEnv(){return this.runtimeEnv[this.runtimeEnv.length-1]}enterEnv(e=0){this.runtimeEnv.push([e.toString(),0])}exitEnv(){this.runtimeEnv.pop()}enterScope(){const e=this.runtimeEnv[this.runtimeEnv.length-1],t=[`${e[0]}.${e[1]}`,0];e[1]=e[1]+1,this.runtimeEnv.push(t)}exitScope(){this.runtimeEnv.pop()}getSymTabStack(){return this.runtimeEnv}currentNestingLevel(){return 0===this.runtimeEnv.length?"0":this.runtimeEnv[this.runtimeEnv.length-1][0]}clear(){this.runtimeEnv=[]}}class r{constructor(){this.cTypes=new Map,this.current=18,this.addType("var")}addType(e){if(this.cTypes.has(e))throw new Error("TYPE"+e.toUpperCase()+"ALREADY DEFINED.");this.cTypes.set(e,this.current++)}getType(e){return this.cTypes.has(e)?this.cTypes.get(e):-1}containsKey(e){return this.cTypes.has(e)}clear(){this.cTypes.clear(),this.current=18,this.addType("var")}keys(){return this.cTypes.keys()}reverseMap(e){for(const t of this.keys())if(this.cTypes.get(t)===e)return t;return"-------------"}}const n=new class{constructor(){this.label=0,this.temporary=0,this.functionID=0}genLabel(){return"L"+this.label++}genTemporary(){return"t"+this.temporary++}reset(){this.label=0,this.temporary=0,this.functionID=0}getTemporary(){return this.temporary}genFunctionId(e,t){return`${e}_${t}_${this.functionID++}`}},a=new Map;a.set("arithmeticexception",1),a.set("indexoutofbounds",2),a.set("uncaughtexception",3),a.set("nullpointerexception",4),a.set("invalidcastingexception",5),a.set("heapoverflowerror",6),a.set("stackoverflowerror",7);const o=Array.from(a.values());class l{constructor(){this.ErrorMapping=new Map}createLabel(e){let t=-1;if(void 0===(t=a.get(e)))throw new Error("UNKNOWN ERROR CAN'T CONTINUE PARSING");{const e=n.genLabel();return this.ErrorMapping.set(t,e),e}}fillDefaultExceptions(e){const t=Array.from(this.ErrorMapping.keys());for(const i of o)t.includes(i)||this.ErrorMapping.set(i,e)}}class c{constructor(){this.Cicles=[],this.TryCatchErrors=[],this.NativeFunc=[],this.FunctionCallStack=[],this.OutLabel="",this.LeftHandSide=!1}clear(){this.Cicles.clear(),this.NativeFunc.clear(),this.FunctionCallStack.clear(),this.TryCatchErrors.clear()}createTryCatchEnv(){return this.TryCatchErrors.push(new l),this.TryCatchErrors[this.TryCatchErrors.length-1]}exitTryCatchEnv(){this.TryCatchErrors.pop()}getError(e){return this.TryCatchErrors[this.TryCatchErrors.length-1].ErrorMapping.get(e)}}const h=0,p=2,u=3,d=4,m=5,g=6,f=7,y=8,b=9,_=10,w=11,T=12,E=13,A=14,S=15,C=16,k=17,L=["ATTRIBUTE","CONSTANT","FUNCTION","REF_PARAM","VAL_PARAM","PROCEDURE","ARRAY","GLOBAL","VARIABLE","INTEGER","DOUBLE","BOOLEAN","STRING","NULL","CHAR","OBJECT","VOID","CONSTRUCTOR"];var v=i(53);class O{constructor(e=null){this.parent=e,this.code=""}setCode(e){this.code=e}getCode(){return this.code}parseSemanticError(e){let t=e;for(;-1==t.getLine()&&-1==t.getColumn();)t=t.getParent();return` AT LINE: ${t.getLine()}, COLUMN ${t.getColumn()} IN FILE ${t.file}`}typeChecking(e,t,i,s,r,n){const a=i==n;let o=e==s,l=t==r;if(!l&&t&&r===E)l=!0;else if(!l&&null!=t&&null!=r){void 0===be.ClassTemplates.get(r)&&(l=!1)}return o||(s===b&&e===_&&(o=!0),s===A&&e===_&&(o=!0),s===A&&e===b&&(o=!0)),a&&o&&l}parseType(e){switch(e){case v.a.types.INTEGER:return b;case v.a.types.DOUBLE:return _;case v.a.types.STRING:return T;case v.a.types.CHAR:return A;case v.a.types.BOOLEAN:return w;default:return S}}}var N=i(67);const R=new class{generateInvalidArithmeticError(e,t){return this.comment("division by zero exception")+this.conditionalJMP("!=",e,"0",t)}generateInvalidCastError(e,t,i){const s=n.genTemporary();return this.comment("invalid cast exception")+this.arithmeticOperation("+",e,"1",s)+this.generateHeapAccess(s,s)+this.conditionalJMP("!=",t,s,i)}generateHeapAssign(e,t){return`Heap[(int)${e}] = ${t};\n`}generateHeapAccess(e,t){return`${t} = Heap[(int)${e}];\n`}generateStackAssign(e,t){return`Stack[(int)${e}] = ${t};\n`}generateStackAccess(e,t){return`${t} = Stack[(int)${e}];\n`}moveStackPointer(e,t){return`P = P ${e?"+":"-"} ${t};\n`}moveHeapPointer(e){return`H = H + ${e};\n`}arithmeticOperation(e,t,i,s){return"%"==e?`${s} = fmod(${t}, ${i});\n`:`${s} = ${t} ${e} ${i};\n`}inconditionalJMP(e){return`goto ${e};\n`}conditionalJMP(e,t,i,s){return`if (${t} ${e} ${i}) goto ${s};\n`}unaryAssign(e,t){return`${t} = ${e};\n`}functionCall(e){return e+" ();\n"}generateLabel(e){return e+":\n"}printStmt(e,t){return"%c"==e?`printf("${e}", (int)${t});\n`:"%i"==e?`printf("%d", (int)${t});\n`:"%d"==e?`printf("%.2f",(double)${t});\n`:`printf("${e}",${t});\n`}generateCustomFunction(e,t){return`\nvoid ${e} () {\n${t} ${be.createOutLabels()} return;\n}\n`}generateTmpStackSave(e,t){let i="//STACK SAVE INIT\n";for(let s=e;s<t;s++)s>e&&(i+=R.arithmeticOperation("+","P","1","P")),i+=R.generateStackAssign("P","t"+s);return e<t&&(i+=R.moveStackPointer(!0,1)),i+="//STACK SAVE FIN\n",i}generateTmpStackRecover(e,t){let i="//STACK RECOVER INIT \n";for(let s=t-1;s>=e;s--)i+=R.arithmeticOperation("-","P","1","P"),i+=R.generateStackAccess("P","t"+s);return i+="//STACK RECOVER FIN \n",i}generateDefaultAssign(e,t,i="0",s=""){if(e)return s+this.generateHeapAssign(t,i);{const e=n.genTemporary();let r=s+this.arithmeticOperation("+","P",t,e);return r+=this.generateStackAssign(e,i),r}}comment(e){return`//${e}\n`}setError(e){return`E=${e};\n`}};class I extends O{constructor(e){super(e),this.siguiente=null}setSiguiente(e){this.siguiente=e}}class x extends O{constructor(e){super(e),this.type=null,this.aux_type=null,this.temporary=null,this.true_label=null,this.false_label=null,this.is_array=!1,this.dimensions=0}getTemporary(){return this.temporary}setTemporary(e){this.temporary=e}getType(){return this.type}setTrueLabel(e){this.true_label=e}setFalseLabel(e){this.false_label=e}getFalseLabel(){return this.false_label}getTrueLabel(){return this.true_label}copyLabels(e){null!=this.true_label&&null!=this.false_label&&(e.setFalseLabel(this.false_label),e.setTrueLabel(this.true_label))}setBooleanLabels(e,t){this.true_label=e,this.false_label=t}copyInfo(e){this.temporary=e.temporary,this.type=e.type,this.aux_type=e.getAuxType(),this.is_array=e.is_array,this.dimensions=e.dimensions,this.position_code=e.position_code,this.setCode(e.getCode())}getAuxType(){return this.aux_type}}class P{static ExpressionTypeChecking(e,t,i){const s=t,r=i;switch(e){case v.a.types.PLUS:if(s==_)switch(r){case b:case A:case _:return _;case T:return T}if(s==b)switch(r){case b:case A:return b;case _:return _;case T:return T}if(s==T)switch(r){case b:case A:case _:case T:case w:case S:return T}if(s==A)switch(r){case b:return b;case _:return _;case T:return T}if(s==w)switch(r){case T:return T}if(s==S)switch(r){case T:return T}case v.a.types.MINUS:if(s==_)switch(r){case b:case A:case _:return _}if(s==b)switch(r){case b:case A:return b;case _:return _}case v.a.types.DIV:case v.a.types.MOD:case v.a.types.MULT:if(s===_)switch(r){case b:case A:case _:return _}if(s===b)switch(r){case b:case A:return e===v.a.types.DIV?_:b;case _:return _}}throw`UNABLE TO OPERATE TYPES ${L[t]} AND ${L[i]} UNDER SYMBOL ${v.a.names[e]}`}static RelationalTypeChecking(e,t,i){const s=t,r=i;switch(e){case v.a.types.NOTEQ:case v.a.types.EQEQ:switch(s){case T:switch(r){case T:case E:return w}break;case _:case b:case A:switch(r){case A:case _:case b:return w}break;case w:if(r==w)return w;break;case S:if(r==E||r==S)return w}break;case v.a.types.LT:case v.a.types.GT:case v.a.types.GTE:case v.a.types.LTE:switch(s){case _:case b:case A:switch(r){case A:case _:case b:return w}}}throw`UNABLE TO OPERATE TYPES ${L[s]} / ${L[r]} UNDER OP: ${v.a.names[e]}`}static PowTypeChecking(e,t){if(!(e!=b&&e!=_&&e!=A||t!=b&&t!=_&&t!=A))return!0;throw"PARAMETER TYPES CANT BE OPERATED UNDER FUNCTION POW"}static ImplicitTypeChecking(e,t){switch(e){case _:return t===b||t===A?_:-1;case b:return t===A?_:-1;default:return-1}}}class j extends x{constructor(e){super(e),this.position_code,this.stack,this.isConstant=!1}translate(e){this.iNode=e;const t=e.getValue().toString(),i=be.SymbolTable;if(null==i)throw new Exception("UNABLE TO FIND A VALID SYMBOL TABLE????"+this.parseSemanticError(this.iNode));const s=i.lookup(t,be.ScopeStack.currentNestingLevel());if(null===s)throw`UNABLE TO FIND THE VARIABLE WITH THAT NAME ${t} ${this.parseSemanticError(this.iNode)}`;this.isConstant=s.isConstant(),this.temporary=n.genTemporary();let r="";switch(this.type=s.getType(),this.aux_type=s.getAuxType(),this.dimensions=s.dimensions,this.is_array=s.is_array,s.getRol()){case f:r+=R.unaryAssign(s.getPosition()+"",this.temporary),this.position_code=r+"",r+=R.generateHeapAccess(this.temporary,this.temporary),this.stack=0,this.type=s.getType(),this.aux_type=s.getAuxType();break;case h:r+=R.comment("attribute access"),r+=R.generateStackAccess("P",this.temporary),r+=R.arithmeticOperation("+",this.temporary,s.getPosition(),this.temporary),this.position_code=r+"",r+=R.generateHeapAccess(this.temporary,this.temporary),this.code=r,this.stack=0;break;case y:r+=R.comment("variable access"),r+=R.arithmeticOperation("+","P",s.getPosition(),this.temporary),this.position_code=r+"",r+=R.generateStackAccess(this.temporary,this.temporary),this.stack=1;break;case u:r+=R.comment("ref param access"),r+=R.arithmeticOperation("+","P",s.getPosition(),this.temporary),this.position_code=r+"",r+=R.generateStackAccess(this.temporary,this.temporary),this.stack=1;break;case d:r+=R.comment("val_param access"),r+=R.arithmeticOperation("+","P",s.getPosition(),this.temporary),this.position_code=r+"",r+=R.generateStackAccess(this.temporary,this.temporary),this.stack=1}this.setCode(r)}}class $ extends x{constructor(e){super(e)}translate(e){this.iNode=e;const t=e.lookupByType(v.a.types.EXPRESSION_LIST),i=e.getChild(0).getValue();let s;const r=[];if(null!=t)for(const e of t.getChildren())r.push(new F(this)),r[r.length-1].translate(e);const a=be.SymbolTable.size+1,o=be.ClassTemplates.get(be.Classes.getType(i));let l;const c=[];do{if(l=o.lookupFunction(i,c),null==l)throw`CONSTRUCTOR FOR ${i} DOESN'T MATCH ANY DECLARED OR CREATED BY DEFAULT ${this.parseSemanticError(this.iNode)}`;if(l.getRol()==k){if(0===r.length&&null==l.getParameters())break;if(0===r.length||null!=l.getParameters()){if(null!=l.getParameters()&&l.getParameters().length==r.length){if(s=R.comment("constructor call begin"),!this.parameterChecking(r,l.getParameters())){c.push(l);continue}for(let e=0;e<r.length;e++)if(l.getParameters()[e][2]){if(null==r[e].position_code)throw`EXPECTED A VARIABLE IN THE PARAMETER BY REF NUMBER (${e}) IN ${i}\n                                                ${this.parseSemanticError(this.iNode)}`;s+=0===r[e].stack?r[e].getCode():r[e].position_code}else s+=r[e].getCode();break}c.push(l)}else c.push(l)}else c.push(l)}while(null!=l);if(null==l)throw` CONSTRUCTOR FOR ${i} NOT FOUND ${this.parseSemanticError(this.iNode)}`;this.temporary=n.genTemporary();let h=-1;s+=R.moveStackPointer(!0,a),s+=R.generateTmpStackSave(be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1][1],h=n.getTemporary()-1),s+=R.comment("aca se supone que se pasa el this"),s+=R.arithmeticOperation("+","P","1",this.temporary);for(let e=0;e<r.length;e++)l.getParameters()[e][2]?(s+=R.comment("param by ref"),s+=R.generateStackAssign(this.temporary,r[e].temporary),s+=R.arithmeticOperation("+",this.temporary,"1",this.temporary)):(s+=R.comment("param by value"),s+=R.generateStackAssign(this.temporary,r[e].getTemporary()),s+=R.arithmeticOperation("+","1",this.temporary,this.temporary));s+=R.functionCall(l.functionId),s+=R.generateStackAccess("P",this.temporary),s+=R.generateTmpStackRecover(be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1][1],h),s+=R.moveStackPointer(!1,a),this.setCode(s),this.type=l.getType(),this.aux_type=l.getAuxType()}parameterChecking(e,t){for(let i=0;i<e.length;i++)if(!this.typeChecking(t[i][1],t[i][3],t[i][4],e[i].getType(),e[i].getAuxType(),e[i].dimensions))return!1;return!0}}class D extends x{constructor(e){super(e),this.position_code="",this.access_code="",this.symtab=null,this.symbol=null}translate(e){this.temporary=n.genTemporary();let t=n.genTemporary();this.code=R.comment("array initialization"),this.code+=R.moveHeapPointer(1),this.code+=R.unaryAssign("H",this.temporary),this.code+=R.generateHeapAssign(this.temporary,e.childrenSize()),this.code+=R.moveHeapPointer(e.childrenSize());let i=e.getChild(0).getType(),s=[],r=null;for(let t of e.getChildren()){if(t.getType()!=i)throw"TYPES IN THE ARRAY LITERAL INITIALIZATION ARE NOT THE SAME, UNABLE TO CONTINUE "+this.parseSemanticError(t);r=new Q(this),r.translate(t),s.push(r)}this.type=s[0].getType(),this.aux_type=s[0].getAuxType();let a=s[0].dimensions,o=s[0].is_array;for(let e=1;e<s.length;e++)if(this.type!=s[e].getType()||this.aux_type!=s[e].getAuxType()||a!=s[1].dimensions||o!=s[e].is_array)throw"TYPES IN THE ARRAY LITERAL INITIALIZATION ARE NOT THE SAME, UNABLE TO CONTINUE "+this.parseSemanticError(node);this.code+=R.arithmeticOperation("+",this.temporary,1,t);for(let e=0;e<s.length;e++)this.code+=s[e].getCode(),this.code+=R.generateHeapAssign(t,s[e].temporary),e!=s.length-1&&(this.code+=R.arithmeticOperation("+",t,1,t));this.is_array=!0,this.dimensions=1+s[0].dimensions}}const M=new class{translate(e){let t="",i=new Q(this),s=n.genTemporary(),r=n.genTemporary(),a=n.genTemporary(),o=n.genTemporary(),l=n.genTemporary(),c=n.genTemporary();t+=R.unaryAssign("1",r);for(let h=0;h<e.length;h++)if(i.translate(e[h].getChild(0)),t+=R.comment("Limites de vector "+h),t+=i.getCode(),0==h)t+=R.unaryAssign("H",a),t+=this.vectorTranslator("H",s,i.temporary,null);else{t+=R.comment("ronda"+h+"\n"),t+=R.unaryAssign(a,o),t+=R.comment("last adrress \n"),t+=R.arithmeticOperation("+","1","H",a);let e=n.genLabel(),p=n.genLabel(),u=n.genLabel(),d=n.genLabel(),m=n.genTemporary();t+=R.unaryAssign(r,c),t+=R.generateLabel(e),t+=R.conditionalJMP("==",c,"0",p),t+=R.arithmeticOperation("+",o,"1",o),t+=R.comment("Aqui se asigna el contador actual al temporal\n"),t+=R.unaryAssign(s,m),t+=R.generateLabel(u),t+=R.conditionalJMP("==",m,"0",d),t+=R.moveHeapPointer(1),t+=this.vectorTranslator("H",l,i.temporary,o),t+=R.arithmeticOperation("+",o,"1",o),t+=R.arithmeticOperation("-",m,"1",m),t+=R.inconditionalJMP(u),t+=R.generateLabel(d),t+=R.arithmeticOperation("-",c,"1",c),t+=R.inconditionalJMP(e),t+=R.generateLabel(p),t+=R.arithmeticOperation("*",r,s,r),t+=R.unaryAssign(l,s),t+=R.comment("ULTIMA LINEA DE RONDA "+h+" \n")}return t}vectorTranslator(e,t,i,s){let r="";return null!=s&&(r+=R.generateHeapAssign(s,"H")),r+=R.unaryAssign(i,t),r+=R.generateHeapAssign(e,t),r+=R.arithmeticOperation("+","H",t,"H"),r}};class F extends x{constructor(e){super(e),this.access_code="",this.position_code=""}translate(e){switch(this.iNode=e,e.getType()){case v.a.types.CAST:{const t=new Q(this);t.translate(e),this.aux_type=t.aux_type,this.type=t.type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.position_code=t.getCode(),this.setCode(t.getCode()),this.access_code=t.getCode(),this.temporary=t.getTemporary()}break;case v.a.types.IDENTIFIER:{const t=new j(this);t.translate(e),this.aux_type=t.aux_type,this.type=t.type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.position_code=t.getCode(),this.setCode(t.getCode()),this.access_code=t.getCode(),this.temporary=t.getTemporary()}break;case v.a.types.ARRAY_ACCESS:{const t=new V(this);t.translate(e),this.position_code=R.comment("array access param")+t.access_code,this.type=t.getType(),this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.temporary=t.getTemporary(),this.access_code=t.access_code,this.setCode(this.access_code)}break;case v.a.types.DOT:{const t=new B(this);t.translate(e),this.position_code=t.getCode(),this.type=t.getType(),this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.temporary=t.getTemporary(),this.access_code=t.access_code,this.setCode(this.access_code)}break;case v.a.types.FUNCTION_CALL:{const t=new U(this);t.translate(e),this.type=t.type,this.aux_type=t.aux_type,this.code=t.getCode(),this.position_code=t.getCode(),this.access_code=t.getCode(),this.position_code=t.getCode(),this.dimensions=t.dimensions,this.is_array=t.dimensions,this.temporary=t.getTemporary()}break;case v.a.types.NEW_ARRAY:if(this.type=this.parseType(e.getChild(0).getType()),this.aux_type=this.type===S?be.Classes.getType(e.getChild(0).getValue()):null,-1===this.aux_type)throw Error(`UNABLE TO FIND THE SPECIFIED TYPE ${e.getChild(0).getValue()}${this.parseSemanticError(e.getChild(0))}`);if(this.dimensions=e.getChild(1).childrenSize(),this.is_array=!0,3===e.childrenSize()){const t=new D(this);if(t.translate(e.getChild(2)),t.dimensions!==this.dimensions)throw Error("ARRAY LITERAL DOESN'T HAVE THE SAME DIMENSIONS AS THE DECLARED ARRAY");if(this.type!==t.type||t.aux_type!==this.aux_type)throw Error("ARRAY LITERAL IS NOT THE SAME VALUE AS DECLARED"+this.parseSemanticError(e));this.code=t.getCode(),this.temporary=t.temporary}else this.code=R.comment("ARRAY DECL NOT INITIALIZED INIT"),this.code+=R.moveHeapPointer(1),this.temporary=n.genTemporary(),this.code+=R.unaryAssign("H",this.temporary),this.code+=M.translate(e.getChild(1).getChildren());this.position_code=this.code,this.access_code=this.code;break;case v.a.types.DOLLAR:{const t=new Q(this);t.translate(e.getChild(0));let i=t.getCode();this.position_code=t.getCode(),this.type=t.getType(),this.aux_type=t.aux_type,this.access_code=t.access_code;const s=be.SymbolTable.getSize();if(0!==t.dimensions)i+=R.moveStackPointer(!0,s+1),i+=R.generateStackAssign("P",t.getTemporary()),i+=R.functionCall("native_vector_linealize"),i+=R.generateStackAccess("P",t.getTemporary()),i+=R.moveStackPointer(!1,s+1),this.temporary=t.temporary,this.type=t.type,this.aux_type=t.aux_type,this.code=i,this.dimensions=t.dimensions,this.is_array=!0;else if(null!=t.aux_type){this.temporary=n.genTemporary();const e=be.ClassTemplates.get(t.aux_type);i+=R.moveStackPointer(!0,s+1),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAssign(this.temporary,t.getTemporary()),i+=R.arithmeticOperation("+","P","2",this.temporary),i+=R.generateStackAssign(this.temporary,e.getSize()),i+=R.comment("clonar parametro"),i+=R.functionCall("native_object_clone"),i+=R.generateStackAccess("P",this.temporary),i+=R.moveStackPointer(!1,s+1)}this.position_code=i,this.setCode(i)}break;case v.a.types.NEW:const t=new $(this);t.translate(this.iNode.getChild(0)),this.copyInfo(t),this.aux_type=t.aux_type,this.position_code=this.code,this.access_code=this.code,this.is_array=t.is_array,this.dimensions=t.dimensions;break;case v.a.types.NULL_LITERAL:this.type=S,this.position_code="",this.aux_type=E,this.access_code="0",this.dimensions=0,this.temporary="0",this.is_array=!1;break;case v.a.types.NATIVE_FUNCTION_CALL:default:{const t=new Q(this);t.translate(e),this.type=t.getType(),this.aux_type=t.aux_type,this.setCode(t.getCode()),this.access_code=t.getCode(),this.temporary=t.getTemporary()}}}}class H extends x{constructor(e){super(e),this.pointerInfo="",this.auxTemporary=""}translate(e){this.iNode=e;const t=e.lookupByType(v.a.types.EXPRESSION_LIST);let i;const s=be.SymbolTable.getSize();if(this.temporary=n.genTemporary(),this.iNode.getChild(0).getType()===v.a.types.DOT)throw Error("CAN'T USE THIS KIND OF CALL (BY PARAMETERS NAME) WITH CURRENT LHS"+this.parseSemanticError(this.iNode));i=e.getChild(0).getValue().toLowerCase();let r="";const a=[],o=[];if(null!=t)for(const e of t.getChildren())a.push(new F(this)),a[a.length-1].translate(e.getChild(1)),o.push(e.getChild(0).getValue());const l=be.SymbolTable;if(void 0===l||null==l)throw Error("NULL POINTER EXCEPTION UNABLE TO FIND A VALID OBJECT TYPE IN LHS"+this.parseSemanticError(lhs));let c;const h=[];do{if(c=l.lookupFunction(i,h),null==c)throw Error(`${i} WASN'T FOUND IN THE CURRENT ENVIRONMENT ${this.parseSemanticError(this.iNode)}`);if(0===a.length&&null==c.getParameters())break;if(0===a.length||null!=c.getParameters()){if(null!=c.getParameters()&&c.getParameters().length===a.length){if(r="",!this.parameterCheckingByName(a,c.getParameters(),o)){h.push(c);continue}for(let e=0;e<a.length;e++)if(c.getParameters()[e][2]){if(null==a[e].position_code)throw Error(`EXPECTED A VARIABLE IN THE PARAMETER BY REF NUMBER (${e}) IN ${i}\n                                                ${this.parseSemanticError(this.iNode)}`);r+=1===a[e].stack?a[e].getCode():a[e].position_code}else r+=a[e].getCode();break}h.push(c)}else h.push(c)}while(null!=c);if(null==c)throw Error(`FUNCTION OR PROCEDURE WITH NAME ${i} NOT FOUND ${this.parseSemanticError(this.iNode)}`);let u=-1;r+=R.moveStackPointer(!0,s+1),r+=R.generateTmpStackSave(be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1][1],u=n.getTemporary()-1),r+=R.arithmeticOperation("+","P","1",this.temporary);for(let e=0;e<a.length;e++)c.getParameters()[e][2]?(r+=R.comment("param by ref"),r+=R.generateStackAssign(this.temporary,a[e].temporary),r+=R.arithmeticOperation("+",this.temporary,"1",this.temporary)):(r+=R.comment("param by value"),r+=R.generateStackAssign(this.temporary,a[e].temporary),r+=R.arithmeticOperation("+",this.temporary,"1",this.temporary));r+=R.functionCall(c.functionId),c.getRol()===p&&(this.temporary=n.genTemporary(),r+=R.arithmeticOperation("+","P","1",this.temporary),r+=R.generateStackAccess(this.temporary,this.temporary),r+=R.comment("return in position P + 1")),r+=R.generateTmpStackRecover(be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1][1],u),r+=R.moveStackPointer(!1,s+1),this.setCode(r),this.type=c.getType(),this.aux_type=c.getAuxType(),this.dimensions=c.dimensions,this.is_array=0!==c.dimensions}parameterCheckingByName(e,t,i){const s=[];for(let r=0,n=0;r<e.length;r++){if(n=i.indexOf(t[r][0]),-1===n)throw Error(`UNKOWN PARAMETER NAME ${i[r]} IN FUNCTION CALL${this.parseSemanticError(this.iNode)}`);if(!this.typeChecking(t[r][1],t[r][3],t[r][4],e[n].getType(),e[n].getAuxType(),e[n].dimensions))return!1;s.push(e[n])}e.splice(0,e.length);for(const t of s)e.push(t);return!0}}class U extends x{constructor(e){super(e),this.pointerInfo="",this.auxTemporary=""}translate(e){this.iNode=e;const t=e.lookupByType(v.a.types.EXPRESSION_LIST);let i,s=!1;const r=be.SymbolTable.getSize();this.temporary=n.genTemporary(),this.iNode.getChild(0).getType()===v.a.types.DOT?(i=this.iNode.getChild(0).getChild(1).getValue().toLowerCase(),s=!0):i=e.getChild(0).getValue().toLowerCase();let a="";const o=[];if(null!=t){let i=0;for(const e of t.getChildren())e.getType()===v.a.types.EQ&&(i+=1);if(i===t.childrenSize()){const t=new H(this);return t.translate(e),this.aux_type=t.aux_type,this.type=t.type,this.temporary=t.temporary,this.code=t.code,this.is_array=t.is_array,void(this.dimensions=t.dimensions)}}if(null!=t)for(const e of t.getChildren())o.push(new F(this)),s&&"instanceof"===i||o[o.length-1].translate(e);const l=be.SymbolTable;if(s){const e=this.iNode.getChild(0).getChild(0),s=new Q(e);if(s.translate(e),a+=s.code,s.type===T){if(["touppercase","tolowercase","tochararray","length","charat"].includes(i)){if("charat"===i){if(1!==o.length)throw Error(`UNABLE TO CALL ${i} ON STRING BECAUSE OF PARAMS${this.parseSemanticError(this.iNode)}`);const e=n.genTemporary();return a+=o[0].code,a+=R.moveStackPointer(!0,r+1),a+=R.arithmeticOperation("+","P",1,e),a+=R.generateStackAssign(e,s.getTemporary()),a+=R.arithmeticOperation("+","P",2,e),a+=R.generateStackAssign(e,o[0].getTemporary()),a+=R.functionCall("native_string_charat"),a+=R.generateStackAccess("P",this.temporary),a+=R.moveStackPointer(!1,r+1),this.type=A,this.aux_type=null,this.code=a,this.dimensions=0,void(this.is_array=!1)}if(0!==o.length)throw Error(`UNABLE TO CALL ${i} ON STRING${this.parseSemanticError(this.iNode)}`);if(a+=R.moveStackPointer(!0,r+1),a+=R.generateStackAssign("P",s.temporary),"length"===i){const e=n.genTemporary();return a+=R.arithmeticOperation("+","P",1,e),a+=R.generateStackAssign(e,s.getTemporary()),a+=R.functionCall("java_string_length"),a+=R.generateStackAccess("P",this.temporary),a+=R.moveStackPointer(!1,r+1),this.type=b,this.aux_type=null,this.code=a,this.dimensions=0,void(this.is_array=!1)}return"tochararray"===i?(a+=R.functionCall("java_string_to_chararray"),a+=R.generateStackAccess("P",this.temporary),a+=R.moveStackPointer(!1,r+1),this.type=A,this.aux_type=null,this.code=a,this.dimensions=1,void(this.is_array=!0)):("touppercase"===i?a+=R.functionCall("java_string_to_uppercase"):"tolowercase"===i&&(a+=R.functionCall("java_string_to_lowercase")),a+=R.generateStackAccess("P",this.temporary),a+=R.moveStackPointer(!1,r+1),this.type=T,this.aux_type=null,this.code=a,this.dimensions=0,void(this.is_array=!1))}throw Error(`UNABLE TO CALL ${i} ON STRING${this.parseSemanticError(this.iNode)}`)}if(0!==s.dimensions){if(0!==o.length)throw Error(`UNABLE TO CALL ${i} ON ARRAY${this.parseSemanticError(this.iNode)}`);if("linealize"===i)return a+=R.generateStackAssign("P",s.getTemporary()),a+=R.functionCall("native_vector_linealize"),a+=R.generateStackAccess("P",this.temporary),this.type=s.type,this.aux_type=s.aux_type,this.code=a,this.dimensions=s.dimensions,void(this.is_array=!0)}else if(s.getType()===S&&null!==s.aux_type){if("instanceof"===i){a+=R.comment("inicio de instance");const e=[n.genLabel(),n.genLabel()];if(this.temporary=n.genTemporary(),1!==o.length)throw Error(`UNABLE TO CALL ${i} ON OBJECT, PARAMETER MISSMATCH${this.parseSemanticError(this.iNode)}`);const r=t.getChild(0).getValue(),l=be.Classes.getType(r);if(-1===l)throw Error("UNABLE TO FIND THE SPECIFIED TYPE"+this.parseSemanticError(t.getChild(0)));return s.aux_type===be.Classes.getType("var")?(a+=R.arithmeticOperation("+",s.temporary,"1",s.temporary),a+=R.generateHeapAccess(s.temporary,s.temporary),a+=R.conditionalJMP("==",l,s.temporary,e[0]),a+=R.unaryAssign("0",this.temporary),a+=R.inconditionalJMP(e[1]),a+=R.generateLabel(e[0]),a+=R.unaryAssign("1",this.temporary),a+=R.generateLabel(e[1])):(a+=R.conditionalJMP("==",l,s.aux_type,e[0]),a+=R.unaryAssign("0",this.temporary),a+=R.inconditionalJMP(e[1]),a+=R.generateLabel(e[0]),a+=R.unaryAssign("1",this.temporary),a+=R.generateLabel(e[1])),this.type=w,this.aux_type=null,this.dimensions=0,this.is_array=!1,void(this.code=a)}if("size"===i||"getreference"===i){if(0!==o.length)throw Error(`UNABLE TO CALL ${i} ON OBJECT, PARAMETER MISSMATCH${this.parseSemanticError(this.iNode)}`);if("size"===i){const e=be.ClassTemplates.get(s.aux_type),t=n.genLabel(),i=n.genLabel();return a+=R.conditionalJMP("==",s.getTemporary(),"0",t),a+=R.unaryAssign(e.getSize(),this.temporary),a+=R.inconditionalJMP(i),a+=R.generateLabel(t),a+=R.unaryAssign(0,this.temporary),a+=R.generateLabel(i),this.type=b,this.aux_type=null,this.code=a,this.dimensions=0,void(this.is_array=!1)}if("getreference"===i)return this.type=b,this.temporary=s.getTemporary(),this.aux_type=null,this.code=a,this.dimensions=0,void(this.is_array=!1)}}}if(void 0===l||null==l)throw Error("NULL POINTER EXCEPTION UNABLE TO FIND A VALID OBJECT TYPE IN LHS"+this.parseSemanticError(lhs));let c;const h=[];do{if(c=l.lookupFunction(i,h),null==c)throw Error(`${i} WASN'T FOUND IN THE CURRENT ENVIRONMENT ${this.parseSemanticError(this.iNode)}`);if(0===o.length&&null==c.getParameters())break;if(0===o.length||null!=c.getParameters()){if(null!=c.getParameters()&&c.getParameters().length===o.length){if(a="",!this.parameterChecking(o,c.getParameters())){h.push(c);continue}for(let e=0;e<o.length;e++)if(c.getParameters()[e][2]){if(null==o[e].position_code)throw Error(`EXPECTED A VARIABLE IN THE PARAMETER BY REF NUMBER (${e}) IN ${i}\n                                                ${this.parseSemanticError(this.iNode)}`);a+=1===o[e].stack?o[e].getCode():o[e].position_code}else a+=o[e].getCode();break}h.push(c)}else h.push(c)}while(null!=c);if(null==c)throw Error(`FUNCTION OR PROCEDURE WITH NAME ${i} NOT FOUND ${this.parseSemanticError(this.iNode)}`);let u=-1;a+=R.moveStackPointer(!0,r+1),a+=R.generateTmpStackSave(be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1][1],u=n.getTemporary()-1),a+=R.arithmeticOperation("+","P","1",this.temporary);for(let e=0;e<o.length;e++)c.getParameters()[e][2]?(a+=R.comment("param by ref"),a+=R.generateStackAssign(this.temporary,o[e].temporary),a+=R.arithmeticOperation("+",this.temporary,"1",this.temporary)):(a+=R.comment("param by value"),a+=R.generateStackAssign(this.temporary,o[e].temporary),a+=R.arithmeticOperation("+",this.temporary,"1",this.temporary));a+=R.functionCall(c.functionId),c.getRol()===p&&(this.temporary=n.genTemporary(),a+=R.arithmeticOperation("+","P","1",this.temporary),a+=R.generateStackAccess(this.temporary,this.temporary),a+=R.comment("return in position P + 1")),a+=R.generateTmpStackRecover(be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1][1],u),a+=R.moveStackPointer(!1,r+1),this.setCode(a),this.type=c.getType(),this.aux_type=c.getAuxType(),this.dimensions=c.dimensions,this.is_array=0!==c.dimensions}parameterChecking(e,t){for(let i=0;i<e.length;i++)if(!this.typeChecking(t[i][1],t[i][3],t[i][4],e[i].getType(),e[i].getAuxType(),e[i].dimensions))return!1;return!0}}class V extends x{constructor(e){super(e),this.position_code="",this.access_code=""}translate(e){this.iNode=e;const t=n.genTemporary(),i=e.getChild(0);if(i.getType()===v.a.types.DOT){const s=new B(this);s.translate(i),this.code=R.comment("ARRAY ACCESS OBJECT ACCESS"),this.code+=s.access_code,this.temporary=s.temporary;const r=this.fillParameterList(e);for(let e=0;e<r.length;e++)this.code+=r[e].code,this.code+=R.generateHeapAccess(this.temporary,t),this.code+=R.comment("IOB"),this.code+=R.conditionalJMP(">=",r[e].temporary,t,be.ErrorsLabels.get("indexoutofbounds")),this.code+=R.arithmeticOperation("+",this.temporary,"1",this.temporary),this.code+=R.arithmeticOperation("+",this.temporary,r[e].temporary,this.temporary),e===r.length-1&&(this.position_code=this.code+""),this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=this.code;this.dimensions=s.dimensions==r.length?0:s.dimensions-r.length,this.is_array=s.dimensions!=r.length,this.aux_type=s.aux_type,this.type=s.type}else if(i.getType()===v.a.types.IDENTIFIER){const s=new j(this);if(s.translate(i),!s.is_array)throw`LEFT HAND SIDE IS NOT OF TYPE ARRAY ${i.getValue()}${this.parseSemanticError(i)}`;if(s.dimensions<this.iNode.childrenSize()-1)throw"CAN'T ACCESS THE ARRAY, REQUESTED DIMENSIONS ARE BIGGER THAN DEFINED"+this.parseSemanticError(this.iNode);this.code=R.comment("ARRAY ACCESS IDENTIFIER"),this.code+=s.code,this.temporary=s.temporary;const r=this.fillParameterList(e);for(let e=0;e<r.length;e++)this.code+=r[e].code,this.code+=R.generateHeapAccess(this.temporary,t),this.code+=R.conditionalJMP(">=",r[e].temporary,t,be.ErrorsLabels.get("indexoutofbounds")),this.code+=R.arithmeticOperation("+",this.temporary,"1",this.temporary),this.code+=R.arithmeticOperation("+",this.temporary,r[e].temporary,this.temporary),e===r.length-1&&(this.position_code=this.code+""),this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=this.code;this.dimensions=s.dimensions==r.length?0:s.dimensions-r.length,this.is_array=s.dimensions!=r.length,this.aux_type=s.aux_type,this.type=s.type}else{if(i.getType()!=v.a.types.FUNCTION_CALL)throw"UNABLE TO ACCESS A VARIABLE THAT IS NOT OF TYPE ARRAY "+this.parseSemanticError(e);{const s=new U(this);if(s.translate(i),!s.is_array)throw`LEFT HAND SIDE FUNCTION CALL IS NOT OF TYPE ARRAY ${i.getValue()}${this.parseSemanticError(i)}`;if(s.dimensions<this.iNode.childrenSize()-1)throw"CAN'T ACCESS THE ARRAY, REQUESTED DIMENSIONS ARE BIGGER THAN DEFINED"+this.parseSemanticError(this.iNode);this.code=R.comment("ARRAY ACCESS FROM FUNCTION CALL"),this.code+=s.code,this.temporary=s.temporary;const r=this.fillParameterList(e);for(let e=0;e<r.length;e++)this.code+=r[e].code,this.code+=R.generateHeapAccess(this.temporary,t),this.code+=R.conditionalJMP(">=",r[e].temporary,t,be.ErrorsLabels.get("indexoutofbounds")),this.code+=R.arithmeticOperation("+",this.temporary,"1",this.temporary),this.code+=R.arithmeticOperation("+",this.temporary,r[e].temporary,this.temporary),e===r.length-1&&(this.position_code=this.code+""),this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=this.code;this.dimensions=s.dimensions==r.length?0:s.dimensions-r.length,this.is_array=s.dimensions!=r.length,this.aux_type=s.aux_type,this.type=s.type}}}fillParameterList(e){const t=[];for(let i=1;i<e.childrenSize();i++)if(e.getChild(i).getType()==v.a.types.EXPRESSION_LIST)for(const s of e.getChild(i).getChildren()){const e=new Q(this);e.translate(s),t.add(e)}else{const s=new Q(this);s.translate(e.getChild(i)),t.push(s)}return t}getCode(){return this.access_code}}class B extends x{constructor(e){super(e),this.position_code="",this.access_code="",this.code=""}translate(e){this.iNode=e;const t=e.getChild(0),i=e.getChild(1);let s="";const r="length"===i.getValue();if(t.getType()===v.a.types.DOT){const n=new B(this);if(n.translate(t),s+=n.access_code,n.is_array){if(r)return this.temporary=n.temporary,this.position_code=n.access_code,this.code=R.comment("length access"),this.code+=n.access_code,this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=this.code,this.type=b,this.aux_type=null,this.dimensions=0,void(this.is_array=!1);throw Error("THE LHS OF DOT OPERATOR IS OF TYPE ARRAY NOT OBJECT"+this.parseSemanticError(e))}const a=be.ClassTemplates.get(n.aux_type);if(null==a)throw Error("UNABLE TO FIND THE SPECIFIED VALUE TYPE, MY ERROR "+this.parseSemanticError(this.iNode));let o=null;if(null==(o=a.lookup(i.getValue())))throw Error(`UNABLE TO FIND THE REQUESTED KEY ${identifier.toUpperCase()} ${this.parseSemanticError(this.iNode)}`);this.temporary=n.temporary,s+=R.comment("left hand dot access"),s+=R.arithmeticOperation("+",n.getTemporary(),o.getPosition(),this.temporary),this.type=o.getType(),this.aux_type=o.getAuxType(),this.dimensions=o.dimensions,this.is_array=o.is_array,this.position_code=s,this.access_code=this.position_code+R.generateHeapAccess(this.temporary,this.temporary),this.code=this.access_code}else if(t.getType()===v.a.types.ARRAY_ACCESS){const n=new V(this);if(n.translate(t),s+=n.access_code,n.is_array){if(r)return this.temporary=n.temporary,this.code=R.comment("length access"),this.position_code=n.access_code,this.code+=n.access_code,this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=this.code+"",this.type=b,this.aux_type=null,this.dimensions=0,void(this.is_array=!1);throw Error("THE LHS OF DOT OPERATOR IS OF TYPE ARRAY NOT OBJECT"+this.parseSemanticError(e))}const a=be.ClassTemplates.get(n.aux_type);if(null==a)throw Error("UNABLE TO FIND THE SPECIFIED VALUE TYPE, MY ERROR "+this.parseSemanticError(this.iNode));let o=null;if(null==(o=a.lookup(i.getValue())))throw Error(`UNABLE TO FIND THE REQUESTED KEY ${identifier.toUpperCase()} ${this.parseSemanticError(this.iNode)}`);this.temporary=n.temporary,s+=R.comment("left hand dot access"),s+=R.arithmeticOperation("+",n.getTemporary(),o.getPosition(),this.temporary),this.type=o.getType(),this.aux_type=o.getAuxType(),this.dimensions=o.dimensions,this.is_array=o.is_array,this.position_code=s,this.access_code=this.position_code+R.generateHeapAccess(this.temporary,this.temporary),this.code=this.access_code}else if(t.getType()===v.a.types.IDENTIFIER){const s=new j(this);if(s.translate(t),s.is_array){if(r)return this.temporary=s.temporary,this.code=R.comment("length access"),this.code+=s.code,this.position_code=s.code,this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=this.code+"",this.type=b,this.aux_type=null,this.dimensions=0,void(this.is_array=!1);throw Error("THE LHS OF DOT OPERATOR IS OF TYPE ARRAY NOT OBJECT"+this.parseSemanticError(e))}if(null==s.aux_type)throw Error(`LEFT HAND SIDE OF DOT OPERATION IS NOT OF TYPE OBJECT ${t.getValue()}${this.parseSemanticError(t)}`);let a=null;if(null==(a=be.ClassTemplates.get(s.aux_type).lookup(i.getValue())))throw Error("UNABLE TO FIND RIGHT HAND SIDE OF DOT OPERATION AT "+this.parseSemanticError(i));this.temporary=n.genTemporary(),this.position_code=s.getCode(),this.position_code+=R.arithmeticOperation("+",s.temporary,a.getPosition(),this.temporary),this.access_code=this.position_code+"",this.access_code+=R.generateHeapAccess(this.temporary,this.temporary),this.aux_type=a.getAuxType(),this.type=a.getType(),this.dimensions=a.dimensions,this.is_array=a.is_array,this.code=this.access_code}else if(t.getType()===v.a.types.FUNCTION_CALL){const n=new U(this);if(n.translate(t),this.temporary=n.temporary,this.position_code=n.code,n.is_array){if(r)return this.temporary=n.temporary,this.position_code=n.code,this.code=R.comment("length access"),this.code+=n.code,this.code+=R.generateHeapAccess(this.temporary,this.temporary),this.access_code=s,this.type=b,this.aux_type=null,this.dimensions=0,void(this.is_array=!1);throw Error("THE LHS OF DOT OPERATOR IS OF TYPE ARRAY NOT OBJECT"+this.parseSemanticError(e))}const a=be.ClassTemplates.get(n.aux_type);if(void 0===a)throw Error("LHS DIDN'T RETURN A VALID OBJECT TYPE"+this.parseSemanticError(t));const o=a.lookup(i.getValue());if(null===o)throw Error(`UNABLE TO FIND THE VARIABLE ${i.getValue()} IN CURRENT ENV${this.parseSemanticError(e)}`);this.aux_type=o.getAuxType(),this.type=o.getType(),this.dimensions=o.dimensions,this.is_array=o.is_array,this.position_code+=R.arithmeticOperation("+",this.temporary,o.getPosition(),this.temporary),this.access_code=this.position_code+R.generateHeapAccess(this.temporary,this.temporary),this.code=this.access_code}else{if(t.getType()!==v.a.types.CAST)throw Error(`UNABLE TO PERFORM DOT ACCESS ON LHS ${v.a.names[t.getType()]}${this.parseSemanticError(e)}`);{const s=new Q(this);s.translate(t),this.position_code=s.code;const r=be.ClassTemplates.get(s.aux_type);if(void 0===r)throw Error("LHS DIDN'T RETURN A VALID OBJECT TYPE"+this.parseSemanticError(t));const n=r.lookup(i.getValue());if(null===n)throw Error(`UNABLE TO FIND THE VARIABLE ${i.getValue()} IN CURRENT ENV${this.parseSemanticError(e)}`);this.temporary=s.temporary,this.aux_type=n.getAuxType(),this.type=n.getType(),this.dimensions=n.dimensions,this.is_array=n.is_array,this.position_code+=R.arithmeticOperation("+",this.temporary,n.getPosition(),this.temporary),this.access_code=this.position_code+R.generateHeapAccess(this.temporary,this.temporary),this.code=this.access_code}}}}class z extends x{constructor(e){super(e)}translate(e){this.iNode=e;const t=e.getChild(0),i=e.getChild(1),s=new Q(this);if(s.translate(i),this.code+=s.getCode(),t.getType()===v.a.types.ARRAY_ACCESS){const t=new V(this);if(t.translate(e.getChild(0)),t.type!==s.type||t.aux_type!=s.aux_type||s.is_array&&!t.is_array||s.dimensions!=t.dimensions){if(!this.typeChecking(t.type,t.aux_type,t.dimensions,s.type,s.aux_type,s.dimensions))throw"UNABLE TO PERFORM ASSIGN, TYPES DIFFER"+this.parseSemanticError(e);this.code+=R.comment("impilicit cast"+this.iNode.line+" "+this.iNode.column)}return this.code+=t.position_code,this.code+=R.generateHeapAssign(t.temporary,s.temporary),this.temporary=s.temporary,this.type=s.type,this.aux_type=s.aux_type,this.dimensions=t.dimensions,void(this.is_array=t.is_array)}if(t.getType()===v.a.types.DOT){const i=new B(this);if(i.translate(t),this.code=s.code+i.position_code,i.type!==s.type||i.aux_type!==s.aux_type||s.dimensions!==i.dimensions){if(!this.typeChecking(i.type,i.aux_type,i.dimensions,s.type,s.aux_type,s.dimensions))throw"UNABLE TO PERFORM ASSIGN, TYPES DIFFER"+this.parseSemanticError(e);this.code+=R.comment("impilicit cast"+this.iNode.line+" "+this.iNode.column)}return this.code+=R.generateHeapAssign(i.temporary,s.temporary),this.temporary=i.temporary,this.type=s.type,this.aux_type=s.aux_type,this.dimensions=i.dimensions,void(this.is_array=i.is_array)}if(t.getType()===v.a.types.IDENTIFIER){const i=new j(this);if(i.translate(t),i.isConstant)throw new Error("UNABLE TO REASIGN A VALUE TO A CONSTANT VARIABLE "+t.getValue());if(i.aux_type===be.Classes.getType("var"))return this.code=s.code+i.code,this.code+=R.comment("variable assign in heap para var / global"),this.code+=R.generateHeapAssign(i.temporary,s.temporary),this.code+=R.arithmeticOperation("+",i.temporary,"1",i.temporary),this.code+=R.generateHeapAssign(i.temporary,s.type===S?s.aux_type:s.type),this.temporary=s.temporary,this.type=S,this.aux_type=i.aux_type,this.dimensions=0,void(this.is_array=!1);if(i.type!==s.type||i.aux_type!==s.aux_type||s.dimensions!==i.dimensions){if(!this.typeChecking(i.type,i.aux_type,i.dimensions,s.type,s.aux_type,s.dimensions))throw Error("UNABLE TO PERFORM ASSIGN, TYPES DIFFER"+this.parseSemanticError(e));this.code+=R.comment("impilicit cast"+this.iNode.line+" "+this.iNode.column)}this.code=s.code+i.position_code,1===i.stack?(this.code+=R.comment("variable assign in stack"),this.code+=R.generateStackAssign(i.temporary,s.temporary),this.temporary=s.temporary):(this.code+=R.comment("variable assign in heap"),this.code+=R.generateHeapAssign(i.temporary,s.temporary),this.temporary=s.temporary),this.type=i.type,this.aux_type=i.aux_type,this.dimensions=i.dimensions,this.is_array=i.is_array}}}class Y extends x{constructor(e){super(e)}translate(e){switch(this.iNode=e,e.getType()){case v.a.types.MINUS:1===e.childrenSize()?this.translateUnaryNumber(this.iNode):this.translateBinaryArithmetic(e);break;case v.a.types.PLUS:case v.a.types.MULT:case v.a.types.DIV:case v.a.types.MOD:this.translateBinaryArithmetic(e);break;case v.a.types.POW:{const t=be.SymbolTable.getSize()+1,i=new Q(this),s=new Q(this);i.translate(e.getChild(0)),s.translate(e.getChild(1));try{P.PowTypeChecking(i.getType(),s.getType())}catch(t){throw`${t} ${this.parseSemanticError(e)}`}this.code=R.comment("llamada a power"),this.temporary=n.genTemporary(),this.aux_type=null,this.dimensions=0,this.type=_,this.code+=i.getCode()+s.getCode(),this.code+=R.moveStackPointer(!0,t),this.code+=R.arithmeticOperation("+","P",1,this.temporary),this.code+=R.generateStackAssign(this.temporary,i.getTemporary()),this.code+=R.arithmeticOperation("+","P",2,this.temporary),this.code+=R.generateStackAssign(this.temporary,s.getTemporary()),this.code+=R.functionCall("native_java_pow"),this.code+=R.generateStackAccess("P",this.temporary),this.code+=R.moveStackPointer(!1,t)}break;case v.a.types.QUESTION:this.translateQuestion(e);break;case v.a.types.CHARACTER_LITERAL:case v.a.types.BOOLEAN_LITERAL:case v.a.types.STRING_LITERAL:case v.a.types.NULL_LITERAL:case v.a.types.DOUBLE_LITERAL:case v.a.types.INTEGER_LITERAL:this.translateConstant(e);break;case v.a.types.CAST:this.translateCast(e);break;case v.a.types.ARRAY_LITERAL:const t=new D(this);t.translate(e),this.aux_type=t.aux_type,this.type=t.type,this.temporary=t.temporary,this.dimensions=t.dimensions,this.is_array=t.is_array,this.code=t.code;break;case v.a.types.NEW_ARRAY:if(this.type=this.parseType(e.getChild(0).getType()),this.aux_type=this.type===S?be.Classes.getType(e.getChild(0).getValue()):null,-1===this.aux_type)throw`UNABLE TO FIND THE SPECIFIED TYPE ${e.getChild(0).getValue()}${this.parseSemanticError(e.getChild(0))}`;if(this.dimensions=e.getChild(1).childrenSize(),this.is_array=!0,3===e.childrenSize()){const t=new D(this);if(t.translate(e.getChild(2)),t.dimensions!==this.dimensions)throw"ARRAY LITERAL DOESN'T HAVE THE SAME DIMENSIONS AS THE DECLARED ARRAY";if(this.type!==t.type||t.aux_type!==this.aux_type)throw"ARRAY LITERAL IS NOT THE SAME VALUE AS DECLARED"+this.parseSemanticError(e);this.code=t.getCode(),this.temporary=t.temporary}else this.code=R.comment("ARRAY DECL NOT INITIALIZED INIT"),this.code+=R.moveHeapPointer(1),this.temporary=n.genTemporary(),this.code+=R.unaryAssign("H",this.temporary),this.code+=M.translate(e.getChild(1).getChildren());break;case v.a.types.NEW:const i=new $(this);i.translate(this.iNode),this.copyInfo(i),this.aux_type=i.aux_type;break;case v.a.types.NATIVE_FUNCTION_CALL:this.translateNativeCall(e);break;case v.a.types.FUNCTION_CALL:const s=new U(this);s.translate(e),this.copyInfo(s),this.aux_type=s.aux_type;break;case v.a.types.IDENTIFIER:const r=new j(this);r.translate(e),this.copyInfo(r),this.aux_type=r.aux_type,this.position_code=r.position_code;break;case v.a.types.DOT:{const t=new B(this);t.translate(e),this.copyInfo(t),this.aux_type=t.aux_type,this.setCode(t.access_code)}break;case v.a.types.ARRAY_ACCESS:{const t=new V(this);t.translate(e),this.setTemporary(t.temporary),this.type=t.type,this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.code=t.access_code}break;case v.a.types.PREDEC:case v.a.types.PREINC:{const t=e.getType()===v.a.types.PREINC;switch(e.getChild(0).getType()){case v.a.types.IDENTIFIER:{const i=new j(this);i.translate(e.getChild(0)),this.type=i.type,this.dimensions=i.dimensions,this.is_array=i.is_array;let s=i.position_code;if(0!==this.dimensions)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));if(this.type!==b&&this.type!==_&&this.type!==A)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));this.temporary=n.genTemporary(),1===i.stack?(s+=R.generateStackAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",this.temporary),s+=R.generateStackAssign(i.getTemporary(),this.temporary),this.setCode(s)):(s+=R.generateHeapAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",this.temporary),s+=R.generateHeapAssign(i.getTemporary(),this.temporary),this.setCode(s))}break;case v.a.types.DOT:{const i=new B(this);if(i.translate(e.getChild(0)),this.type=i.type,this.dimensions=i.dimensions,0!==this.dimensions)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));if(this.type!==b&&this.type!==_&&this.type!==A)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));let s=R.comment("dot access")+i.position_code;this.temporary=n.genTemporary(),s+=R.generateHeapAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",this.temporary),s+=R.generateHeapAssign(i.getTemporary(),this.temporary),this.setCode(s)}break;case v.a.types.ARRAY_ACCESS:{const i=new V(this);if(i.translate(e.getChild(0)),this.type=i.type,0!==this.dimensions)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));if(this.type!==b&&this.type!==_&&this.type!==A)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));let s=R.comment("array -- ++")+i.position_code;this.temporary=n.genTemporary(),s+=R.generateHeapAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",this.temporary),s+=R.generateHeapAssign(i.getTemporary(),this.temporary),this.setCode(s)}break;default:throw Error(`UNABLE TO USE ${t?"++":"--"} IN ANYTHING OTHER THAN AN OBJECT, ARRAY ACCESS OR VARIABLE${this.parseSemanticError(e)}`)}}break;case v.a.types.EQ:{const t=new z(this);t.translate(e),this.code=t.getCode(),this.temporary=t.getTemporary(),this.aux_type=t.aux_type,this.dimensions=t.dimension,this.is_array=t.is_array}break;case v.a.types.POSTDEC:case v.a.types.POSTINC:{const t=e.getType()===v.a.types.POSTINC;switch(e.getChild(0).getType()){case v.a.types.IDENTIFIER:{const i=new j(this);if(i.translate(e.getChild(0)),this.type=i.type,this.dimensions=i.dimensions,0!==this.dimensions)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));if(this.type!==b&&this.type!==_&&this.type!==A)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));let s=i.position_code;const r=n.genTemporary();this.temporary=n.genTemporary(),1===i.stack?(s+=R.generateStackAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",r),s+=R.generateStackAssign(i.getTemporary(),r),this.setCode(s)):(s+=R.generateHeapAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",r),s+=R.generateHeapAssign(i.getTemporary(),r),this.setCode(s))}break;case v.a.types.DOT:{const i=new B(this);if(i.translate(e.getChild(0)),this.type=i.type,this.dimensions=i.dimensions,0!==this.dimensions)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));if(this.type!==b&&this.type!==_&&this.type!==A)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));let s=i.position_code;const r=n.genTemporary();this.temporary=n.genTemporary(),s+=R.generateHeapAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",r),s+=R.generateHeapAssign(i.getTemporary(),r),this.setCode(s)}break;case v.a.types.ARRAY_ACCESS:{const i=new V(this);if(i.translate(e.getChild(0)),this.type=i.type,this.dimensions=i.dimensions,0!==this.dimensions)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));if(this.type!==b&&this.type!==_&&this.type!==A)throw Error("UNABLE TO USE THIS OPERATOR IN ANYTHING OTHER THAN NUMERIC TYPE"+this.parseSemanticError(e));let s=i.position_code;const r=n.genTemporary();this.temporary=n.genTemporary(),s+=R.generateHeapAccess(i.getTemporary(),this.temporary),s+=R.arithmeticOperation(t?"+":"-",this.temporary,"1",r),s+=R.generateHeapAssign(i.getTemporary(),r),this.setCode(s)}break;default:throw Error(`UNABLE TO USE ${t?"++":"--"} IN ANYTHING OTHER THAN AN OBJECT, ARRAY ACCESS OR VARIABLE${this.parseSemanticError(e)}`)}}}}translateBinaryArithmetic(e){const t=e.getChild(0),i=e.getChild(1),s=new Q(this),r=new Q(this);s.translate(t),r.translate(i);try{this.type=P.ExpressionTypeChecking(e.getType(),s.getType(),r.getType())}catch(e){throw Error(`${e}${this.parseSemanticError(this.iNode)}`)}if(this.type===T){this.aux_type=null,this.dimensions=0,this.is_array=!1;const e=s.getType()===T?r.getType():s.getType(),t=e===s.getType();let i=`${s.getCode()} ${r.getCode()}`;this.temporary=n.genTemporary();const a=be.SymbolTable.getSize()+1;switch(i+=R.comment("native calls to concatenate strings"),e){case A:{const e=n.genTemporary(),o=n.genTemporary();i+=R.moveStackPointer(!0,a),i+=R.arithmeticOperation("+","1","P",e),i+=R.generateStackAssign(e,t?s.getTemporary():r.getTemporary()),i+=R.functionCall("native_java_char_to_string\n"),i+=R.generateStackAccess("P",o),t?(i+=R.generateStackAssign(e,o),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary())):(i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary()),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,o)),i+=R.functionCall("native_java_concat_strings"),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAccess(this.temporary,this.temporary),i+=R.moveStackPointer(!1,a)}break;case _:{const e=n.genTemporary(),o=n.genTemporary();i+=R.moveStackPointer(!0,a),i+=R.arithmeticOperation("+","1","P",e),i+=R.generateStackAssign(e,t?s.getTemporary():r.getTemporary()),i+=R.functionCall("native_java_real_to_string"),i+=R.generateStackAccess("P",o),t?(i+=R.generateStackAssign(e,o),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary())):(i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary()),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,o)),i+=R.functionCall("native_java_concat_strings"),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAccess(this.temporary,this.temporary),i+=R.moveStackPointer(!1,a)}break;case b:{const e=n.genTemporary(),o=n.genTemporary();i+=R.moveStackPointer(!0,a),i+=R.arithmeticOperation("+","1","P",e),i+=R.generateStackAssign(e,t?s.getTemporary():r.getTemporary()),i+=R.functionCall("native_java_int_to_string"),i+=R.generateStackAccess("P",o),t?(i+=R.generateStackAssign(e,o),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary())):(i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary()),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,o)),i+=R.functionCall("native_java_concat_strings"),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAccess(this.temporary,this.temporary),i+=R.moveStackPointer(!1,a)}break;case T:{const e=n.genTemporary();i+=R.moveStackPointer(!0,a),i+=R.arithmeticOperation("+","P","1",e),i+=R.generateStackAssign(e,s.getTemporary()),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,r.getTemporary()),i+=R.functionCall("native_java_concat_strings"),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAccess(this.temporary,this.temporary),i+=R.moveStackPointer(!1,a)}break;case w:{const e=n.genTemporary(),o=n.genTemporary();i+=R.moveStackPointer(!0,a),i+=R.arithmeticOperation("+","1","P",e),i+=R.generateStackAssign(e,t?s.getTemporary():r.getTemporary()),i+=R.functionCall("native_java_boolean_to_string"),i+=R.generateStackAccess("P",o),t?(i+=R.generateStackAssign(e,o),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary())):(i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary()),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,o)),i+=R.functionCall("native_java_concat_strings"),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAccess(this.temporary,this.temporary),i+=R.moveStackPointer(!1,a)}break;case S:{const e=n.genTemporary(),o=n.genTemporary();i+=R.moveStackPointer(!0,a),i+=R.arithmeticOperation("+","1","P",e),i+=R.generateStackAssign(e,t?s.getTemporary():r.getTemporary()),i+=R.functionCall("default_object_to_string"),i+=R.generateStackAccess("P",o),t?(i+=R.generateStackAssign(e,o),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary())):(i+=R.generateStackAssign(e,t?r.getTemporary():s.getTemporary()),i+=R.arithmeticOperation("+","1",e,e),i+=R.generateStackAssign(e,o)),i+=R.functionCall("native_java_concat_strings"),i+=R.arithmeticOperation("+","P","1",this.temporary),i+=R.generateStackAccess(this.temporary,this.temporary),i+=R.moveStackPointer(!1,a)}}return void this.setCode(i)}this.temporary=n.genTemporary();let a=`${null==s.getCode()?"":s.getCode()}${null==r.getCode()?"":r.getCode()}`;a+=R.arithmeticOperation(this.getArithmeticOp(e),s.getTemporary(),r.getTemporary(),this.temporary),this.setCode(a),this.aux_type=null,this.dimensions=0,this.is_array=null}translateConstant(e){switch(this.iNode=e,e.getType()){case v.a.types.CHARACTER_LITERAL:this.type=A,this.temporary=2===e.getValue().length?0:e.getValue().charCodeAt(1),this.setCode("");break;case v.a.types.BOOLEAN_LITERAL:this.setCode(""),this.type=w,this.temporary=e.getValue()?"1":"0";break;case v.a.types.STRING_LITERAL:this.type=T;let t=e.getValue().toString();t=t.replace(/\\\'/g,"'").replace(/\\\"/g,'"').replace(/\\\\/g,"\\").replace(/\\n/g,"\n").replace(/\\t/g,"\t").replace(/\\r/g,"\r"),this.temporary=n.genTemporary();let i=R.moveHeapPointer(1);i+=R.unaryAssign("H",this.temporary),i+=this.translateString(t),this.setCode(i);break;case v.a.types.NULL_LITERAL:this.type=S,this.aux_type=E,this.temporary="0",this.position_code="",this.setCode(R.comment("null type"));break;case v.a.types.DOUBLE_LITERAL:this.temporary=e.getValue().toString(),this.type=_,this.setCode("");break;case v.a.types.INTEGER_LITERAL:this.temporary=e.getValue().toString(),this.type=b,this.setCode("")}}getArithmeticOp(e){switch(e.getType()){case v.a.types.PLUS:return"+";case v.a.types.MINUS:return"-";case v.a.types.MULT:return"*";case v.a.types.MOD:return"%";case v.a.types.DIV:return"/"}}translateString(e){let t="";for(let i=0;i<e.length;i++)t+=R.generateHeapAssign("H",e.charCodeAt(i)),t+=R.moveHeapPointer(1);return t+=R.generateHeapAssign("H","0"),t}translateNativeCall(e){const t=e.getChild(0).getValue(),i=e.getChild(1);switch(t){case"print":case"println":{let e="";if(null==i)return e+="println"===t?R.printStmt("%c","10")+R.printStmt("%c","13"):"",void this.setCode(e);for(const t of i.getChildren()){const i=new Q(this);if(i.translate(t),i.getType()===b)e+=i.getCode(),e+=R.printStmt("%i",i.getTemporary());else if(i.getType()===_)e+=i.getCode(),e+=R.printStmt("%d",i.getTemporary());else if(i.getType()===T){const t=be.SymbolTable.getSize()+1,s=n.genTemporary();e+=i.getCode(),e+=R.moveStackPointer(!0,t),e+=R.arithmeticOperation("+","P","1",s),e+=R.generateStackAssign(s,i.getTemporary()),e+=R.functionCall("native_java_print_string"),e+=R.moveStackPointer(!1,t)}else if(i.getType()===A)e+=i.getCode(),e+=R.printStmt("%c",i.getTemporary());else if(i.getType()===w){const t=be.SymbolTable.getSize()+1,s=n.genTemporary();e+=i.getCode(),e+=R.moveStackPointer(!0,t),e+=R.arithmeticOperation("+","P","1",s),e+=R.generateStackAssign(s,i.getTemporary()),e+=R.functionCall("native_java_print_boolean"),e+=R.moveStackPointer(!1,t)}else if(i.is_array){e+=i.getCode();const t=n.genLabel(),s=n.genLabel();e+=R.conditionalJMP("!=",i.temporary,0,t),e+=R.printStmt("%c",110),e+=R.printStmt("%c",117),e+=R.printStmt("%c",108),e+=R.printStmt("%c",108),R.inconditionalJMP(s),R.generateLabel(t),e+=R.printStmt("%c",65),e+=R.printStmt("%c",114),e+=R.printStmt("%c",114),e+=R.printStmt("%c",97),e+=R.printStmt("%c",121),e+=R.printStmt("%c",64),e+=R.printStmt("%i",i.temporary),R.generateLabel(s)}else if(i.type===S){e+=i.getCode();const t=n.genLabel(),s=n.genLabel();e+=R.comment("printing object"),e+=R.conditionalJMP("!=",i.temporary,0,t),e+=R.printStmt("%c",110),e+=R.printStmt("%c",117),e+=R.printStmt("%c",108),e+=R.printStmt("%c",108),e+=R.inconditionalJMP(s),e+=R.generateLabel(t),e+=R.printStmt("%c",79),e+=R.printStmt("%c",98),e+=R.printStmt("%c",106),e+=R.printStmt("%c",101),e+=R.printStmt("%c",99),e+=R.printStmt("%c",116),e+=R.printStmt("%c",64),e+=R.printStmt("%i",i.temporary),e+=R.generateLabel(s)}}e+="println"===t?R.printStmt("%c","10")+R.printStmt("%c","13"):"",this.setCode(e)}}}getNativeType(e){switch(e){case"write_file":return C;case"equals":return w}return null}translateUnaryNumber(e){const t=new Q(this);if(t.translate(e.getChild(0)),t.getType()!=b&&t.getType()!=_)throw Error(`UNABLE TO USE (-) WITH ${v.a.names[t.getType()]}${this.parseSemanticError(this.iNode)}`);this.temporary=n.genTemporary();let i=""+t.getCode();i+=R.arithmeticOperation("-","0",t.getTemporary(),this.getTemporary()),this.setCode(i),this.type=t.getType()}translateQuestion(e){const t=[n.genLabel(),n.genLabel(),n.genLabel()];this.temporary=n.genTemporary();const i=new Q(this);if(i.translate(e.getChild(0)),i.getType()!==w)throw Error("FIRST PARAMETER IN TERNARY OPERATOR IS NOT OF TYPE BOOLEAN "+this.parseSemanticError(e));const s=new Q(this),r=new Q(this);if(s.translate(e.getChild(1)),r.translate(e.getChild(2)),s.getType()!==r.getType()&&s.getAuxType()!==r.getAuxType())throw Error("TYPES IN TERNARY OPERATOR ARE NOT THE SAME "+this.parseSemanticError(e));this.aux_type=s.aux_type,this.type=s.type,this.code+=R.comment("question code"),this.code+=i.getCode(),this.code+=R.conditionalJMP("==",i.getTemporary(),"1",t[0]),this.code+=R.inconditionalJMP(t[1]),this.code+=R.generateLabel(t[0]),this.code+=s.getCode(),this.code+=R.unaryAssign(s.getTemporary(),this.temporary),this.code+=R.inconditionalJMP(t[2]),this.code+=R.generateLabel(t[1]),this.code+=r.getCode(),this.code+=R.unaryAssign(r.getTemporary(),this.temporary),this.code+=R.generateLabel(t[2])}translateCast(e){const t=new Q(this);t.translate(e.getChild(1));const i=this.parseType(e.getChild(0).getType());if(t.aux_type!==be.Classes.getType("var"))switch(i){case b:if(t.is_array)throw Error("UNABLE TO PARSE TYPE ARRAY TO PRIMITIVE"+this.parseSemanticError(e));if(t.type===b)return void this.copyInfo(t);if(t.type===A)return this.copyInfo(t),void(this.type=b);if(t.type===_)return this.copyInfo(t),this.temporary=n.genTemporary(),this.code+=R.comment("calling trunk"),this.code+=R.moveStackPointer(!0,be.SymbolTable.size+1),this.code+=R.arithmeticOperation("+","P",1,this.temporary),this.code+=R.generateStackAssign(this.temporary,t.temporary),this.code+=R.functionCall("native_java_trunk"),this.code+=R.generateStackAccess("P",this.temporary),this.code+=R.moveStackPointer(!1,be.SymbolTable.size+1),void(this.type=b);throw Error(`UNABLE TO PERFORM CAST WITH VALUES INTEGER AND ${L[t.getType()]}${this.parseSemanticError(this.iNode)}`);case A:if(t.is_array)throw Error("UNABLE TO PARSE TYPE ARRAY TO PRIMITIVE"+this.parseSemanticError(e));if(t.type===A)return void this.copyInfo(t);if(t.type===b)return this.copyInfo(t),void(this.type=A);if(t.type===_)return this.copyInfo(t),this.type=A,this.temporary=n.genTemporary(),this.code+=R.comment("calling trunk"),this.code+=R.moveStackPointer(!0,be.SymbolTable.size+1),this.code+=R.arithmeticOperation("+","P",1,this.temporary),this.code+=R.generateStackAssign(this.temporary,t.temporary),this.code+=R.functionCall("native_java_trunk"),this.code+=R.generateStackAccess("P",this.temporary),void(this.code+=R.moveStackPointer(!1,be.SymbolTable.size+1));throw Error(`UNABLE TO PERFORM CAST WITH VALUES CHAR AND ${L[t.getType()]}${this.parseSemanticError(this.iNode)}`);case _:if(t.is_array)throw Error("UNABLE TO PARSE TYPE ARRAY TO PRIMITIVE"+this.parseSemanticError(e));if(t.type===b||t.type===_||t.type===A)return this.copyInfo(t),void(this.type=_);throw Error(`UNABLE TO PERFORM CAST WITH VALUES DOUBLE AND ${L[t.getType()]}${this.parseSemanticError(this.iNode)}`);case S:{if(e.getChild(0).getType()===v.a.types.ARRAY)throw Error("UNABLE TO CAST ARRAY TYPE DONT KNOW HOW TO CAST"+this.parseSemanticError(e));const i=be.Classes.getType(e.getChild(0).getValue());if(-1===i)throw Error(`UNABLE TO FIND CLASS TYPE ${e.getChild(0).getValue()}${this.parseSemanticError(e)}`);if(i!==t.aux_type)throw Error("UNABLE TO CAST BETWEEN OBJECT TYPES"+this.parseSemanticError(e));this.copyInfo(t)}break;default:throw Error(`INVALID CAST EXCEPTION${e.getChild(0).getValue()}${this.parseSemanticError(e)}`)}else if(this.copyInfo(t),i===S){const i=be.Classes.getType(e.getChild(0).getValue());this.code=R.comment("object cast var")+t.getCode(),this.code+=R.generateInvalidCastError(t.temporary,i,be.ErrorsLabels.get("invalidcast")),this.code+=R.comment("var value access")+R.generateHeapAccess(t.temporary,t.temporary),this.type=S,this.aux_type=i,this.dimensions=0,this.temporary=t.temporary}else this.code=R.comment("primitive cast var")+t.getCode(),this.code+=R.generateInvalidCastError(t.temporary,i,be.ErrorsLabels.get("invalidcast")),this.code+=R.comment("var value access")+R.generateHeapAccess(t.temporary,t.temporary),this.type=i,this.aux_type=null,this.dimensions=0,this.temporary=t.temporary}}class G extends x{constructor(e){super(e)}translate(e){switch(this.iNode=e,e.getType()){case v.a.types.LT:case v.a.types.GT:case v.a.types.LTEQ:case v.a.types.GTEQ:case v.a.types.EQEQ:case v.a.types.NOTEQ:case v.a.types.REQEQ:this.translateRelational(e);break;default:{const t=new Y(this);t.translate(e),this.setTemporary(t.getTemporary()),this.setCode(t.getCode()),this.type=t.getType(),this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.position_code=t.position_code}}}translateRelational(e){const t=e.getChild(0),i=e.getChild(1),s=new Q(this),r=new Q(this);if(s.translate(t),r.translate(i),null==this.false_label&&null==this.true_label){this.temporary=n.genTemporary(),this.type=P.RelationalTypeChecking(e.getType(),s.getType(),r.getType()),this.true_label=n.genLabel(),this.false_label=n.genLabel();let t=s.getCode()+r.getCode();if(s.getType()!==T||r.getType()!==T||e.getType()!==v.a.types.EQEQ&&e.getType()!==v.a.types.NOTEQ)t+=R.comment("relational expression"),s.type===S&&s.aux_type===be.Classes.getType("var")&&(t+=R.generateHeapAccess(s.temporary,s.temporary)),r.type===S&&r.aux_type===be.Classes.getType("var")&&(t+=R.generateHeapAccess(r.temporary,r.temporary)),t+=R.conditionalJMP(this.getRelationalOp(e),s.getTemporary(),r.getTemporary(),this.true_label),t+=R.unaryAssign("0",this.temporary),t+=R.inconditionalJMP(this.false_label),t+=R.generateLabel(this.true_label),t+=R.unaryAssign("1",this.temporary),t+=R.generateLabel(this.false_label);else{const e=be.SymbolTable.getSize(),i=n.genTemporary();this.temporary=n.genTemporary(),t+=R.moveStackPointer(!0,e+1),t+=R.arithmeticOperation("+","P",1,i),t+=R.generateStackAssign(i,s.temporary),t+=R.arithmeticOperation("+","P",2,i),t+=R.generateStackAssign(i,r.temporary),t+=R.functionCall("java_string_equals"),t+=R.generateStackAccess("P",this.temporary),t+=R.moveStackPointer(!1,e+1)}return this.setCode(t),this.type=w,this.aux_type=null,this.dimensions=0,void(this.is_array=!1)}let a=s.getCode()+r.getCode();if(s.getType()!==T||r.getType()!==T||e.getType()!==v.a.types.EQEQ&&e.getType()!==v.a.types.NOTEQ)a+=R.comment("relational expression"),s.type===S&&s.aux_type===be.Classes.getType("var")&&(a+=R.generateHeapAccess(s.temporary,s.temporary)),r.type===S&&r.aux_type===be.Classes.getType("var")&&(a+=R.generateHeapAccess(r.temporary,r.temporary)),a+=R.conditionalJMP(this.getRelationalOp(e),s.getTemporary(),r.getTemporary(),this.true_label),a+=R.inconditionalJMP(this.false_label);else{const e=be.SymbolTable.getSize(),t=n.genTemporary();this.temporary=n.genTemporary(),a+=R.moveStackPointer(!0,e+1),a+=R.arithmeticOperation("+","P",1,t),a+=R.generateStackAssign(t,s.temporary),a+=R.arithmeticOperation("+","P",2,t),a+=R.generateStackAssign(t,r.temporary),a+=R.functionCall("java_string_equals"),a+=R.generateStackAccess("P",this.temporary),a+=R.moveStackPointer(!1,e+1),a+=R.conditionalJMP("==",this.temporary,"1",this.true_label),a+=R.inconditionalJMP(this.false_label)}this.type=w,this.aux_type=null,this.dimensions=0,this.is_array=!1,this.setCode(a)}getRelationalOp(e){switch(e.getType()){case v.a.types.LT:return"<";case v.a.types.GT:return">";case v.a.types.LTEQ:return"<=";case v.a.types.GTEQ:return">=";case v.a.types.REQEQ:case v.a.types.EQEQ:return"==";default:return"!="}}}class J extends x{constructor(e){super(e),this.assignCode=!1,this.fromCondition=!1}translate(e){const t=e.getChild(0),i=e.getChild(1),s=new Q(this),r=new Q(this),a=null==this.false_label&&null==this.true_label;if(a)switch(e.getType()){case v.a.types.OROR:case v.a.types.NOT:case v.a.types.ANDAND:case v.a.types.XOR:this.setBooleanLabels(n.genLabel(),n.genLabel()),this.assignCode=!0}switch(e.getType()){case v.a.types.OROR:s.setTrueLabel(this.true_label),s.setFalseLabel(n.genLabel()),r.setTrueLabel(this.true_label),r.setFalseLabel(this.false_label),s.translate(t),r.translate(i),this.type=w,this.setCode(`${s.getCode()} ${s.false_label}:\n ${r.getCode()}`);break;case v.a.types.ANDAND:s.setTrueLabel(n.genLabel()),s.setFalseLabel(this.false_label),r.setTrueLabel(this.true_label),r.setFalseLabel(this.false_label),s.translate(t),r.translate(i),this.type=w,this.setCode(`${s.getCode()}${s.true_label}:\n${r.getCode()}`);break;case v.a.types.NOT:s.setTrueLabel(this.false_label),s.setFalseLabel(this.true_label),s.translate(t),this.setCode(s.getCode()),this.type=s.getType();break;case v.a.types.XOR:{s.setTrueLabel(n.genLabel()),s.setFalseLabel(n.genLabel()),s.translate(t),r.setTrueLabel(this.false_label),r.setFalseLabel(this.true_label),r.translate(i);let e=R.comment("xor begin")+`${s.getCode()}${s.true_label}:\n${r.getCode()}${s.false_label}:\n`;r.setTrueLabel(this.true_label),r.setFalseLabel(this.false_label),r.translate(i),e+=r.getCode(),this.setCode(e),this.type=w}break;case v.a.types.BOOLEAN_LITERAL:null!=this.true_label?(this.type=w,this.setCode(R.inconditionalJMP(e.getValue()?this.true_label:this.false_label))):(this.temporary=e.getValue()?"1":"0",this.type=w,this.setCode(""));break;default:{const t=new G(this);if(this.copyLabels(t),t.translate(e),this.setTemporary(t.getTemporary()),t.getType()===w){let e=t.getCode();a?null===t.true_label&&null===t.false_label&&0===t.dimensions?(null==this.true_label&&null==this.false_label&&this.setBooleanLabels(n.genLabel(),n.genLabel()),e+=R.comment("no trae el true y false"),e+=R.conditionalJMP("==",t.getTemporary(),"1",this.true_label),e+=R.inconditionalJMP(this.false_label),this.assignCode=!0,this.setCode(e)):this.setCode(R.comment("true false seteadas en relational")+e):t.getCode().includes(this.true_label)||t.getCode().includes(this.false_label)?this.setCode(R.comment("si trae flags y es booleano operación ")+e):(e=R.comment("si trae flags y es un booleano no normal")+e,e+=R.conditionalJMP("==",this.temporary,"1",this.true_label),e+=R.inconditionalJMP(this.false_label),this.setCode(e))}else this.setCode(t.getCode()),this.position_code=t.position_code;this.type=t.getType(),this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.position_code=t.position_code}}}}class Q extends x{constructor(e){super(e)}translate(e){this.iNode=e;const t=new J(this);if(this.copyLabels(t),t.translate(e),t.assignCode){let e=t.getCode();const i=n.genTemporary(),s=n.genLabel();return e+=R.generateLabel(t.true_label),e+=R.unaryAssign("1",i),e+=R.inconditionalJMP(s),e+=R.generateLabel(t.false_label),e+=R.unaryAssign("0",i),e+=R.generateLabel(s),this.temporary=i,this.type=t.type,this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.position_code=t.position_code,void this.setCode(e)}this.setCode(t.getCode()),this.setTemporary(t.temporary),this.type=t.getType(),this.aux_type=t.aux_type,this.dimensions=t.dimensions,this.is_array=t.is_array,this.position_code=t.position_code}}class W{constructor(e=null){this.parent=e,this.children=new Map,this.table=new Map,this.size=0,this.constSize=0,this.temporary=[0,0],this.name="",this.modifiers={},this.symbols=null,this.type=null,this.constructors=[]}insert(e,t){if(this.table.has(e)){if(t.getRol()==p||t.getRol()==m||t.getRol()==k){const e=this.table.get(t.getIdentifier());for(let i=0;i<e.length;i++)if((t.getRol()==p||t.getRol()==m||t.getRol()==k)&&e[i].getParameters().length==t.getParameters().length)throw`THE FUNCTION / PROCEDURE ${t.identifier} IS ALREADY DEFINED`;return e.push(t),t.setContainer(this),!0}{const i=this.getAllSyms(e),s=i.length;for(let e=0;e<s;e++)if(i[e].getRol()!=p&&i[e].getRol()!=m&&i[e].getRol()!=k){if(t.getScope().length<i[e].getScope().length)return i.push(t),null!=t.modifiers&&t.modifiers.static||(this.size+=1),!0;if(this.checkScope(i[e].getScope(),t.getScope())<0)return i.push(t),null!=t.modifiers&&t.modifiers.static||(this.size+=1),!0}}throw`THE VARIABLE ${e} YOU ARE ABOUT TO SAVE IS ALREADY DEFINED`}{const i=[];return i.push(t),this.table.set(e,i),t.getRol()!=p&&t.getRol()!=m&&t.getRol()!=k&&(null!=t.modifiers&&t.modifiers.static||(this.size+=1)),t.setContainer(this),!0}}pop(e){return!!this.table.has(e)&&(this.table.delete(e),!0)}setParent(e){this.parent=e,this.size=e.size}clean(){this.table.clear()}getParent(){return this.parent}getSize(){return this.size}getTable(){return this.table}getTemporary(){return this.temporary[1]-this.temporary[0]}setInitialTemporary(e){this.temporary[0]=e}setTemporary(e,t){this.temporary[0]=e,this.temporary[1]=t}lookupFunction(e,t){if(this.table.has(e)){const i=this.table.get(e);for(const e of i)if(!t.includes(e)&&(e.getRol()==p||e.getRol()==m||e.getRol()==k))return e;return null}return null!=this.parent?this.parent.lookupFunction(e,t):null}lookup(e,t="0"){if(this.table.has(e)){const i=this.table.get(e);for(const e of i)if(!(t.length<e.scope.length))if(t.length==e.scope.length){if(0==this.checkScope(e.getScope(),t))return e}else if(0==t.indexOf(e.getScope()))return e;return null}return null!=this.parent?this.parent.lookup(e,t):null}getInitialTemporary(){return this.temporary[0]}getFinalTemporary(){return this.temporary[1]}setSize(e){this.size=e}copy(){const e=new W(null),t=this.getTable().keys();let i=null;for(const s of t)i=this.lookup(s),e.insert(s,i.copy());return e}setConstSize(e){this.constSize=e}getConstSize(){return this.constSize}jsonify(e){const t={},i=[];null==e?t.main=i:t[e]=i;const s=this.getTable().keys();let r;for(const e of s)r=this.table.get(e),r.forEach(e=>{e.getRol()!=p&&e.getRol()!=m&&e.getRol()!=k?i.push(e.jsonify()):(i.push(e.jsonify()),this.parseFunctionToParent(t,e.getSymbols(),e))});return t}parseFunctionToParent(e,t,i){const s=[],r=i.getIdentifier();null!=e[r]?e[i.functionId]=s:e[r]=s;const n=t.table.keys();let a;for(const i of n)a=t.table.get(i),a.forEach(t=>{t.getRol()!=p&&t.getRol()!=m?s.push(t.jsonify()):this.parseFunctionToParent(e,t.getSymbols(),t.getIdentifier())})}parseObjectTable(e,t){const i=[];e[t]=i;const s=this.getTable().keys();let r;for(const e of s)r=this.table.get(e),r.forEach(e=>{e.getRol()!=p&&e.getRol()!=m&&i.push(e.jsonify())})}setInformation(e,t){this.name=e,this.type=t}checkScope(e,t,i){const s=i&&i.lexicographical,r=i&&i.zeroExtend;let n=e.split("."),a=t.split(".");function o(e){return(s?/^\d+[A-Za-z]*$/:/^\d+$/).test(e)}if(!n.every(o)||!a.every(o))return NaN;if(r){for(;n.length<a.length;)n.push("0");for(;a.length<n.length;)a.push("0")}s||(n=n.map(Number),a=a.map(Number));for(let e=0;e<n.length;++e){if(a.length==e)return 1;if(n[e]!=a[e])return n[e]>a[e]?1:-1}return n.length!=a.length?-1:0}getAllSyms(e){return this.table.get(e)}getAllKeys(){return this.getTable().keys()}addConstructor(e){this.constructors.push(e)}}class q{constructor(...e){this.identifier=e[0],this.rol=e[1],this.type=e[2],this.scope=e[3],this.position=e[4],this.auxType=e[5],this.params=e[6],this.dimensions=e[7],this.modifiers=e[8]||null,this.code=e[9],this.constant=!!this.modifiers&&this.modifiers.final,this.temporary=null,this.code=null,this.symbols=null}getIdentifier(){return this.identifier}setIdentifier(e){this.identifier=e}getPosition(){return this.position}setPosition(e){this.position=e}getType(){return this.type}setType(e){this.type=e}getRol(){return this.rol}setRol(e){this.rol=e}getDimensions(){return this.dimensions}setDimensions(e){this.dimensions=e}getParameters(){return this.params}setAuxType(e){this.auxType=e}setParameters(e){this.params=e}getNode(){return this.node}getAuxType(){return this.auxType}copy(){new q(this.identifier,this.rol,this.type,this.scope,this.position,this.auxType,null!=this.params?[...this.params]:null,this.dimensions);this.symbol.constant=this.constant,this.symbol.container=this.container}setConstant(){this.constant=!0}isConstant(){return this.constant}setContainer(e){this.container=e}getContainer(){return this.container}getScope(){return this.scope}setScope(e){this.scope=e}setTemporary(e){this.temporary=e}setCode(e){this.code=e}getTemporary(){return this.temporary}getCode(){return this.code}jsonify(){let e={};return e.identifier=this.identifier,e.position="-"!=this.position?"+"+this.position:this.position,e.type=L[this.type],e["aux-type"]=null==this.auxType?"-":be.Classes.reverseMap(this.auxType),e.rol=L[this.rol],e.constant=this.constant,e.scope=this.scope,e.dimensions=null==this.dimensions?"-":this.dimensions,e.parameters=null==this.params?"-":this.params.length,e}setSymbols(e){this.symbols=e}getSymbols(){return this.symbols}}const X=(e,t,i,s,r,n,a=0,o={static:!1,protected:!1,public:!1,private:!1})=>{const l=K(e,t,i,"-","-",s,r,a);return l.node=n,be.SymbolTable.insert(e,l),l},K=(e,t,i,s,r,n,a=null,o=0,l)=>new q(e,t,i,s,r,n,a,o,l),Z=(e,t,i,s,r,n=null,a=0,o,l=!1)=>{const c=be.ScopeStack.currentNestingLevel(),h=K(e,t,i,c,s,r,n,a,o);if((h.rol===f||l)&&(h.rol=f,be.Heap_Pointer+=1),l){let t=be.SymbolTable;for(;null!=t.parent;)t=t.parent;return h.scope="0",t.insert(e,h),h}return h.is_array=0!==a,be.SymbolTable.insert(e,h),h};class ee extends O{constructor(e){super(e)}translate(e,t,i=!1){this.iNode=t;let s=e&&!i?be.Heap_Pointer+0:(i?0:1)+be.SymbolTable.getSize();const r=t.getChild(0);let n=this.getCompilerType(r),a=null,o="",l=n===S?be.Classes.getType(r.getValue()):null;if(-1===l)throw Error(`UNABLE TO FIND THE SPECIFIED CLASS OBJECT ${r.getValue()} ${this.parseSemanticError(t)}`);let c=!1;for(let p=1;p<t.childrenSize();p++){if(a=t.getChild(p),c=!1,a.getType()===v.a.types.EQ&&n===g){c=!0,n=this.getCompilerType(r.getChild(0));const t=new Q(this);if(t.translate(a.getChild(1)),(t.getAuxType()!==l||t.getType()!==n||!t.is_array||t.dimensions!==r.getChild(1).childrenSize())&&-1===(n=P.ImplicitTypeChecking(n,t.getType())))throw Error(`UNABLE TO PERFORM ASSIGN FOR ${a.getChild(0).getValue()} UNCOMPATIBLE TYPES ${this.parseSemanticError(a)}`);for(let r=0;r<a.getChild(0).childrenSize();r++)try{const c=a.getChild(0).getChild(r).getValue(),p=Z(c,i?h:e?f:y,n,s++,l,null,t.dimensions);console.log("%c array eq declaration!"+c+"\n","background: #222; color: #bada55"),p.setCode(t.getCode()),p.setTemporary(t.getTemporary()),e&&(p.node=a.getChild(1)),o+=R.generateDefaultAssign(e,p.position,t.getTemporary(),t.getCode())}catch(e){throw Error(`${e} ${this.parseSemanticError(this.iNode)}`)}}else if(n===g){c=!0;try{if(n=this.getCompilerType(r.getChild(0)),l=n===S?be.Classes.getType(r.getChild(0).getValue()):null,-1===l)throw Error(`UNABLE TO FIND THE SPECIFIED CLASS OBJECT ${r.getValue()} ${this.parseSemanticError(t)}`);console.log("%c array declaration only!\n","background: #222; color: #021B55");for(const t of a.getChildren()){const a=Z(t.getValue(),i?h:e?f:y,n,s++,l,null,r.getChild(1).childrenSize());a.setCode(R.generateDefaultAssign(e,a.position)),a.setTemporary(null),o+=a.getCode()}}catch(e){if(e.includes("LINE"))throw e;throw`${e} ${this.parseSemanticError(this.iNode)}`}}if(!c)switch(n){case S:try{if(a.getType()==v.a.types.EQ){const r=new Q(this);r.translate(a.getChild(1));for(const c of a.getChild(0).getChildren()){const p=c.getValue();if((n!=r.type||l!=r.aux_type||0!=r.dimensions)&&!this.typeChecking(n,l,0,r.type,r.aux_type,r.dimensions))throw"UNABLE TO PERFORM ASSIGN, TYPES DIFFER"+this.parseSemanticError(t);const u=Z(p,i?h:e?f:y,n,s++,l,null,0,null);u.setCode(r.getCode()),u.setTemporary(r.getTemporary()),e&&(u.node=a.getChild(1)),o+=R.generateDefaultAssign(i,u.position,r.getTemporary(),r.getCode())}}else for(const t of a.getChildren()){const r=Z(t.getValue(),i?h:e?f:y,n,s++,l,null,0,null);r.setCode(R.generateDefaultAssign(i,r.position)),r.setTemporary(null),o+=r.getCode()}}catch(e){if(e.includes("LINE"))throw e;throw`${e}${this.parseSemanticError(this.iNode)}`}break;default:try{if(a.getType()==v.a.types.EQ){const r=new Q(this);r.translate(a.getChild(1));for(const l of a.getChild(0).getChildren()){const c=l.getValue();if((n!=r.type||null!=r.aux_type||0!=r.dimensions)&&!this.typeChecking(n,null,0,r.type,r.aux_type,r.dimensions))throw"UNABLE TO PERFORM ASSIGN, TYPES DIFFER"+this.parseSemanticError(t);const p=Z(c,i?h:e?f:y,n,s++,null,null,0,null);p.setCode(r.getCode()),p.setTemporary(r.getTemporary()),e&&(p.node=a.getChild(1)),o+=p.getCode(),o+=R.generateDefaultAssign(i,p.position,r.getTemporary(),"")}}else for(const t of a.getChildren()){const r=Z(t.getValue(),i?h:e?f:y,n,s++,null,null,0,null);r.setCode(R.generateDefaultAssign(i,r.position)),r.setTemporary(null),o+=r.getCode()}}catch(e){if(console.log(e),e.includes("LINE"))throw e;throw`${e} ${this.parseSemanticError(this.iNode)}`}}}this.setCode(o)}getCompilerType(e){switch(e.getType()){case v.a.types.INTEGER:return b;case v.a.types.DOUBLE:return _;case v.a.types.STRING:return T;case v.a.types.CHAR:return A;case v.a.types.BOOLEAN:return w;case v.a.types.ARRAY:return g;default:return S}}}class te extends O{constructor(e){super(e),this.firstPass=!1}translate(e,t){this.iNode=t;const i=t.getChild(0).getType()===v.a.types.GLOBAL;if(this.firstPass&&!i)return;if(!this.firstPass&&i)return;let s=e?be.Heap_Pointer+0:1+be.SymbolTable.getSize();const r=t.getChild(0),a=new Q(this);a.translate(t.getChild(1).getChild(1));const o=t.getChild(1).getChild(0).getValue(),l=r.getType()===v.a.types.FINAL;let c=null;if(l||be.VarFlag)if(c=Z(o,e?f:y,a.type,s++,a.aux_type,null,a.dimensions),be.VarFlag&&l&&c.setConstant(),e)c.setCode(a.getCode()),c.setTemporary(a.getTemporary());else{let t="";t+=R.generateDefaultAssign(e,c.position,a.getTemporary(),a.getCode()),c.setCode(t),c.setTemporary(a.getTemporary())}else{let t=a.getCode();const r=n.genTemporary();e?(t+=R.comment("codigo para globales"),t+=R.arithmeticOperation("+","P","1",r),t+=R.generateStackAssign(r,a.temporary),t+=R.arithmeticOperation("+","P","2",r),t+=R.generateStackAssign(r,a.type),t+=R.functionCall("default_object_constructor"),t+=R.generateStackAccess("P",a.temporary),c=Z(o,e?f:y,S,s++,be.Classes.getType("var"),null,a.dimensions,null,i),c.setCode(t),c.setTemporary(a.getTemporary())):(t+=R.moveStackPointer(!0,be.SymbolTable.size+1),t+=R.arithmeticOperation("+","P","1",r),t+=R.generateStackAssign(r,a.temporary),t+=R.arithmeticOperation("+","P","2",r),t+=R.generateStackAssign(r,a.type),t+=R.functionCall("default_object_constructor"),t+=R.generateStackAccess("P",a.temporary),t+=R.moveStackPointer(!1,be.SymbolTable.size+1),c=Z(o,e?f:y,S,s++,be.Classes.getType("var"),null,a.dimensions,null,i),i||(t+=R.comment("entró por no ser estático"),t+=R.generateDefaultAssign(e,c.position,a.getTemporary(),"")),c.setCode(t),c.setTemporary(a.getTemporary()))}e&&(c.node=t.getChild(1).getChild(1)),this.setCode(c.getCode())}}class ie extends I{constructor(e){super(e)}firstPass(e){const t=new pe(this);t.firstPass(e.getChild(1)),3===e.childrenSize()&&t.firstPass(e.getChild(2))}translate(e){this.iNode=e;const t=new Q(this);t.setBooleanLabels(n.genLabel(),n.genLabel()),t.translate(e.getChild(0));const i=new pe(this);i.siguiente=this.siguiente,i.translate(e.getChild(1));let s=t.getCode()+"\n";if(s+=R.generateLabel(t.getTrueLabel()),s+=i.getCode(),s+=R.inconditionalJMP(this.siguiente),s+=R.generateLabel(t.getFalseLabel()),s+=R.comment("etiqueta false"),3===e.childrenSize()){const t=new pe(this);t.setSiguiente(this.siguiente),s+=R.comment("else body"),t.translate(e.getChild(2)),s+=t.getCode()}this.setCode(R.comment("inicio de if")+s)}}class se extends I{constructor(e){super(e)}firstPass(e){new pe(this).firstPass(e.getChild(1))}translate(e){this.iNode=e;const t=n.genLabel(),i=new Q(this);i.setBooleanLabels(n.genLabel(),this.siguiente),i.translate(e.getChild(0)),be.Display.Cicles.push([t,this.siguiente]);const s=new pe(this);s.siguiente=t,s.translate(e.getChild(1));let r=R.comment("inicio de while")+R.generateLabel(t);r+=i.getCode(),r+=R.generateLabel(i.getTrueLabel()),r+=s.getCode(),r+=R.inconditionalJMP(t),be.Display.Cicles.pop(),this.setCode(r)}}class re extends I{constructor(e){super(e)}firstPass(e){new pe(this).firstPass(e.getChild(0))}translate(e){this.iNode=e;const t=n.genLabel(),i=n.genLabel(),s=new Q(this);s.setBooleanLabels(t,this.siguiente),s.translate(e.getChild(1)),be.Display.Cicles.push([t,this.siguiente]);const r=new pe(this);r.siguiente=i,r.translate(e.getChild(0));let a=R.generateLabel(t);a+=r.getCode(),a+=R.generateLabel(i),a+=s.getCode(),be.Display.Cicles.pop(),this.setCode(a)}}class ne extends O{constructor(e){super(e)}translate(e){switch(this.iNode=e,e.getChild(0).getType()){case v.a.types.EQ:const t=new z(this);t.translate(e.getChild(0)),this.setCode(t.getCode());break;case v.a.types.POSTDEC:case v.a.types.POSTINC:case v.a.types.PREDEC:case v.a.types.PREINC:case v.a.types.FUNCTION_CALL:case v.a.types.NATIVE_FUNCTION_CALL:case v.a.types.NEW:case v.a.types.NEW_ARRAY:const i=new Q(this);i.translate(e.getChild(0)),this.setCode(i.getCode());break;default:throw`YOU CAN'T CALL THIS STATEMENT ${v.a.names[e.getChild(0).getType()]} AT THIS LEVEL ${this.parseSemanticError(this.iNode)}`}}}class ae extends I{constructor(e){super(e)}firstPass(e){const t=new pe(this),i=e.getChild(e.childrenSize()-1);t.firstPass(i)}translate(e){this.iNode=e;let t=!1;const i=e.lookupByType(v.a.types.FOR_INIT),s=e.lookupByType(v.a.types.FOR_COND),r=e.lookupByType(v.a.types.FOR_UPDATE),a=e.getChild(e.childrenSize()-1);let o=R.comment("init of for");if(i&&i.getChild(0).getType()===v.a.types.VAR_DECLARATION){t=!0,be.ScopeStack.enterScope();const e=new ee(this);e.translate(!1,i.getChild(0)),o+=e.getCode()}else if(i){const e=new Q(this);for(const t of i.getChild(0).getChildren())e.translate(t),o+=e.getCode()}const l=n.genLabel(),c=n.genLabel(),h=n.genLabel(),p=new Q(this);s&&(p.setBooleanLabels(c,this.siguiente),p.translate(s.getChild(0))),be.Display.Cicles.push([h,this.siguiente]);const u=new pe(this);if(u.setSiguiente(h),u.translate(a),o+=R.generateLabel(l),o+=s?p.getCode():"",o+=R.generateLabel(c),o+=u.getCode(),o+=R.generateLabel(h),r){const e=new Q(this),t=new z(this);for(const i of r.getChild(0).getChildren())i.getType()===v.a.types.EQ?(t.translate(i),o+=R.comment("for update expression translator eq"),o+=t.getCode()):(e.translate(i),o+=R.comment("for update expression translator"),o+=e.getCode())}o+=R.inconditionalJMP(l),be.Display.Cicles.pop(),t&&be.ScopeStack.exitScope(),this.setCode(o)}}class oe extends I{constructor(e){super(e)}translate(e){let t="";switch(this.iNode=e,e.getType()){case v.a.types.BREAK:if(0===be.Display.Cicles.length)throw Error("UNABLE TO USE BREAK OUTSIDE OF A CICLE "+this.parseSemanticError(this.iNode));t+=R.inconditionalJMP(be.Display.Cicles[be.Display.Cicles.length-1][1]);break;case v.a.types.CONTINUE:if(0===be.Display.Cicles.length)throw Error("UNABLE TO USE CONTINUE OUTSIDE OF A CICLE "+this.parseSemanticError(this.iNode));if(null==be.Display.Cicles[be.Display.Cicles.length-1][0])throw Error("THIS STATEMENT IS NOT ALLOWED AT THIS LEVEL"+this.parseSemanticError(this.iNode));t+=R.inconditionalJMP(be.Display.Cicles[be.Display.Cicles.length-1][0]);break;case v.a.types.RETURN:{const i=be.Display.FunctionCallStack[be.Display.FunctionCallStack.length-1];if(""===be.Display.OutLabel)throw Error("NO OUT LABEL SET FOR THIS FUNCTION/PROCEDURE, COMPILER ERROR "+this.parseSemanticError(this.iNode));if(0===e.childrenSize()){if(i[2]!==C)throw Error("A RETURN VALUE WAS EXPECTED FOR THIS FUNCTION"+this.parseSemanticError(this.iNode));t+=R.comment("return void"),t+=R.inconditionalJMP(be.Display.OutLabel)}else{const s=new Q(this),r=n.genTemporary();if(s.translate(e.getChild(0)),i[2]===s.getType()&&i[2]===S){if(i[3]!==s.aux_type&&s.getAuxType()!==E)throw Error("RETURN TYPE AND FUNCTION TYPE ARE NOT THE SAME"+this.parseSemanticError(this.iNode))}else if(s.type!==i[2]||s.aux_type!==i[3]||s.dimensions!==i[4]){if(0!==s.dimensions)throw Error("RETURN TYPE AND FUNCTION TYPE ARE NOT THE SAME"+this.parseSemanticError(this.iNode));if(-1===P.ImplicitTypeChecking(i[2],s.getType()))throw Error("RETURN TYPE AND FUNCTION TYPE ARE NOT THE SAME"+this.parseSemanticError(this.iNode))}t+=s.getCode(),t+=R.comment("return statement"),t+=R.arithmeticOperation("+","P","1",r),t+=R.generateStackAssign(r,s.getTemporary()),t+=R.inconditionalJMP(be.Display.OutLabel),t+=R.comment("fin return stmt")}}}this.setCode(t)}}class le extends I{constructor(e){super(e)}firstPass(e){const t=e.getChild(1),i=new ue(this);for(const e of t.getChildren())i.firstPass(e.getChild(e.childrenSize()-1))}translate(e){this.iNode=e;const t=new Q(this);t.translate(e.getChild(0));const i=t.getType()===T;let s="";i&&(s=n.genTemporary());const r=n.genLabel();let a,o="",l="",c="";l+=t.getCode(),l+=R.inconditionalJMP(r),c+=R.generateLabel(r);const h=e.getChild(1),p=new Q(this),u=new ue(this);u.setSiguiente(this.siguiente);let d=null,m=null,g="";be.Display.Cicles.push([null,this.siguiente]);for(const e of h.getChildren()){a=n.genLabel();let r=0;for(let n=0;n<e.childrenSize()-1;n++)e.getChild(n).getType()===v.a.types.DEFAULT?(d=e,m=e.getChild(e.childrenSize()-1),g=a):(p.translate(e.getChild(n)),P.RelationalTypeChecking(v.a.types.EQEQ,t.getType(),p.getType()),c+=p.getCode(),i?(c+=this.translateStringComparisson(s,t.getTemporary(),p.getTemporary()),c+=R.conditionalJMP("==",s,"1",a)):c+=R.conditionalJMP("==",t.getTemporary(),p.getTemporary(),a)),r++;u.translate(e.getChild(e.childrenSize()-1)),o+=R.comment("default label thing"+a),o+=R.generateLabel(a),o+=u.getCode()}null!=d&&null!=m&&(c+=R.comment("default label"),c+=R.inconditionalJMP(g)),be.Display.Cicles.pop(),this.setCode(`${l}${o}${c}`)}translateStringComparisson(e,t,i){const s=be.SymbolTable.getSize();let r="";return r+=R.moveStackPointer(!0,s+1),r+=R.arithmeticOperation("+","P",1,e),r+=R.generateStackAssign(e,t),r+=R.arithmeticOperation("+","P",2,e),r+=R.generateStackAssign(e,i),r+=R.functionCall("java_string_equals"),r+=R.generateStackAccess("P",e),r+=R.moveStackPointer(!1,s+1),r}}class ce extends I{constructor(e){super(e)}translate(e){this.iNode=e;let t=R.comment("throw statement");if(be.Display.TryCatchLabels.length,e.getChild(0).getType()!==v.a.types.NEW)throw Error("UNABLE TO CALL THROW WITHOUT CREATING A NEW ERROR"+this.parseSemanticError(this.iNode));{const i=e.getChild(0).getChild(0).getValue().toLowerCase();let s=-1;(s=be.Display.ErrorTypeByName.get(i))&&(t+=R.setError(s),t+=R.inconditionalJMP(""))}this.setCode(t)}}class he extends I{constructor(e){super(e)}translate(e){this.iNode=e;let t=R.comment("try catch stmt");const i=be.Display.createTryCatchEnv(),s=[];try{for(const t of e.getChild(1).getChildren()){const e=t.getChild(0).getChild(0).getValue();s.push(i.createLabel(e))}}catch(t){throw Error(`${t.message}${this.parseSemanticError(e.getChild(1))}`)}const r=new pe(this);r.setSiguiente(this.siguiente),r.translate(e.getChild(0)),t+=r.getCode()+R.inconditionalJMP(this.siguiente);for(let i=0;i<e.getChild(1).childrenSize();i++)t+=R.generateLabel(s[i]),t+=R.unaryAssign("0","E"),r.translate(e.getChild(1).getChild(i).getChild(1)),t+=r.getCode();be.Display.exitTryCatchEnv(),this.setCode(t)}}class pe extends I{constructor(e){super(e)}firstPass(e){switch(e.getType()){case v.a.types.IF:new ie(this).firstPass(e);break;case v.a.types.FOR:new ae(this).firstPass(e);break;case v.a.types.SWITCH:new le(this).firstPass(e);break;case v.a.types.WHILE:new se(this).firstPass(e);break;case v.a.types.DO:new re(this).firstPass(e);break;case v.a.types.BLOCK:new de(this).firstPass(e);break;case v.a.types.RETURN:case v.a.types.BREAK:case v.a.types.CONTINUE:case v.a.types.THROW:case v.a.types.VAR_DECLARATION:break;case v.a.types.TRY:new he(this).firstPass(e);break;case v.a.types.VAR_DECLARATION_NO_TYPE:{const t=new te(this);t.firstPass=!0,t.translate(!0,e),this.setCode(t.getCode())}}}translate(e){switch(this.iNode=e,e.getType()){case v.a.types.EXPRESSION_STMT:{const e=new ne(this);e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.IF:{const e=new ie(this);e.setSiguiente(this.siguiente),e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.FOR:{const e=new ae(this);e.setSiguiente(this.siguiente),e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.SWITCH:{const e=new le(this);e.setSiguiente(this.siguiente),e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.WHILE:{const e=new se(this);e.setSiguiente(this.siguiente),e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.DO:{const e=new re(this);e.setSiguiente(this.siguiente),e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.BLOCK:{const e=new de(this);e.setSiguiente(this.siguiente),e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.RETURN:case v.a.types.BREAK:case v.a.types.CONTINUE:{const e=new oe(this);e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.THROW:{window.dispatchEvent("snackbar-messages",{detail:"throw and try were not implemented correctly"});const e=new ce(this);e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.TRY:{window.dispatchEvent("snackbar-messages",{detail:"throw and try were not implemented correctly"});const e=new he(this);e.translate(this.iNode),this.setCode(e.getCode())}break;case v.a.types.VAR_DECLARATION:{const t=new ee(this);t.translate(!1,e),this.setCode(t.getCode())}break;case v.a.types.VAR_DECLARATION_NO_TYPE:{const t=new te(this);t.translate(!1,e),this.setCode(t.getCode())}break;case v.a.types.NO_OP:}}}class ue extends I{constructor(e){super(e)}firstPass(e){const t=new pe(this);for(const i of e.getChildren())t.firstPass(i)}translate(e){this.iNode=e;let t=n.genLabel();const i=new pe(this);let s="",r=0;for(const e of this.iNode.getChildren())e.getType()!==v.a.types.NO_OP&&(r===this.iNode.getChildren().length-1?i.setSiguiente(this.siguiente):i.setSiguiente(t),i.translate(e),s+=i.getCode(),e.getType()!==v.a.types.EXPRESSION_STMT&&e.getType()!==v.a.types.VAR_DECLARATION&&e.getType()!==v.a.types.BREAK&&e.getType()!==v.a.types.CONTINUE&&e.getType()!==v.a.types.RETURN&&(s+=R.generateLabel(t),t=n.genLabel()),r++);this.setCode(s)}}class de extends I{constructor(e){super(e)}firstPass(e){new ue(this).firstPass(e)}translate(e,t=!0){this.iNode=e;const i=new ue(this);t&&be.ScopeStack.enterScope(),i.setSiguiente(this.siguiente),i.translate(e),t&&be.ScopeStack.exitScope(),this.setCode(i.getCode())}}class me extends O{firstPass(e){const t=e.lookupByType(v.a.types.BLOCK);new de(this).firstPass(t)}translate(e,t){this.iNode=e;const i=be.SymbolTable;be.SymbolTable=new W(i),t.setSymbols(be.SymbolTable);const s=t.getParameters();if(null!=s){let e=be.SymbolTable.getSize()+1;for(const t of s)Z(t[0],t[2]?u:d,t[1],e,t[3],null,t[4],null),e+=1}const r=e.lookupByType(v.a.types.BLOCK),a=new de(this);a.setSiguiente(n.genLabel()),be.Display.OutLabel=a.siguiente,a.translate(r,!1),be.Display.OutLabel="",be.SymbolTable=i,this.setCode(a.getCode()+R.generateLabel(a.siguiente))}}class ge extends O{constructor(e){super(e),this.SymTab=new W(null),this.ClassSave=null}staticPass(e){this.iNode=e;const t=e.getChild(0).getValue();be.Classes.addType(t),be.ClassTemplates.set(be.Classes.getType(t),this.SymTab),this.SymTab.setInformation(t,be.Classes.getType(t)),this.ClassSave=be.SymbolTable,be.SymbolTable=this.SymTab;for(const t of e.getChild(1).getChildren()){new ee(this).translate(!0,t,!0)}be.SymbolTable=this.ClassSave}translate(){this.ClassSave=be.SymbolTable,be.SymbolTable=this.SymTab;const e=n.genFunctionId(this.SymTab.name,this.SymTab.name);((e,t,i)=>{const s=X(e,k,S,be.Classes.getType(e),[],null,0);s.functionId=i,s.setSymbols(new W(t))})(this.SymTab.name,this.SymTab,e),be.FunctionsCode.push(R.generateCustomFunction(e,this.createDefaultConstructor())),be.SymbolTable=this.ClassSave}createDefaultConstructor(e=null){const t=n.genTemporary(),i=n.genTemporary();let s=R.moveHeapPointer(1);null==e&&(s+=R.generateStackAssign("P","H")),s+=R.unaryAssign("H",t),this.SymTab.getSize()-1>0&&(s+=R.moveHeapPointer(this.SymTab.getSize()-1)),s+=R.comment("we save the space needed for all attributes");const r=this.SymTab.getAllKeys(),a=new Q(this);for(const e of r){const r=this.SymTab.getAllSyms(e);for(const e of r)e.getRol()===h&&(s+=R.arithmeticOperation("+",t,e.getPosition(),i),null==e.node?s+=R.generateDefaultAssign(!0,i,"0"):(a.translate(e.node),s+=R.generateDefaultAssign(!0,i,a.getTemporary(),a.getCode())))}return s}}class fe extends O{constructor(e){super(e),this.Functions=[],this.StaticVariables=""}translate(e,t=!0,i={}){this.iNode=e;for(const t of e.getChildren())switch(t.getType()){case v.a.types.IMPORTS:window.alert("import not working");break;case v.a.types.STRUCT_DECLARATION:{const e=new ge(this);e.staticPass(t),e.translate(t)}break;case v.a.types.VAR_DECLARATION_NO_TYPE:new te(this).translate(!0,t);break;case v.a.types.VAR_DECLARATION:new ee(this).translate(!0,t)}for(const t of e.getChildren())switch(t.getType()){case v.a.types.IMPORTS:window.alert("import not working");break;case v.a.types.MAIN_DECLARATION:case v.a.types.FUNCTION_DECLARATION:{const e=t.getChild(1).getValue().toLowerCase(),i=t.lookupByType(v.a.types.VOID),s=t.getChild(t.childrenSize()-1),r=t.lookupByType(v.a.types.FORMAL_PARAMETER_LIST),a=[];if(null!=r){let e=null,t=null,i=null;for(const s of r.getChildren())if(t=null,i=0,s.getChild(0).getType()!==v.a.types.ARRAY){if(s.getChild(0).getType()!==v.a.types.IDENTIFIER)e=this.parseType(s.getChild(0).getType());else{if(!be.Classes.containsKey(s.getChild(0).getValue()))throw Error(`TYPE ${s.getChild(0).getValue()} NOT DECLARED ${this.parseSemanticError(this.iNode)}`);e=S,t=be.Classes.getType(s.getChild(0).getValue())}a.push([s.getChild(1).getValue(),e,null!=t||i>0,t,i])}else{if(i=s.getChild(0).getChild(1).childrenSize(),e=this.parseType(s.getChild(0).getChild(0).getType()),t=e===S?be.Classes.getType(s.getChild(0).getChild(0).getValue()):null,-1===t)throw Error(`TYPE ${s.getChild(0).getValue()} NOT DECLARED ${this.parseSemanticError(this.iNode)}`);a.push([s.getChild(1).getValue(),e,!0,t,i])}}if(null===i){const i=t.lookupByType(v.a.types.ARRAY),r=t.getChild(0);let o=null,l=null,c=0;if(i){if(o=this.parseType(i.getChild(0).getType()),l=o===S?be.Classes.getType(i.getChild(0).getValue()):null,-1===l)throw Error(`UNABLE TO FIND THE REQUESTED TYPE ${i.getChild(0).getValue()}${this.parseSemanticError(i)}`);c=i.getChild(1).childrenSize()}else r.getType()!==v.a.types.IDENTIFIER?o=this.parseType(r.getType()):(l=be.Classes.getType(r.getValue()),o=S);this.Functions.push(X(e,p,o,l,a,s,c)),this.Functions[this.Functions.length-1].functionId=n.genFunctionId("",e)}else this.Functions.push(X(e,m,C,null,a,s)),this.Functions[this.Functions.length-1].functionId=n.genFunctionId("",e),"main"===e&&(this.main_identifier=this.Functions[this.Functions.length-1].functionId)}}this.firstPass(),be.StaticSymbols.push(this.parseStaticVariables()),be.ScopeStack.enterEnv();for(const e of this.Functions){const t=new me(this);be.ScopeStack.enterScope(),be.Display.FunctionCallStack.push([e.identifier,n.getTemporary(),e.type,e.auxType,e.dimensions]),t.translate(e.node,e),be.FunctionsCode.push(R.generateCustomFunction(e.functionId,t.getCode())),be.Display.FunctionCallStack.pop(),be.ScopeStack.exitScope()}if(be.ScopeStack.exitEnv(),void 0===this.main_identifier||null===this.main_identifier)throw be.Errores.push("NO MAIN METHOD WAS FOUND IN CURRENT ENVIRONMENT"+this.parseSemanticError(e)),Error("NO MAIN METHOD WAS FOUND IN CURRENT ENVIRONMENT"+this.parseSemanticError(e));return this.main_identifier}lookUpAllMainClasses(e){for(const t of e.getChildren())if(t.getType()===v.a.types.MAIN_DECLARATION){if(be.MainClass.includes(t))throw Error("THERE ARE MULTIPLE MAIN METHODS FOR THIS CLASS DEFINITION "+this.parseSemanticError(t));be.MainClass.push(t)}}lookupAllImports(e){const t=[];for(const i of e.getChildren())i.getType()===v.a.types.IMPORT&&t.push(i);return t}createSuperTree(e,t){const i=e.lookupByType(v.a.types.IMPORTS);try{if(null!=i){for(const s of i.getChildren()){const i=s.getType()===v.a.types.STRING_LITERAL||s.getType()===v.a.types.IDENTIFIER?s.getValue():void 0;let r=Object.keys(t).find(e=>t[e].relative===i);if(void 0===r&&void 0===(r=Object.keys(t).find(e=>t[e].name===i)))throw Error(`UNABLE TO FIND THE SPECIFIED FILE ${s.getValue()}${this.parseSemanticError(s)}`);if(!t[r].parsed){be.CurrentFile.push(s.getValue()),N.b.parse(t[r].src),t[r].parsed=!0;const i=N.a;new fe(this).createSuperTree(i,t),e.insertAt(0,i.getChildren(),!0),be.CurrentFile.pop()}}e.deleteAt(e.getPosition(i))}}catch(e){if(window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"Parse failed"})),void 0!==e.hash){let t=`[${"INVALID"===e.hash.token?"LEXICO":"SINTACTICO"} AT LINE ${e.hash.loc.first_line}`;throw t+=` COLUMN ${e.hash.loc.first_column} FOUND ${e.hash.text} EXPECTED: ${e.hash.expected.join(",")}] IN FILE ${be.CurrentFile}`,Error(t)}throw e}}parseStaticVariables(){const e=n.genTemporary();let t=R.comment("static var for ");const i=be.SymbolTable.getAllKeys(),s=new Q(this);for(const r of i){const i=be.SymbolTable.getAllSyms(r);for(const r of i)if(r.getRol()===f){if(t+=R.unaryAssign(r.getPosition(),e),r.auxType===be.Classes.getType("var")){t+=R.generateDefaultAssign(!0,e,r.getTemporary(),r.getCode());continue}null==r.node?t+=R.generateDefaultAssign(!0,e,"0"):(s.translate(r.node),t+=R.generateDefaultAssign(!0,e,s.getTemporary(),s.getCode()))}}return t}firstPass(){for(const e of this.Functions){new me(this).firstPass(e.node,e)}}}const ye=new class{cloneObject(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel()];return"void native_object_clone (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[0])+R.arithmeticOperation("+","P","2",e[1])+R.generateStackAccess(e[1],e[1])+R.moveHeapPointer(1)+R.unaryAssign("H",e[2])+R.unaryAssign("0",e[3])+R.generateLabel(t[1])+R.conditionalJMP("==",e[3],e[1],t[0])+R.arithmeticOperation("+",e[0],e[3],e[4])+R.generateHeapAccess(e[4],e[4])+R.generateHeapAssign("H",e[4])+R.arithmeticOperation("+",e[3],"1",e[3])+R.conditionalJMP("==",e[3],e[1],t[1])+R.moveHeapPointer(1)+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}boolean_to_string(){const e=[n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel()];return"void native_java_boolean_to_string (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[0])+R.moveHeapPointer(1)+R.unaryAssign("H",e[1])+R.conditionalJMP("==",e[0],"1",t[0])+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.generateHeapAssign("H","116")+R.moveHeapPointer(1)+R.generateHeapAssign("H","114")+R.moveHeapPointer(1)+R.generateHeapAssign("H","117")+R.moveHeapPointer(1)+R.generateHeapAssign("H","101")+R.inconditionalJMP(t[2])+R.generateLabel(t[1])+R.generateHeapAssign("H","102")+R.moveHeapPointer(1)+R.generateHeapAssign("H","97")+R.moveHeapPointer(1)+R.generateHeapAssign("H","108")+R.moveHeapPointer(1)+R.generateHeapAssign("H","115")+R.moveHeapPointer(1)+R.generateHeapAssign("H","101")+R.inconditionalJMP(t[2])+R.generateLabel(t[2])+R.moveHeapPointer(1)+R.generateHeapAssign("H","0")+R.generateStackAssign("P",e[1])+be.createOutLabels()+"return;\n \n}\n"}concat_string(){const e=[],t=[];for(let t=0;t<6;t++)e.push(n.genTemporary());for(let e=0;e<4;e++)t.push(n.genLabel());return"void native_java_concat_strings (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.arithmeticOperation("+",e[0],"1",e[0])+R.generateStackAccess(e[0],e[2])+R.generateHeapAccess(e[1],e[3])+R.generateHeapAccess(e[2],e[4])+R.moveHeapPointer(1)+R.unaryAssign("H",e[5])+t[0]+":\n"+R.conditionalJMP("==",e[3],"0",t[1])+R.generateHeapAssign("H",e[3])+R.arithmeticOperation("+",e[1],"1",e[1])+R.generateHeapAccess(e[1],e[3])+R.moveHeapPointer(1)+R.inconditionalJMP(t[0])+R.generateLabel(t[1])+R.conditionalJMP("==",e[4],"0",t[2])+R.generateHeapAssign("H",e[4])+R.arithmeticOperation("+",e[2],"1",e[2])+R.generateHeapAccess(e[2],e[4])+R.moveHeapPointer(1)+R.inconditionalJMP(t[1])+R.generateLabel(t[2])+R.generateHeapAssign("H","0")+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAssign(e[0],e[5])+be.createOutLabels()+"return;\n \n}\n"}truncate_string(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()];return"void native_java_trunk (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.arithmeticOperation("%",e[1],"1",e[2])+R.arithmeticOperation("-",e[1],e[2],e[3])+R.generateStackAssign("P",e[3])+be.createOutLabels()+"return;\n \n}\n"}round_string(){const e=[],t=[n.genLabel(),n.genLabel(),n.genLabel()];for(let t=0;t<6;t++)e.push(n.genTemporary());return"void native_java_round (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.arithmeticOperation("%",e[1],"1",e[2])+R.conditionalJMP("<",e[2],"0.5",t[0])+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.arithmeticOperation("-",e[1],e[2],e[3])+R.generateStackAssign("P",e[3])+R.inconditionalJMP(t[2])+R.generateLabel(t[1])+R.arithmeticOperation("-","1",e[2],e[4])+R.arithmeticOperation("+",e[4],e[1],e[5])+R.generateStackAssign("P",e[5])+R.generateLabel(t[2])+be.createOutLabels()+"return;\n \n}\n"}length_string(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel()];return"void java_string_length (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.unaryAssign("0",e[2])+R.generateLabel(t[0])+R.generateHeapAccess(e[1],e[0])+R.conditionalJMP("==",e[0],"0",t[1])+R.arithmeticOperation("+",e[1],"1",e[1])+R.arithmeticOperation("+",e[2],"1",e[2])+R.inconditionalJMP(t[0])+R.generateLabel(t[1])+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}int_to_String(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel(),n.genLabel()];return"void native_java_int_to_string (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.unaryAssign(e[1],e[2])+R.unaryAssign("1",e[5])+R.unaryAssign("1",e[3])+R.moveHeapPointer(1)+R.unaryAssign("H",e[4])+R.generateLabel(t[0])+R.conditionalJMP("<",e[1],"10",t[1])+R.arithmeticOperation("/",e[1],"10",e[1])+R.arithmeticOperation("+",e[3],"1",e[3])+R.arithmeticOperation("*",e[5],"10",e[5])+R.inconditionalJMP(t[0])+R.generateLabel(t[1])+R.conditionalJMP(">=",e[2],"0",t[2])+R.generateHeapAssign("H","45")+R.moveHeapPointer(1)+R.generateLabel(t[2])+R.conditionalJMP("==",e[3],"0",t[3])+R.arithmeticOperation("/",e[2],e[5],e[6])+R.arithmeticOperation("%",e[6],"1",e[8])+R.arithmeticOperation("-",e[6],e[8],e[6])+R.arithmeticOperation("+",e[6],"48",e[7])+R.generateHeapAssign("H",e[7])+R.moveHeapPointer(1)+R.arithmeticOperation("*",e[6],e[5],e[7])+R.arithmeticOperation("-",e[2],e[7],e[2])+R.arithmeticOperation("/",e[5],"10",e[5])+R.arithmeticOperation("-",e[3],"1",e[3])+R.inconditionalJMP(t[2])+R.generateLabel(t[3])+R.generateHeapAssign("H","0")+R.generateStackAssign("P",e[4])+be.createOutLabels()+"return;\n \n}\n"}power(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel()],i=[n.genLabel(),n.genLabel()];return"void native_java_pow (){\n"+R.arithmeticOperation("+","P","2",e[0])+R.generateStackAccess(e[0],e[0])+R.conditionalJMP("<=",e[0],0,t[1])+R.inconditionalJMP(t[2])+R.generateLabel(t[1])+R.generateStackAssign("P",1)+R.inconditionalJMP(t[0])+R.generateLabel(t[2])+R.arithmeticOperation("+","P","1",e[1])+R.generateStackAccess(e[1],e[1])+R.unaryAssign(e[1],e[2])+R.generateLabel(i[0])+R.conditionalJMP("<=",e[0],1,i[1])+R.arithmeticOperation("*",e[1],e[2],e[1])+R.arithmeticOperation("-",e[0],1,e[0])+R.inconditionalJMP(i[0])+R.generateLabel(i[1])+R.generateStackAssign("P",e[1])+R.generateLabel(t[0])+be.createOutLabels()+"return;\n \n}\n"}charToString(){const e=[n.genTemporary(),n.genTemporary()];return"void native_java_char_to_string (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.moveHeapPointer(1)+R.unaryAssign("H",e[0])+R.generateHeapAssign(e[0],e[1])+R.moveHeapPointer(1)+R.generateHeapAssign("H","0")+R.generateStackAssign("P",e[0])+be.createOutLabels()+"return;\n \n}\n"}printString(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel()];return"void native_java_print_string (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.generateLabel(t[0])+R.generateHeapAccess(e[1],e[2])+R.conditionalJMP("==",e[2],"0",t[1])+R.printStmt("%c",e[2])+R.arithmeticOperation("+",e[1],"1",e[1])+R.inconditionalJMP(t[0])+R.generateLabel(t[1])+be.createOutLabels()+"return;\n \n}\n"}printBoolean(){const e=[n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel()];return"void native_java_print_boolean (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[0])+R.conditionalJMP("==",e[0],"1",t[0])+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.printStmt("%c","116")+R.printStmt("%c","114")+R.printStmt("%c","117")+R.printStmt("%c","101")+R.inconditionalJMP(t[2])+R.generateLabel(t[1])+R.printStmt("%c","102")+R.printStmt("%c","97")+R.printStmt("%c","108")+R.printStmt("%c","115")+R.printStmt("%c","101")+R.generateLabel(t[2])+be.createOutLabels()+"return;\n \n}\n"}real_to_String(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()];return"void native_java_real_to_string (){\n"+R.arithmeticOperation("+","1","P",e[0])+R.generateStackAccess(e[0],e[1])+R.arithmeticOperation("%",e[1],"1",e[2])+R.arithmeticOperation("-",e[1],e[2],e[3])+R.moveHeapPointer(1)+R.unaryAssign("H",e[4])+R.generateHeapAssign("H","46")+R.moveHeapPointer(1)+R.generateHeapAssign("H","0")+R.moveStackPointer(!0,2)+R.arithmeticOperation("+","P","1",e[5])+R.generateStackAssign(e[5],e[3])+R.functionCall("native_java_int_to_string")+R.generateStackAccess("P",e[6])+R.generateStackAssign(e[5],e[6])+R.arithmeticOperation("+","1",e[5],e[5])+R.generateStackAssign(e[5],e[4])+R.functionCall("native_java_concat_strings")+R.arithmeticOperation("-",e[5],"1",e[5])+R.generateStackAccess(e[5],e[7])+R.arithmeticOperation("*",e[2],"100",e[8])+R.arithmeticOperation("+","P","1",e[5])+R.generateStackAssign(e[5],e[8])+R.functionCall("native_java_int_to_string")+R.generateStackAccess("P",e[9])+R.generateStackAssign(e[5],e[7])+R.arithmeticOperation("+",e[5],"1",e[5])+R.generateStackAssign(e[5],e[9])+R.functionCall("native_java_concat_strings")+R.arithmeticOperation("+","1","P",e[5])+R.generateStackAccess(e[5],e[10])+R.moveStackPointer(!1,2)+R.generateStackAssign("P",e[10])+be.createOutLabels()+"return;\n \n}\n"}charAt(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary()];return"void native_string_charat (){\n"+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[1])+R.arithmeticOperation("+","P","2",e[0])+R.generateStackAccess(e[0],e[2])+R.arithmeticOperation("+",e[2],e[1],e[0])+R.generateHeapAccess(e[0],e[0])+R.generateStackAssign("P",e[0])+be.createOutLabels()+"return;\n \n}\n"}string_to_Int(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel()];return"void native_java_string_to_int (){\n"+R.unaryAssign(0,e[2])+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[0])+R.functionCall("java_string_length")+R.generateStackAccess("P",e[1])+R.generateLabel(t[1])+R.conditionalJMP("==",e[1],0,t[0])+R.generateHeapAccess(e[0],e[3])+R.conditionalJMP("<",e[3],48,be.ErrorsLabels.get("illegalnumberformat"))+R.conditionalJMP(">",e[3],57,be.ErrorsLabels.get("illegalnumberformat"))+R.arithmeticOperation("*",e[2],"10",e[2])+R.arithmeticOperation("-",e[3],48,e[3])+R.arithmeticOperation("+",e[2],e[3],e[2])+R.arithmeticOperation("+",e[0],"1",e[0])+R.arithmeticOperation("-",e[1],1,e[1])+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}string_to_double(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel(),n.genLabel()];return"void native_java_string_to_double (){\n"+R.unaryAssign(0,e[2])+R.arithmeticOperation("+","P","1",e[0])+R.generateStackAccess(e[0],e[0])+R.functionCall("java_string_length")+R.generateStackAccess("P",e[1])+R.generateLabel(t[1])+R.conditionalJMP("==",e[1],0,t[0])+R.generateHeapAccess(e[0],e[3])+R.conditionalJMP("==",e[3],46,t[2])+R.conditionalJMP("<",e[3],48,be.ErrorsLabels.get("illegalnumberformat"))+R.conditionalJMP(">",e[3],57,be.ErrorsLabels.get("illegalnumberformat"))+R.arithmeticOperation("*",e[2],"10",e[2])+R.arithmeticOperation("-",e[3],48,e[3])+R.arithmeticOperation("+",e[2],e[3],e[2])+R.arithmeticOperation("+",e[0],"1",e[0])+R.arithmeticOperation("-",e[1],1,e[1])+R.inconditionalJMP(t[1])+R.comment("inicio double")+R.generateLabel(t[2])+R.arithmeticOperation("+",e[0],"1",e[0])+R.arithmeticOperation("-",e[1],"1",e[1])+R.unaryAssign(1,e[4])+R.generateLabel(t[3])+R.conditionalJMP("==",e[1],0,t[0])+R.arithmeticOperation("/",e[4],"10",e[4])+R.generateHeapAccess(e[0],e[3])+R.conditionalJMP("<",e[3],48,be.ErrorsLabels.get("illegalnumberformat"))+R.conditionalJMP(">",e[3],57,be.ErrorsLabels.get("illegalnumberformat"))+R.arithmeticOperation("-",e[3],48,e[3])+R.arithmeticOperation("*",e[4],e[3],e[5])+R.arithmeticOperation("+",e[2],e[5],e[2])+R.arithmeticOperation("+",e[0],"1",e[0])+R.arithmeticOperation("-",e[1],1,e[1])+R.inconditionalJMP(t[3])+R.generateLabel(t[0])+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}string_equals(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel(),n.genLabel()];return"void java_string_equals (){\n"+R.arithmeticOperation("+","P",1,e[0])+R.generateStackAccess(e[0],e[0])+R.arithmeticOperation("+","P",2,e[1])+R.generateStackAccess(e[1],e[1])+R.functionCall("java_string_length")+R.generateStackAccess("P",e[2])+R.moveStackPointer(!0,1)+R.functionCall("java_string_length")+R.generateStackAccess("P",e[3])+R.moveStackPointer(!1,1)+R.conditionalJMP("!=",e[2],e[3],t[3])+R.generateLabel(t[1])+R.conditionalJMP("==",e[3],0,t[2])+R.generateHeapAccess(e[0],e[2])+R.generateHeapAccess(e[1],e[4])+R.conditionalJMP("!=",e[2],e[4],t[3])+R.arithmeticOperation("+",e[0],1,e[0])+R.arithmeticOperation("+",e[1],1,e[1])+R.arithmeticOperation("-",e[3],"1",e[3])+R.inconditionalJMP(t[1])+R.generateLabel(t[2])+R.generateStackAssign("P",1)+R.inconditionalJMP(t[0])+R.generateLabel(t[3])+R.generateStackAssign("P",0)+R.generateLabel(t[0])+be.createOutLabels()+"return;\n \n}\n"}string_to_lowercase(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel()];return"void java_string_to_lowercase (){\n"+R.generateStackAccess("P",e[0])+R.moveHeapPointer(1)+R.unaryAssign("H",e[2])+R.arithmeticOperation("-",e[0],1,e[0])+R.generateLabel(t[0])+R.arithmeticOperation("+",e[0],1,e[0])+R.generateHeapAccess(e[0],e[1])+R.conditionalJMP("==",e[1],0,t[1])+R.conditionalJMP("<",e[1],65,t[2])+R.conditionalJMP(">",e[1],90,t[2])+R.arithmeticOperation("+",e[1],32,e[1])+R.generateLabel(t[2])+R.generateHeapAssign("H",e[1])+R.moveHeapPointer(1)+R.inconditionalJMP(t[0])+R.generateLabel(t[1])+R.generateHeapAssign("H","0")+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}string_to_uppercase(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel(),n.genLabel()];return"void java_string_to_uppercase (){\n"+R.generateStackAccess("P",e[0])+R.moveHeapPointer(1)+R.unaryAssign("H",e[2])+R.arithmeticOperation("-",e[0],1,e[0])+R.generateLabel(t[0])+R.arithmeticOperation("+",e[0],1,e[0])+R.generateHeapAccess(e[0],e[1])+R.conditionalJMP("==",e[1],0,t[1])+R.conditionalJMP(">",e[1],122,t[2])+R.conditionalJMP("<",e[1],97,t[2])+R.arithmeticOperation("-",e[1],32,e[1])+R.generateLabel(t[2])+R.generateHeapAssign("H",e[1])+R.moveHeapPointer(1)+R.inconditionalJMP(t[0])+R.generateLabel(t[1])+R.generateHeapAssign("H","0")+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}copyVector(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel()];return"void native_vector_linealize (){\n"+R.generateStackAccess("P",e[0])+R.moveHeapPointer(1)+R.unaryAssign("H",e[1])+R.generateHeapAccess(e[0],e[2])+R.unaryAssign(e[2],e[3])+R.generateHeapAssign(e[1],e[2])+R.arithmeticOperation("-","0","1",e[4])+R.generateLabel(t[1])+R.arithmeticOperation("+",e[4],"1",e[4])+R.conditionalJMP("==",e[4],e[3],t[0])+R.arithmeticOperation("+",e[0],e[4],e[5])+R.arithmeticOperation("+",e[5],"1",e[5])+R.generateHeapAccess(e[5],e[5])+R.moveHeapPointer(1)+R.generateHeapAssign("H",e[5])+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.generateStackAssign("P",e[1])+be.createOutLabels()+"return;\n \n}\n"}string_to_chararray(){const e=[n.genTemporary(),n.genTemporary(),n.genTemporary(),n.genTemporary()],t=[n.genLabel(),n.genLabel()];return"void java_string_to_chararray (){\n"+R.generateStackAccess("P",e[0])+R.moveStackPointer(!0,1)+R.arithmeticOperation("+","P",1,e[1])+R.generateStackAssign(e[1],e[0])+R.functionCall("java_string_length")+R.generateStackAccess("P",e[1])+R.moveStackPointer(!1,1)+R.moveHeapPointer(1)+R.unaryAssign("H",e[2])+R.generateHeapAssign(e[2],e[1])+R.generateLabel(t[1])+R.generateHeapAccess(e[0],e[3])+R.conditionalJMP("==",e[3],0,t[0])+R.moveHeapPointer(1)+R.generateHeapAssign("H",e[3])+R.arithmeticOperation("+",e[0],1,e[0])+R.inconditionalJMP(t[1])+R.generateLabel(t[0])+R.generateStackAssign("P",e[2])+be.createOutLabels()+"return;\n \n}\n"}defaultObjectConstructor(){const e=n.genTemporary();return"void default_object_constructor (){\n"+R.moveHeapPointer(1)+R.generateStackAssign("P","H")+R.arithmeticOperation("+","P","1",e)+R.generateStackAccess(e,e)+R.generateHeapAssign("H",e)+R.arithmeticOperation("+","P","2",e)+R.generateStackAccess(e,e)+R.moveHeapPointer(1)+R.generateHeapAssign("H",e)+be.createOutLabels()+"return;\n \n}\n"}objectToString(){const e=n.genTemporary(),t=n.genTemporary(),i=n.genTemporary(),s=n.genLabel(),r=n.genLabel();let a="void default_object_to_string (){\n";return a+=R.arithmeticOperation("+","P","1",t),a+=R.generateStackAccess(t,t),a+=R.conditionalJMP("!=",t,0,s),a+=R.moveHeapPointer(1),a+=R.unaryAssign("H",i),a+=R.generateHeapAssign("H",110),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",117),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",108),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",108),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",0),a+=R.inconditionalJMP(r),a+=R.generateLabel(s),a+=R.moveHeapPointer(1),a+=R.unaryAssign("H",i),a+=R.generateHeapAssign("H",79),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",98),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",106),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",101),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",99),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",116),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",64),a+=R.moveHeapPointer(1),a+=R.generateHeapAssign("H",0),a+=R.functionCall("native_java_int_to_string"),a+=R.generateStackAccess("P",e),a+=R.arithmeticOperation("+","P","1",t),a+=R.generateStackAssign(t,i),a+=R.arithmeticOperation("+","P","2",t),a+=R.generateStackAssign(t,e),a+=R.functionCall("native_java_concat_strings"),a+=R.arithmeticOperation("+","P","1",i),a+=R.generateStackAccess(i,i),a+=R.generateLabel(r),a+=R.generateStackAssign("P",i),a+=be.createOutLabels()+"return;\n \n}\n",a}all(){return this.concat_string()+"\n"+this.truncate_string()+"\n"+this.round_string()+"\n"+this.length_string()+"\n"+this.int_to_String()+"\n"+this.printString()+"\n"+this.real_to_String()+"\n"+this.boolean_to_string()+"\n"+this.printBoolean()+"\n"+this.charToString()+"\n"+this.power()+"\n"+this.string_to_Int()+"\n"+this.string_to_double()+"\n"+this.string_to_lowercase()+"\n"+this.string_to_uppercase()+"\n"+this.string_to_chararray()+"\n"+this.string_equals()+"\n"+this.cloneObject()+"\n"+this.copyVector()+"\n"+this.charAt()+"\n"+this.defaultObjectConstructor()+"\n"+this.objectToString()}headers(){let e="#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n";e+="double H;\ndouble P;\ndouble E;\ndouble Stack[16384];\ndouble Heap[16384];\ndouble ";for(let t=0;t<n.getTemporary();t++)e+=`${0===t?"":","}t${t}`;return e+=";\n",e}};const be=new class{constructor(){this.SymbolTable=null,this.ScopeStack=new s,this.CodeCompiled="",this.Classes=new r,this.Errores=[],this.Display=new c,this.ClassTemplates=new Map,this.Heap_Pointer=1,this.FunctionsCode=[],this.ErrorsLabels=new Map,this.MainClass=null,this.Files=null,this.iNode=null,this.CurrentFile=[],this.StaticSymbols=[],this.VarFlag=!0}fillErrorMap(){this.ErrorsLabels.set("start",n.genLabel()),this.ErrorsLabels.set("exit",n.genLabel()),this.ErrorsLabels.set("indexoutofbounds",n.genLabel()),this.ErrorsLabels.set("divisionbyzero",n.genLabel()),this.ErrorsLabels.set("illegalnumberformat",n.genLabel()),this.ErrorsLabels.set("invalidcast",n.genLabel())}getINode(){return this.iNode}getSymTabStack(){return this.SymbolTable}getSymbolTableStatus(){if(this.SymbolTable.getSymTabStack().empty())return null;const e=this.SymbolTable.jsonify(null),t=this.Classes.keys();for(const i of t){this.ClassTemplates.get(this.Classes.getType(i)).parseObjectTable(e,i)}return e}resetAll(){this.StaticSymbols=[],this.SymbolTable=null,this.CodeCompiled="",this.Classes=new r,this.Errores=[],this.Display=new c,this.ScopeStack=new s,this.ClassTemplates=new Map,this.ClassTemplates.set(18,new W),this.Heap_Pointer=1,this.FunctionsCode=[],this.ErrorsLabels=new Map,n.reset(),this.MainClass=[],this.fillErrorMap(),this.Root=null}process(e,t){if(null==e)return;this.iNode=e,this.resetAll(),this.Files=t,Object.keys(this.Files).forEach(e=>{this.Files[e].parsed=!1});const i=new fe(this);i.createSuperTree(e,this.Files),i.lookUpAllMainClasses(e),i.firstPass(),be.SymbolTable=new W(null),this.Root=e;try{const t=i.translate(e);let s=`${ye.all()}\n${be.FunctionsCode.join("\n")}`;return s=ye.headers()+s+"int main(){\n"+`${be.Heap_Pointer-1>0?`H = H + ${be.Heap_Pointer-1};\n`:""}${this.StaticSymbols.join("\n")}P = P + 1;\n${t}();\nP = P - 1;\nreturn;\n}\n`,s}catch(e){throw Error(e)}}createOutLabels(){let e=R.inconditionalJMP(this.ErrorsLabels.get("exit"));return e+=R.generateLabel(this.ErrorsLabels.get("invalidcast")),e+=R.printStmt("%c",105),e+=R.printStmt("%c",110),e+=R.printStmt("%c",118),e+=R.printStmt("%c",97),e+=R.printStmt("%c",108),e+=R.printStmt("%c",105),e+=R.printStmt("%c",100),e+=R.printStmt("%c",32),e+=R.printStmt("%c",99),e+=R.printStmt("%c",97),e+=R.printStmt("%c",115),e+=R.printStmt("%c",116),e+=R.printStmt("%c",32),e+=R.printStmt("%c",101),e+=R.printStmt("%c",120),e+=R.printStmt("%c",99),e+=R.printStmt("%c",101),e+=R.printStmt("%c",112),e+=R.printStmt("%c",116),e+=R.printStmt("%c",105),e+=R.printStmt("%c",111),e+=R.printStmt("%c",110),e+=R.printStmt("%c",46),e+=R.printStmt("%c",46),e+=R.printStmt("%c",46),e+=R.inconditionalJMP(be.ErrorsLabels.get("exit")),e+=R.generateLabel(this.ErrorsLabels.get("divisionbyzero")),e+=R.printStmt("%c",100),e+=R.printStmt("%c",105),e+=R.printStmt("%c",118),e+=R.printStmt("%c",105),e+=R.printStmt("%c",115),e+=R.printStmt("%c",105),e+=R.printStmt("%c",111),e+=R.printStmt("%c",110),e+=R.printStmt("%c",32),e+=R.printStmt("%c",98),e+=R.printStmt("%c",121),e+=R.printStmt("%c",32),e+=R.printStmt("%c",122),e+=R.printStmt("%c",101),e+=R.printStmt("%c",114),e+=R.printStmt("%c",111),e+=R.printStmt("%c",46),e+=R.printStmt("%c",46),e+=R.printStmt("%c",46),e+=R.inconditionalJMP(be.ErrorsLabels.get("exit")),e+=R.generateLabel(this.ErrorsLabels.get("indexoutofbounds")),e+=R.printStmt("%c",105),e+=R.printStmt("%c",110),e+=R.printStmt("%c",100),e+=R.printStmt("%c",101),e+=R.printStmt("%c",120),e+=R.printStmt("%c",32),e+=R.printStmt("%c",111),e+=R.printStmt("%c",117),e+=R.printStmt("%c",116),e+=R.printStmt("%c",32),e+=R.printStmt("%c",111),e+=R.printStmt("%c",102),e+=R.printStmt("%c",32),e+=R.printStmt("%c",98),e+=R.printStmt("%c",111),e+=R.printStmt("%c",117),e+=R.printStmt("%c",110),e+=R.printStmt("%c",100),e+=R.printStmt("%c",115),e+=R.inconditionalJMP(be.ErrorsLabels.get("exit")),e+=R.generateLabel(be.ErrorsLabels.get("illegalnumberformat")),e+=R.printStmt("%c",105),e+=R.printStmt("%c",108),e+=R.printStmt("%c",101),e+=R.printStmt("%c",103),e+=R.printStmt("%c",97),e+=R.printStmt("%c",108),e+=R.printStmt("%c",32),e+=R.printStmt("%c",110),e+=R.printStmt("%c",117),e+=R.printStmt("%c",109),e+=R.printStmt("%c",98),e+=R.printStmt("%c",101),e+=R.printStmt("%c",114),e+=R.printStmt("%c",32),e+=R.printStmt("%c",102),e+=R.printStmt("%c",111),e+=R.printStmt("%c",114),e+=R.printStmt("%c",109),e+=R.printStmt("%c",97),e+=R.printStmt("%c",116),e+=R.inconditionalJMP(be.ErrorsLabels.get("exit")),e+=R.generateLabel(be.ErrorsLabels.get("exit")),e}}},,,,function(e,t,i){"use strict";(function(e,s){i.d(t,"a",(function(){return a})),i.d(t,"b",(function(){return l}));var r=i(53),n=i(76),a=null,o=["print","println"],l=function(){var e=function(e,t,i,s){for(i=i||{},s=e.length;s--;i[e[s]]=t);return i},t=[1,10],i=[1,22],s=[1,31],l=[1,32],c=[1,33],h=[1,30],p=[1,11],u=[1,25],d=[1,26],m=[1,27],g=[1,19],f=[1,60],y=[1,61],b=[1,62],_=[1,63],w=[1,64],T=[1,65],E=[1,54],A=[1,67],S=[1,58],C=[1,76],k=[1,77],L=[1,73],v=[1,74],O=[1,79],N=[5,7,17,20,21,22,28,36,47,48,49,57],R=[1,87],I=[1,94],x=[1,96],P=[1,101],j=[1,107],$=[28,39,60],D=[5,28,29,32,37,39,41,43,58,60,66,109,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],M=[5,32],F=[5,32,41,60,66,109],H=[5,29,32,39,41,60,66,109,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],U=[2,146],V=[5,32,41,60,66,109,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],B=[2,168],z=[1,114],Y=[1,113],G=[1,115],J=[5,32,41,60,66,109,163,165],Q=[1,116],W=[5,29,32,39,41,43,60,66,109,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],q=[5,32,41,60,66,109,161,163,165],X=[1,117],K=[5,29,32,41,60,66,109,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],Z=[5,32,41,60,66,109,159,161,163,165],ee=[1,120],te=[1,121],ie=[1,122],se=[5,32,41,60,66,109,155,156,157,159,161,163,165],re=[1,127],ne=[1,128],ae=[1,129],oe=[1,130],le=[5,32,41,60,66,109,150,151,152,153,155,156,157,159,161,163,165],ce=[1,133],he=[1,134],pe=[1,136],ue=[5,32,41,60,66,109,137,138,150,151,152,153,155,156,157,159,161,163,165],de=[1,139],me=[1,140],ge=[1,141],fe=[5,32,41,60,66,109,137,138,145,146,147,150,151,152,153,155,156,157,159,161,163,165],ye=[1,142],be=[5,32,41,60,66,109,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],_e=[1,180],we=[1,179],Te=[1,154],Ee=[1,176],Ae=[1,177],Se=[1,178],Ce=[1,187],ke=[1,188],Le=[1,182],ve=[1,183],Oe=[1,184],Ne=[1,185],Re=[1,186],Ie=[5,7,9,10,11,12,13,14,17,20,21,22,28,36,47,48,49,57,58,64,66,88,90,91,96,97,101,107,110,111,113,114,115,122,132,133,137,138,141],xe=[5,64],Pe=[5,43],je=[1,190],$e=[28,60],De=[1,191],Me=[5,32,43],Fe=[2,48],He=[1,192],Ue=[1,193],Ve=[1,205],Be=[1,216],ze=[1,223],Ye=[32,66],Ge=[2,68],Je=[5,7,9,10,11,12,13,14,17,20,21,22,28,36,47,48,49,57,58,64,66,88,89,90,91,96,97,100,101,107,110,111,113,114,115,122,132,133,137,138,141],Qe=[5,9,10,11,12,13,14,17,20,21,22,28,47,48,49,58,64,66,88,90,91,96,97,101,107,110,111,113,114,115,122,132,133,137,138,141],We=[5,9,10,11,12,13,14,17,20,21,22,28,47,48,49,58,64,66,88,89,90,91,96,97,101,107,110,111,113,114,115,122,132,133,137,138,141],qe=[1,243],Xe=[1,265],Ke=[32,60],Ze=[1,297],et=[32,41],tt=[1,319],it=[5,32,60],st=[5,9,10,11,12,13,14,17,20,21,22,28,47,48,49,58,64,66,88,89,90,91,96,97,100,101,107,110,111,113,114,115,122,132,133,137,138,141],rt=[1,362],nt=[1,363],at=[66,107,110],ot={trace:function(){},yy:{},symbols_:{error:2,translation_unit:3,import_declarations:4,SEMICOLON:5,type_declarations:6,EOF:7,literal:8,INTEGER_LITERAL:9,DOUBLE_LITERAL:10,BOOLEAN_LITERAL:11,CHARACTER_LITERAL:12,STRING_LITERAL:13,NULL_LITERAL:14,primitive_type:15,numeric_type:16,BOOLEAN:17,integral_type:18,floating_point_type:19,INTEGER:20,CHAR:21,DOUBLE:22,array_type:23,dims:24,name:25,simple_name:26,qualified_name:27,IDENTIFIER:28,DOT:29,IMPORT:30,expression:31,COMMA:32,type_declaration:33,class_member_declaration:34,struct_declaration:35,DEFINE:36,AS:37,struct_body:38,LBRACK:39,struct_attribute_list:40,RBRACK:41,struct_variable_declaration:42,EQ:43,field_declaration:44,method_declaration:45,modifiers:46,FINAL:47,GLOBAL:48,VAR:49,variable_declaration_statement:50,variable_declarators:51,variable_declarator:52,variable_declarator_id:53,method_header:54,method_body:55,method_declarator:56,VOID:57,LPAREN:58,formal_parameter_list:59,RPAREN:60,formal_parameter:61,block:62,array_initializer:63,LBRACE:64,variable_initializers:65,RBRACE:66,variable_initializer:67,block_statements:68,block_statement:69,statement:70,variable_declaration:71,special_declaration:72,PEQ:73,statement_without_trailing_substatement:74,if_then_statement:75,if_then_else_statement:76,while_statement:77,for_statement:78,empty_statement:79,expression_statement:80,switch_statement:81,do_statement:82,break_statement:83,continue_statement:84,return_statement:85,throw_statement:86,try_statement:87,IF:88,ELSE:89,WHILE:90,FOR:91,for_init:92,for_update:93,statement_expression_list:94,statement_expression:95,THROW:96,TRY:97,catches:98,catch_clause:99,CATCH:100,SWITCH:101,switch_block:102,switch_block_statement_groups:103,switch_labels:104,switch_block_statement_group:105,switch_label:106,CASE:107,constant_expression:108,COLON:109,DEFAULT:110,DO:111,expression_list:112,BREAK:113,CONTINUE:114,RETURN:115,primary:116,primary_no_new_array:117,array_creation_expression:118,class_instance_creation_expression:119,method_invocation:120,left_hand_side:121,NEW:122,argument_list:123,DOLLAR:124,dim_exprs:125,dim_expr:126,field_access:127,array_access:128,postfix_expression:129,postincrement_expression:130,postdecrement_expression:131,PLUSPLUS:132,MINUSMINUS:133,unary_expression:134,preincrement_expression:135,predecrement_expression:136,PLUS:137,MINUS:138,unary_expression_not_plus_minus:139,cast_expression:140,NOT:141,power_expression:142,POT:143,multiplicative_expression:144,MULT:145,DIV:146,MOD:147,additive_expression:148,relational_expression:149,LT:150,GT:151,LTEQ:152,GTEQ:153,equality_expression:154,EQEQ:155,REQEQ:156,NOTEQ:157,exclusive_or_expression:158,XOR:159,conditional_and_expression:160,ANDAND:161,conditional_or_expression:162,OROR:163,conditional_expression:164,QUESTION:165,assignment_expression:166,assignment:167,assignment_operator:168,$accept:0,$end:1},terminals_:{2:"error",5:"SEMICOLON",7:"EOF",9:"INTEGER_LITERAL",10:"DOUBLE_LITERAL",11:"BOOLEAN_LITERAL",12:"CHARACTER_LITERAL",13:"STRING_LITERAL",14:"NULL_LITERAL",17:"BOOLEAN",20:"INTEGER",21:"CHAR",22:"DOUBLE",28:"IDENTIFIER",29:"DOT",30:"IMPORT",32:"COMMA",36:"DEFINE",37:"AS",39:"LBRACK",41:"RBRACK",43:"EQ",47:"FINAL",48:"GLOBAL",49:"VAR",57:"VOID",58:"LPAREN",60:"RPAREN",64:"LBRACE",66:"RBRACE",73:"PEQ",88:"IF",89:"ELSE",90:"WHILE",91:"FOR",96:"THROW",97:"TRY",100:"CATCH",101:"SWITCH",107:"CASE",109:"COLON",110:"DEFAULT",111:"DO",113:"BREAK",114:"CONTINUE",115:"RETURN",122:"NEW",124:"DOLLAR",132:"PLUSPLUS",133:"MINUSMINUS",137:"PLUS",138:"MINUS",141:"NOT",143:"POT",145:"MULT",146:"DIV",147:"MOD",150:"LT",151:"GT",152:"LTEQ",153:"GTEQ",155:"EQEQ",156:"REQEQ",157:"NOTEQ",159:"XOR",161:"ANDAND",163:"OROR",165:"QUESTION"},productions_:[0,[3,4],[3,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[15,1],[15,1],[16,1],[16,1],[18,1],[18,1],[19,1],[23,2],[23,2],[25,1],[25,1],[26,1],[27,3],[4,2],[4,3],[6,1],[6,2],[33,1],[33,1],[35,5],[38,3],[40,1],[40,3],[42,2],[42,2],[42,2],[42,4],[42,4],[42,4],[34,1],[34,1],[34,1],[46,1],[46,1],[46,1],[44,1],[51,1],[51,3],[52,1],[53,1],[45,2],[54,2],[54,2],[54,2],[54,2],[56,4],[56,3],[59,1],[59,3],[61,2],[61,2],[61,2],[55,1],[55,1],[63,4],[63,3],[63,3],[65,1],[65,3],[67,1],[62,3],[62,2],[68,1],[68,2],[69,1],[69,1],[50,4],[50,2],[50,2],[71,2],[71,2],[71,2],[72,4],[70,1],[70,1],[70,1],[70,1],[70,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[75,5],[76,7],[77,5],[78,9],[78,8],[78,8],[78,7],[78,8],[78,7],[78,7],[78,6],[92,1],[92,3],[93,1],[94,1],[94,3],[86,3],[87,3],[98,1],[98,2],[99,5],[95,1],[79,1],[80,2],[81,5],[102,4],[102,3],[102,3],[102,2],[103,1],[103,2],[105,2],[104,1],[104,2],[106,3],[106,2],[82,7],[112,1],[112,3],[83,2],[84,2],[85,2],[85,3],[116,1],[116,1],[117,1],[117,3],[117,1],[117,1],[117,1],[119,4],[123,1],[123,2],[123,3],[123,4],[118,3],[118,3],[118,1],[125,1],[125,2],[126,3],[24,2],[24,3],[127,3],[120,4],[120,3],[120,5],[120,6],[128,4],[128,4],[129,1],[129,1],[129,1],[129,1],[130,2],[131,2],[134,1],[134,1],[134,2],[134,2],[134,1],[135,2],[136,2],[140,4],[140,4],[140,4],[139,1],[139,2],[139,1],[142,1],[142,3],[144,1],[144,3],[144,3],[144,3],[148,1],[148,3],[148,3],[149,1],[149,3],[149,3],[149,3],[149,3],[154,1],[154,3],[154,3],[154,3],[158,1],[158,3],[160,1],[160,3],[162,1],[162,3],[164,1],[164,5],[166,1],[166,1],[167,3],[167,3],[121,1],[121,1],[168,1],[31,1],[108,1]],performAction:function(e,t,i,s,l,c,h){var p=c.length-1;switch(l){case 1:this.$=new n.a("PROGRAM",null,h[p-3].first_line,h[p-3].first_column,c[p-3],...c[p-1]),a=this.$;break;case 2:this.$=new n.a("PROGRAM",null,h[p-1].first_line,h[p-1].first_column,...c[p-1]),a=this.$;break;case 3:this.$=new n.a("INTEGER_LITERAL",parseInt(c[p]),h[p].first_line,h[p].first_column);break;case 4:this.$=new n.a("DOUBLE_LITERAL",parseFloat(c[p]),h[p].first_line,h[p].first_column);break;case 5:this.$=new n.a("BOOLEAN_LITERAL","true"==c[p],h[p].first_line,h[p].first_column);break;case 6:this.$=new n.a("CHARACTER_LITERAL",c[p],h[p].first_line,h[p].first_column);break;case 7:this.$=new n.a("STRING_LITERAL",c[p].substring(1,c[p].length-1),h[p].first_line,h[p].first_column);break;case 8:this.$=new n.a("NULL_LITERAL",null,h[p].first_line,h[p].first_column);break;case 9:case 11:case 12:case 18:case 19:case 26:case 27:case 38:case 39:case 44:case 47:case 61:case 68:case 73:case 74:this.$=c[p];break;case 10:this.$=new n.a("BOOLEAN",null,h[p].first_line,h[p].first_column);break;case 13:this.$=new n.a("INTEGER",null,h[p].first_line,h[p].first_column);break;case 14:this.$=new n.a("CHAR",null,h[p].first_line,h[p].first_column);break;case 15:this.$=new n.a("DOUBLE",null,h[p].first_line,h[p].first_column);break;case 16:this.$=new n.a("ARRAY",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 17:"string"===c[p-1].value.toLowerCase()&&c[p-1].changeType("STRING"),this.$=new n.a("ARRAY",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 20:this.$=new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column);break;case 21:this.$=new n.a("DOT",null,h[p-2].first_line,h[p-2].first_column,c[p-2],new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column));break;case 22:this.$=new n.a("IMPORTS",null,h[p-1].first_line,h[p-1].first_column,c[p]);break;case 23:case 31:case 57:case 67:this.$=c[p-2],this.$.addChild(c[p]);break;case 24:this.$=[c[p]];break;case 25:this.$=c[p-1],this.$.push(c[p]);break;case 28:this.$=new n.a("STRUCT_DECLARATION",null,h[p-4].first_line,h[p-4].first_column,c[p-3],c[p-1]);break;case 29:case 76:case 77:case 123:this.$=c[p-1];break;case 30:this.$=new n.a("STRUCT_LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 32:this.$=new n.a("ATTR_DECLARATION",null,h[p-1].first_line,h[p-1].first_column,c[p-1],new n.a("ID_LIST",null,h[p].first_line,h[p].first_column,new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column)));break;case 33:"string"===c[p-1].value.toLowerCase()&&c[p-1].changeType("STRING"),this.$=new n.a("ATTR_DECLARATION",null,h[p-1].first_line,h[p-1].first_column,c[p-1],new n.a("ID_LIST",null,h[p].first_line,h[p].first_column,new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column)));break;case 34:this.$=new n.a("ATTR_DECLARATION",null,h[p-1].first_line,h[p-1].first_column,c[p-1],new n.a("ID_LIST",null,h[p].first_line,h[p].first_column,new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column)));break;case 35:this.$=new n.a("VAR_DECLARATION",null,h[p-3].first_line,h[p-3].first_column,c[p-3],new n.a("EQ",null,h[p-1].first_line,h[p-1].first_column,new n.a("ID_LIST",null,h[p-2].first_line,h[p-2].first_column,new n.a("IDENTIFIER",c[p-2],h[p-2].first_line,h[p-2].first_column)),c[p]));break;case 36:"string"===c[p-3].value.toLowerCase()&&c[p-3].changeType("STRING"),this.$=new n.a("ATTR_DECLARATION",null,h[p-3].first_line,h[p-3].first_column,c[p-3],new n.a("EQ",null,h[p-1].first_line,h[p-1].first_column,new n.a("ID_LIST",null,h[p-2].first_line,h[p-2].first_column,new n.a("IDENTIFIER",c[p-2],h[p-2].first_line,h[p-2].first_column)),c[p]));break;case 37:this.$=new n.a("ATTR_DECLARATION",null,h[p-3].first_line,h[p-3].first_column,c[p-3],new n.a("EQ",null,h[p-1].first_line,h[p-1].first_column,new n.a("ID_LIST",null,h[p-2].first_line,h[p-2].first_column,new n.a("IDENTIFIER",c[p-2],h[p-2].first_line,h[p-2].first_column)),c[p]));break;case 40:this.$=new n.a("NO_OP",null,h[p].first_line,h[p].first_column);break;case 41:this.$=new n.a("FINAL",null,h[p].first_line,h[p].first_column);break;case 42:this.$=new n.a("GLOBAL",null,h[p].first_line,h[p].first_column);break;case 43:this.$=new n.a("VAR",null,h[p].first_line,h[p].first_column);break;case 45:this.$=new n.a("ID_LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 46:this.$=c[p-2],this.$.addChild(c[p]);break;case 48:this.$=new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column);break;case 49:case 72:case 127:case 156:this.$=c[p-1],this.$.addChild(c[p]);break;case 50:this.$=c[p],this.$.insertAt(0,c[p-1]);break;case 51:this.$=c[p],"string"===c[p-1].value.toLowerCase()&&c[p-1].changeType("STRING"),this.$.insertAt(0,c[p-1]);break;case 52:this.$=c[p],this.$.insertAt(0,c[p-1]);break;case 53:this.$=c[p],"principal"===this.$.getChild(0).value.toLowerCase()&&this.$.changeType("MAIN_DECLARATION"),this.$.insertAt(0,new n.a("VOID",null,h[p-1].first_line,h[p-1].first_column));break;case 54:this.$=new n.a("FUNCTION_DECLARATION",c[p-3],h[p-3].first_line,h[p-3].first_column,new n.a("IDENTIFIER",c[p-3],h[p-3].first_line,h[p-3].first_column),c[p-1]);break;case 55:this.$=new n.a("FUNCTION_DECLARATION",c[p-2],h[p-2].first_line,h[p-2].first_column,new n.a("IDENTIFIER",c[p-2],h[p-2].first_line,h[p-2].first_column));break;case 56:this.$=new n.a("FORMAL_PARAMETER_LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 58:case 60:this.$=new n.a("FORMAL_PARAMETER",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 59:"string"===c[p-1].value.toLowerCase()&&c[p-1].changeType("STRING"),this.$=new n.a("FORMAL_PARAMETER",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 62:this.$=new n.a("BLOCK",null,h[p].first_line,h[p].first_column);break;case 63:this.$=new n.a("ARRAY_LITERAL",null,h[p-3].first_line,h[p-3].first_column,...c[p-2].getChildren());break;case 64:this.$=new n.a("ARRAY_LITERAL",null,h[p-2].first_line,h[p-2].first_column,...c[p-1].getChildren());break;case 65:this.$=new n.a("ARRAY_LITERAL",null,h[p-2].first_line,h[p-2].first_column);break;case 66:this.$=new n.a("VARIABLE_INITIALIZER",null,h[p].first_line,h[p].first_column,c[p]);break;case 69:this.$=c[p-1],this.$.changeType("BLOCK");break;case 70:this.$=new n.a("BLOCK",null,h[p-1].first_line,h[p-1].first_column);break;case 71:this.$=new n.a("STMT_LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 75:this.$=c[p-3];let e=this.$.deleteAt(1);this.$.addChild(new n.a("EQ",null,h[p-3].first_line,h[p-3].first_column,e[0],c[p-1]));break;case 78:this.$=new n.a("VAR_DECLARATION",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 79:"string"===c[p-1].value.toLowerCase()&&c[p-1].changeType("STRING"),this.$=new n.a("VAR_DECLARATION",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 80:this.$=new n.a("VAR_DECLARATION",null,h[p-1].first_line,h[p-1].first_column,c[p-1],c[p]);break;case 81:this.$=new n.a("VAR_DECLARATION_NO_TYPE",null,h[p-3].first_line,h[p-3].first_column,c[p-3],new n.a("EQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]));break;case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 92:case 94:case 95:case 96:case 118:case 140:case 141:case 142:case 144:case 145:case 146:case 167:case 169:case 170:case 173:case 174:case 177:case 183:case 185:case 188:case 192:case 195:case 200:case 204:case 206:case 208:case 210:case 212:case 213:case 219:case 220:case 93:this.$=c[p];break;case 97:this.$=new n.a("IF",null,h[p-4].first_line,h[p-4].first_column,c[p-2],c[p]);break;case 98:this.$=new n.a("IF",null,h[p-6].first_line,h[p-6].first_column,c[p-4],c[p-2],c[p]);break;case 99:this.$=new n.a("WHILE",null,h[p-4].first_line,h[p-4].first_column,c[p-2],c[p]);break;case 100:this.$=new n.a("FOR",null,h[p-8].first_line,h[p-8].first_column,c[p-6],new n.a("FOR_COND",null,h[p-4].first_line,h[p-4].first_column,c[p-4]),c[p-2],c[p]),this.$.info=[!0,!0,!0];break;case 101:this.$=new n.a("FOR",null,h[p-7].first_line,h[p-7].first_column,new n.a("FOR_COND",null,h[p-4].first_line,h[p-4].first_column,c[p-4]),c[p-2],c[p]),this.$.info=[!1,!0,!0];break;case 102:this.$=new n.a("FOR",null,h[p-7].first_line,h[p-7].first_column,c[p-5],c[p-2],c[p]),this.$.info=[!0,!1,!0];break;case 103:this.$=new n.a("FOR",null,h[p-6].first_line,h[p-6].first_column,c[p-4],c[p-2],c[$01]),this.$.info=[!1,!1,!0];break;case 104:this.$=new n.a("FOR",null,h[p-7].first_line,h[p-7].first_column,c[p-5],new n.a("FOR_COND",null,h[p-3].first_line,h[p-3].first_column,c[p-3]),c[p]),this.$.info=[!0,!0,!1];break;case 105:this.$=new n.a("FOR",null,h[p-6].first_line,h[p-6].first_column,new n.a("FOR_COND",null,h[p-3].first_line,h[p-3].first_column,c[p-3]),c[p]),this.$.info=[!1,!0,!1];break;case 106:this.$=new n.a("FOR",null,h[p-6].first_line,h[p-6].first_column,c[p-4],c[p]),this.$.info=[!0,!1,!1];break;case 107:this.$=new n.a("FOR",null,h[p-5].first_line,h[p-5].first_column,c[p]),this.$.info=[!1,!1,!1];break;case 108:this.$=new n.a("FOR_INIT",null,h[p].first_line,h[p].first_column,c[p]);break;case 109:this.$=new n.a("FOR_INIT",null,h[p-2].first_line,h[p-2].first_column,c[p-2]);let t=c[p-2].deleteAt(1);c[p-2].addChild(new n.a("EQ",null,h[p-2].first_line,h[p-2].first_column,t[0],c[p]));break;case 110:this.$=new n.a("FOR_UPDATE",null,h[p].first_line,h[p].first_column,c[p]);break;case 111:this.$=new n.a("STMT_LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 112:case 135:this.$=c[p-2],this.$.addChild(c[p]);break;case 113:this.$=new n.a("THROW",null,h[p-2].first_line,h[p-2].first_column,c[p-1]);break;case 114:this.$=new n.a("TRY",null,h[p-2].first_line,h[p-2].first_column,c[p-1],c[p]);break;case 115:this.$=new n.a("CATCH-LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 116:this.$=c[p-1],this.$.addChild(c[p]);break;case 117:this.$=new n.a("CATCH",null,h[p-4].first_line,h[p-4].first_column,c[p-2],c[p]);break;case 119:this.$=new n.a("NO_OP",null,h[p].first_line,h[p].first_column,c[p]);break;case 120:this.$=new n.a("EXPRESSION_STMT",null,h[p-1].first_line,h[p-1].first_column,c[p-1]);break;case 121:this.$=new n.a("SWITCH",null,h[p-4].first_line,h[p-4].first_column,c[p-2],c[p]);break;case 122:this.$=c[p-2],c[p-2].addChild(c[p-1]);break;case 124:this.$=new n.a("SWITCH_BODY",null,h[p-2].first_line,h[p-2].first_column,c[p-1]);break;case 125:this.$=new n.a("SWITCH_BODY",null,h[p-1].first_line,h[p-1].first_column);break;case 126:this.$=new n.a("SWITCH_BODY",null,h[p].first_line,h[p].first_column,c[p]);break;case 128:this.$=c[p-1],c[p-1].addChild(c[p]);break;case 129:this.$=new n.a("CASE_LABEL_LIST",null,h[p].first_line,h[p].first_column,...c[p]);break;case 130:this.$=c[p-1],this.$.addChild(...c[p]);break;case 131:this.$=[c[p-1]];break;case 132:this.$=[new n.a("DEFAULT",null,h[p-1].first_line,h[p-1].first_column)];break;case 133:this.$=new n.a("DO",null,h[p-6].first_line,h[p-6].first_column,c[p-5],c[p-2]);break;case 134:case 148:this.$=new n.a("EXPRESSION_LIST",null,h[p].first_line,h[p].first_column,c[p]);break;case 136:this.$=new n.a("BREAK",null,h[p-1].first_line,h[p-1].first_column);break;case 137:this.$=new n.a("CONTINUE",null,h[p-1].first_line,h[p-1].first_column);break;case 138:this.$=new n.a("RETURN",null,h[p-1].first_line,h[p-1].first_column);break;case 139:this.$=new n.a("RETURN",null,h[p-2].first_line,h[p-2].first_column,c[p-1]);break;case 143:c[p-1].grouped=!0,this.$=c[p-1];break;case 147:this.$=new n.a("NEW",null,h[p-3].first_line,h[p-3].first_column,c[p-2]);break;case 149:this.$=new n.a("EXPRESSION_LIST",null,h[p-1].first_line,h[p-1].first_column,new n.a("DOLLAR",null,h[p-1].first_line,h[p-1].first_column,new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column)));break;case 150:this.$=c[p-2],this.$.addChild(c[p]);break;case 151:this.$=c[p-3],this.$.addChild(new n.a("DOLLAR",null,h[p-1].first_line,h[p-1].first_column,new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column)));break;case 152:case 153:this.$=new n.a("NEW_ARRAY",null,h[p-2].first_line,h[p-2].first_column,c[p-1],c[p]);break;case 154:case 186:case 216:case 217:this.$=c[p];break;case 155:this.$=new n.a("ARRAY_DIMS",null,h[p].first_line,h[p].first_column,c[p]);break;case 157:this.$=new n.a("DIM",null,h[p-2].first_line,h[p-2].first_column,c[p-1]);break;case 158:this.$=new n.a("ARRAY_DIMS",null,h[p-1].first_line,h[p-1].first_column,new n.a("DIM",null,h[p-1].first_line,h[p-1].first_column));break;case 159:this.$=c[p-2],this.$.addChild(new n.a("DIM",null,h[p-1].first_line,h[p-1].first_column));break;case 160:this.$=new n.a("DOT",null,h[p-1].first_line,h[p-1].first_column,c[p-2],new n.a("IDENTIFIER",c[p],h[p].first_line,h[p].first_column));break;case 161:{let e=o.find(e=>e==c[p-3].getValue());this.$=new n.a(void 0===e?"FUNCTION_CALL":"NATIVE_FUNCTION_CALL",null,h[p-3].first_line,h[p-3].first_column,c[p-3],c[p-1])}break;case 162:{let e=o.find(e=>e==c[p-2].getValue());this.$=new n.a(void 0===e?"FUNCTION_CALL":"NATIVE_FUNCTION_CALL",null,h[p-2].first_line,h[p-2].first_column,c[p-2])}break;case 163:this.$=new n.a("FUNCTION_CALL",null,h[p-2].first_line,h[p-2].first_column,new n.a("DOT",null,h[p-3].first_line,h[p-3].first_column,c[p-4],new n.a("IDENTIFIER",c[p-2],h[p-2].first_line,h[p-2].first_column)));break;case 164:this.$=new n.a("FUNCTION_CALL",null,h[p-3].first_line,h[p-3].first_column,new n.a("DOT",null,h[p-4].first_line,h[p-4].first_column,c[p-5],new n.a("IDENTIFIER",c[p-3],h[p-3].first_line,h[p-3].first_column)),c[p-1]);break;case 165:case 166:c[p-3].type!=r.a.types.ARRAY_ACCESS?this.$=new n.a("ARRAY_ACCESS",null,h[p-3].first_line,h[p-3].first_column,c[p-3],c[p-1]):(this.$=c[p-3],this.$.addChild(c[p-1]));break;case 168:this.$=c[p];break;case 171:this.$=new n.a("POSTINC",null,h[p].first_line,h[p].first_column,c[p-1]);break;case 172:this.$=new n.a("POSTDEC",null,h[p].first_line,h[p].first_column,c[p-1]);break;case 175:this.$=new n.a("PLUS",null,h[p-1].first_line,h[p-1].first_column,c[p]);break;case 176:this.$=new n.a("MINUS",null,h[p-1].first_line,h[p-1].first_column,c[p]);break;case 178:this.$=new n.a("PREINC",null,h[p-1].first_line,h[p-1].first_column,c[p]);break;case 179:this.$=new n.a("PREDEC",null,h[p-1].first_line,h[p-1].first_column,c[p]);break;case 180:case 182:this.$=new n.a("CAST",null,h[p-3].first_line,h[p-3].first_column,c[p-2],c[p]);break;case 181:c[p-2].getType()===r.a.types.IDENTIFIER&&"string"===c[p-2].getValue()&&c[p-2].changeType("STRING"),this.$=new n.a("CAST",null,h[p-3].first_line,h[p-3].first_column,c[p-2],c[p]);break;case 184:this.$=new n.a("NOT",null,h[p-1].first_line,h[p-1].first_column,c[p]);break;case 187:if(this.$=new n.a("POW",null,h[p-1].first_line,h[p-1].first_column),c[p-2].getType()!=r.a.types.POW||c[p-2].grouped)this.$.addChild(c[p-2],c[p]);else{let e=c[p-2].deleteAt(1)[0];this.$.addChild(e),this.$.addChild(c[p]),c[p-2].addChild(this.$),this.$=c[p-2]}break;case 189:this.$=new n.a("MULT",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 190:this.$=new n.a("DIV",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 191:this.$=new n.a("MOD",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 193:this.$=new n.a("PLUS",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 194:this.$=new n.a("MINUS",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 196:this.$=new n.a("LT",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 197:this.$=new n.a("GT",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 198:this.$=new n.a("LTEQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 199:this.$=new n.a("GTEQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 201:this.$=new n.a("EQEQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 202:this.$=new n.a("REQEQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 203:this.$=new n.a("NOTEQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 205:this.$=new n.a("XOR",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 207:this.$=new n.a("ANDAND",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 209:this.$=new n.a("OROR",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 211:this.$=new n.a("QUESTION",null,h[p-3].first_line,h[p-3].first_column,c[p-4],c[p-2],c[p]);break;case 214:case 215:this.$=new n.a("EQ",null,h[p-1].first_line,h[p-1].first_column,c[p-2],c[p]);break;case 218:this.$=new n.a("EQ",null,h[p].first_line,h[p].first_column)}},table:[{3:1,4:2,5:t,6:3,15:16,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:18,25:17,26:23,27:24,28:h,30:[1,4],33:5,34:6,35:7,36:p,44:8,45:9,46:20,47:u,48:d,49:m,50:12,54:13,57:g,71:14,72:15},{1:[3]},{5:[1,34],32:[1,35]},{5:t,7:[1,36],15:16,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:18,25:17,26:23,27:24,28:h,33:37,34:6,35:7,36:p,44:8,45:9,46:20,47:u,48:d,49:m,50:12,54:13,57:g,71:14,72:15},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:38,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(N,[2,24]),e(N,[2,26]),e(N,[2,27]),e(N,[2,38]),e(N,[2,39]),e(N,[2,40]),{25:83,26:23,27:24,28:h},e(N,[2,44]),{5:[1,86],55:84,62:85,64:R},{5:[1,89],43:[1,88]},{5:[1,90]},{24:93,28:I,39:x,51:92,52:95,53:97,56:91},{24:100,28:I,29:P,39:x,51:99,52:95,53:97,56:98},{28:I,51:103,52:95,53:97,56:102},{28:[1,105],56:104},{28:j,53:106},e($,[2,9]),e($,[2,10]),e(D,[2,18]),e(D,[2,19]),{28:[2,41]},{28:[2,42]},{28:[2,43]},e($,[2,11]),e($,[2,12]),e(D,[2,20]),e($,[2,13]),e($,[2,14]),e($,[2,15]),{5:t,6:108,15:16,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:18,25:17,26:23,27:24,28:h,33:5,34:6,35:7,36:p,44:8,45:9,46:20,47:u,48:d,49:m,50:12,54:13,57:g,71:14,72:15},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:109,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{1:[2,2]},e(N,[2,25]),e(M,[2,22]),e(F,[2,219]),e(F,[2,212]),e(F,[2,213]),e(F,[2,210],{163:[1,111],165:[1,110]}),e(H,U,{43:[1,112]}),e(V,B,{29:P,39:z,43:Y,58:G}),e(J,[2,208],{161:Q}),e(W,[2,216]),e(W,[2,217]),e(q,[2,206],{159:X}),e(V,[2,167],{29:[1,118]}),e(K,[2,140],{39:[1,119]}),e(Z,[2,204],{155:ee,156:te,157:ie}),e(K,[2,141]),e(H,[2,142]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:124,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:125,25:126,26:23,27:24,28:h,31:123,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(H,[2,144]),e(H,[2,145]),e(se,[2,200],{150:re,151:ne,152:ae,153:oe}),{15:131,16:21,17:i,18:28,19:29,20:s,21:l,22:c,25:132,26:23,27:24,28:h},e(K,[2,154]),e(H,[2,3]),e(H,[2,4]),e(H,[2,5]),e(H,[2,6]),e(H,[2,7]),e(H,[2,8]),e(le,[2,195],{137:ce,138:he}),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:138,32:pe,58:E,63:59,64:A,65:135,67:137,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(ue,[2,192],{145:de,146:me,147:ge}),e(fe,[2,188],{143:ye}),e(be,[2,186]),e(be,[2,173]),e(be,[2,174]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:143,135:71,136:72,137:L,138:v,139:75,140:80,141:O},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:146,135:71,136:72,137:L,138:v,139:75,140:80,141:O},e(be,[2,177]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:147,135:71,136:72,137:L,138:v,139:75,140:80,141:O},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:148,135:71,136:72,137:L,138:v,139:75,140:80,141:O},e(be,[2,183],{132:[1,149],133:[1,150]}),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:151,135:71,136:72,137:L,138:v,139:75,140:80,141:O},e(be,[2,185]),e(V,[2,169]),e(V,[2,170]),{29:P,37:[1,152]},e(N,[2,49]),e(N,[2,61]),e(N,[2,62]),{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:163,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:165,25:164,26:23,27:24,28:h,31:181,46:20,47:u,48:d,49:m,50:156,58:E,62:166,63:59,64:we,66:Te,68:153,69:155,70:157,71:14,72:15,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:189,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(Ie,[2,76]),e(Ie,[2,77]),e(xe,[2,50]),e(Pe,[2,78],{32:je}),e($e,[2,16],{39:De}),e(Me,Fe,{58:He}),e(Me,[2,45]),{41:Ue},e(Me,[2,47]),e(xe,[2,51]),e(Pe,[2,79],{32:je}),e($e,[2,17],{39:De}),{28:[1,194]},e(xe,[2,52]),e(Pe,[2,80],{32:je}),e(xe,[2,53]),{58:He},{73:[1,195]},e([5,32,43,60,73],Fe),{5:t,7:[1,196],15:16,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:18,25:17,26:23,27:24,28:h,33:37,34:6,35:7,36:p,44:8,45:9,46:20,47:u,48:d,49:m,50:12,54:13,57:g,71:14,72:15},e(M,[2,23]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:197,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:198},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:199,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:200,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:201,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:204,58:E,60:[1,203],63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,123:202,124:Ve,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:206},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:207},{28:[1,208]},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:209,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:210},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:211},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:212},{60:[1,213]},{24:93,39:x,60:[1,214]},{60:[1,215]},e([60,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],B,{24:100,29:P,39:Be,43:Y,58:G}),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:217},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:218},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:219},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:220},{39:ze,125:221,126:222},{29:P,39:ze,58:[1,225],125:224,126:222},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:226},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:227},{32:[1,228],66:[1,229]},{66:[1,230]},e(Ye,[2,66]),e(Ye,Ge),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:231},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:232},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:233},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:234,135:71,136:72,137:L,138:v,139:75,140:80,141:O},e(be,[2,175]),e(V,B,{29:P,39:z,58:G}),e(H,U),e(be,[2,176]),e(be,[2,178]),e(be,[2,179]),e(V,[2,171]),e(V,[2,172]),e(be,[2,184]),{38:235,39:[1,236]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:163,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:165,25:164,26:23,27:24,28:h,31:181,46:20,47:u,48:d,49:m,50:156,58:E,62:166,63:59,64:we,66:[1,237],69:238,70:157,71:14,72:15,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(Je,[2,70]),e(Qe,[2,71]),e(Qe,[2,73]),e(Qe,[2,74]),e(We,[2,82]),e(We,[2,83]),e(We,[2,84]),e(We,[2,85]),e(We,[2,86]),{24:93,28:j,39:x,51:92,52:95,53:97},e([5,32,66,132,133,137,138,143,145,146,147,150,151,152,153,155,156,157,159,161,163,165],B,{52:95,53:97,51:99,24:100,28:j,29:P,39:Be,43:Y,58:G}),{28:j,51:103,52:95,53:97},e(We,[2,87]),e(We,[2,88]),e(We,[2,89]),e(We,[2,90]),e(We,[2,91]),e(We,[2,92]),e(We,[2,93]),e(We,[2,94]),e(We,[2,95]),e(We,[2,96]),{58:[1,239]},{58:[1,240]},{58:[1,241]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:163,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:165,25:164,26:23,27:24,28:h,31:242,32:pe,46:20,47:u,48:d,49:m,50:156,58:E,62:166,63:59,64:we,65:135,66:Te,67:137,68:153,69:155,70:157,71:14,72:15,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,119]),{5:qe},{58:[1,244]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:245,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:[1,246]},{5:[1,247]},{5:[1,248],8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:249,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:250,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{62:251,64:R},{5:[1,252]},{28:j,52:253,53:97},{41:[1,254]},{15:258,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:260,25:259,26:23,27:24,28:h,59:255,60:[1,256],61:257},e($,[2,158]),e(D,[2,21]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:261,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{1:[2,1]},{109:[1,262]},e(J,[2,209],{161:Q}),e(F,[2,214]),e(F,[2,215]),{41:[1,263]},{32:Xe,60:[1,264]},e(H,[2,162]),e(Ke,[2,148]),{28:[1,266]},e(q,[2,207],{159:X}),e(Z,[2,205],{155:ee,156:te,157:ie}),e(W,[2,160],{58:[1,267]}),{41:[1,268]},e(se,[2,201],{150:re,151:ne,152:ae,153:oe}),e(se,[2,202],{150:re,151:ne,152:ae,153:oe}),e(se,[2,203],{150:re,151:ne,152:ae,153:oe}),e(H,[2,143],{26:23,27:24,127:46,128:47,116:49,117:50,118:52,8:53,119:55,120:56,63:59,129:78,140:80,130:81,131:82,25:144,121:145,139:269,9:f,10:y,11:b,12:_,13:w,14:T,28:h,58:E,64:A,122:S,141:O}),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:270,135:71,136:72,137:L,138:v,139:75,140:80,141:O},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,139:271,140:80,141:O},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:201,41:Ue,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(le,[2,196],{137:ce,138:he}),e(le,[2,197],{137:ce,138:he}),e(le,[2,198],{137:ce,138:he}),e(le,[2,199],{137:ce,138:he}),e(K,[2,152],{126:272,39:ze}),e(H,[2,155]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:273,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(K,[2,153],{126:272,39:ze}),{60:[1,274]},e(ue,[2,193],{145:de,146:me,147:ge}),e(ue,[2,194],{145:de,146:me,147:ge}),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:138,58:E,63:59,64:A,66:[1,275],67:276,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(K,[2,64]),e(K,[2,65]),e(fe,[2,189],{143:ye}),e(fe,[2,190],{143:ye}),e(fe,[2,191],{143:ye}),e(be,[2,187]),{5:[1,277]},{15:280,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:282,25:281,26:23,27:24,28:h,40:278,42:279},e(Je,[2,69]),e(Qe,[2,72]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:283,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:284,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:[1,286],8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:163,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:165,25:164,26:23,27:24,28:h,31:290,58:E,63:59,64:A,71:288,92:285,94:287,95:289,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(Ye,Ge,{5:qe}),e(We,[2,120]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:291,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{90:[1,292]},e(We,[2,136]),e(We,[2,137]),e(We,[2,138]),{5:[1,293]},{5:[1,294]},{98:295,99:296,100:Ze},e(Ie,[2,75]),e(Me,[2,46]),e($,[2,159]),{32:[1,299],60:[1,298]},e(xe,[2,55]),e(Ke,[2,56]),{24:93,28:j,39:x,53:300},{24:100,28:j,29:P,39:x,53:301},{28:j,53:302},{5:[2,81]},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:144,26:23,27:24,28:h,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:145,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:303},e(W,[2,165]),e(H,[2,161]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:304,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,124:[1,305],127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(Ke,[2,149]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:204,58:E,60:[1,306],63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,123:307,124:Ve,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(W,[2,166]),e(be,[2,181]),e(be,[2,180]),e(be,[2,182]),e(H,[2,156]),{41:[1,308]},e(H,[2,147]),e(K,[2,63]),e(Ye,[2,67]),e(N,[2,28]),{32:[1,310],41:[1,309]},e(et,[2,30]),{24:93,28:[1,311],39:x},{24:100,28:[1,312],29:P,39:x},{28:[1,313]},{60:[1,314]},{60:[1,315]},{5:[1,316]},{5:[1,318],8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:317,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:[2,108],32:tt},{43:[1,320]},e(it,[2,111]),e(it,[2,118]),{60:[1,321]},{58:[1,322]},e(We,[2,139]),e(We,[2,113]),e(We,[2,114],{99:323,100:Ze}),e(st,[2,115]),{58:[1,324]},e(xe,[2,54]),{15:258,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:260,25:259,26:23,27:24,28:h,61:325},e(Ke,[2,58]),e(Ke,[2,59]),e(Ke,[2,60]),e(F,[2,211]),e(Ke,[2,150]),{28:[1,326]},e(H,[2,163]),{32:Xe,60:[1,327]},e(H,[2,157]),{5:[2,29]},{15:280,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:282,25:281,26:23,27:24,28:h,42:328},e(et,[2,32],{43:[1,329]}),e(et,[2,33],{43:[1,330]}),e(et,[2,34],{43:[1,331]}),{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:332,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:333,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:[1,335],8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:334,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:[1,336]},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:290,58:E,60:[1,338],63:59,64:A,93:337,94:339,95:289,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:290,58:E,63:59,64:A,95:340,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:341,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{64:[1,343],102:342},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:344,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(st,[2,116]),{15:258,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:260,25:259,26:23,27:24,28:h,61:345},e(Ke,[2,57]),e(Ke,[2,151]),e(H,[2,164]),e(et,[2,31]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:346,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:347,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:348,58:E,63:59,64:A,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(Qe,[2,97],{89:[1,349]}),e(We,[2,99]),{5:[1,350]},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:290,58:E,60:[1,352],63:59,64:A,93:351,94:339,95:289,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:290,58:E,60:[1,354],63:59,64:A,93:353,94:339,95:289,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{60:[1,355]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:356,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{32:tt,60:[2,110]},e(it,[2,112]),{5:[2,109]},e(We,[2,121]),{66:[1,359],103:357,104:358,105:360,106:361,107:rt,110:nt},{60:[1,364]},{60:[1,365]},e(et,[2,35]),e(et,[2,36]),e(et,[2,37]),{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:366,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:290,58:E,60:[1,368],63:59,64:A,93:367,94:339,95:289,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{60:[1,369]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:370,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{60:[1,371]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:372,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:373,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,107]),{66:[1,375],104:374,105:376,106:361,107:rt,110:nt},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:163,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:165,25:164,26:23,27:24,28:h,31:181,46:20,47:u,48:d,49:m,50:156,58:E,62:166,63:59,64:we,66:[1,377],68:379,69:155,70:157,71:14,72:15,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,106:378,107:rt,110:nt,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,125]),e(at,[2,126]),e(Qe,[2,129]),{8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:381,58:E,63:59,64:A,108:380,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{109:[1,382]},{5:[1,383]},{62:384,64:R},e(We,[2,98]),{60:[1,385]},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:386,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:387,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,106]),{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:388,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,105]),e(We,[2,103]),{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,15:163,16:21,17:i,18:28,19:29,20:s,21:l,22:c,23:165,25:164,26:23,27:24,28:h,31:181,46:20,47:u,48:d,49:m,50:156,58:E,62:166,63:59,64:we,66:[1,389],68:379,69:155,70:157,71:14,72:15,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,106:378,107:rt,110:nt,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,123]),e(at,[2,127]),e(We,[2,124]),e(Qe,[2,130]),e(at,[2,128],{71:14,72:15,46:20,16:21,26:23,27:24,18:28,19:29,166:39,164:40,167:41,162:42,121:43,160:45,127:46,128:47,158:48,116:49,117:50,154:51,118:52,8:53,119:55,120:56,149:57,63:59,148:66,144:68,142:69,134:70,135:71,136:72,139:75,129:78,140:80,130:81,131:82,50:156,70:157,74:158,75:159,76:160,77:161,78:162,15:163,25:164,23:165,62:166,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,31:181,69:238,5:_e,9:f,10:y,11:b,12:_,13:w,14:T,17:i,20:s,21:l,22:c,28:h,47:u,48:d,49:m,58:E,64:we,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,122:S,132:C,133:k,137:L,138:v,141:O}),{109:[1,390]},{109:[2,220]},e(Qe,[2,132]),e(We,[2,133]),e(st,[2,117]),{5:_e,8:53,9:f,10:y,11:b,12:_,13:w,14:T,25:44,26:23,27:24,28:h,31:181,58:E,62:166,63:59,64:we,70:391,74:158,75:159,76:160,77:161,78:162,79:167,80:168,81:169,82:170,83:171,84:172,85:173,86:174,87:175,88:Ee,90:Ae,91:Se,96:Ce,97:ke,101:Le,111:ve,113:Oe,114:Ne,115:Re,116:49,117:50,118:52,119:55,120:56,121:43,122:S,127:46,128:47,129:78,130:81,131:82,132:C,133:k,134:70,135:71,136:72,137:L,138:v,139:75,140:80,141:O,142:69,144:68,148:66,149:57,154:51,158:48,160:45,162:42,164:40,166:39,167:41},e(We,[2,104]),e(We,[2,102]),e(We,[2,101]),e(We,[2,122]),e(Qe,[2,131]),e(We,[2,100])],defaultActions:{25:[2,41],26:[2,42],27:[2,43],36:[2,2],196:[2,1],261:[2,81],309:[2,29],341:[2,109],381:[2,220]},parseError:function(e,t){if(!t.recoverable){function i(e,t){this.message=e,this.hash=t}throw i.prototype=Error,new i(e,t)}this.trace(e)},parse:function(e){var t=this,i=[0],s=[null],r=[],n=this.table,a="",o=0,l=0,c=0,h=2,p=1,u=r.slice.call(arguments,1),d=Object.create(this.lexer),m={yy:{}};for(var g in this.yy)Object.prototype.hasOwnProperty.call(this.yy,g)&&(m.yy[g]=this.yy[g]);d.setInput(e,m.yy),m.yy.lexer=d,m.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var f=d.yylloc;r.push(f);var y=d.options&&d.options.ranges;"function"==typeof m.yy.parseError?this.parseError=m.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var b,_,w,T,E,A,S,C,k,L=function(){var e;return"number"!=typeof(e=d.lex()||p)&&(e=t.symbols_[e]||e),e},v={};;){if(w=i[i.length-1],this.defaultActions[w]?T=this.defaultActions[w]:(null==b&&(b=L()),T=n[w]&&n[w][b]),void 0===T||!T.length||!T[0]){var O="";for(A in k=[],n[w])this.terminals_[A]&&A>h&&k.push("'"+this.terminals_[A]+"'");O=d.showPosition?"Parse error on line "+(o+1)+":\n"+d.showPosition()+"\nExpecting "+k.join(", ")+", got '"+(this.terminals_[b]||b)+"'":"Parse error on line "+(o+1)+": Unexpected "+(b==p?"end of input":"'"+(this.terminals_[b]||b)+"'"),this.parseError(O,{text:d.match,token:this.terminals_[b]||b,line:d.yylineno,loc:f,expected:k})}if(T[0]instanceof Array&&T.length>1)throw new Error("Parse Error: multiple actions possible at state: "+w+", token: "+b);switch(T[0]){case 1:i.push(b),s.push(d.yytext),r.push(d.yylloc),i.push(T[1]),b=null,_?(b=_,_=null):(l=d.yyleng,a=d.yytext,o=d.yylineno,f=d.yylloc,c>0&&c--);break;case 2:if(S=this.productions_[T[1]][1],v.$=s[s.length-S],v._$={first_line:r[r.length-(S||1)].first_line,last_line:r[r.length-1].last_line,first_column:r[r.length-(S||1)].first_column,last_column:r[r.length-1].last_column},y&&(v._$.range=[r[r.length-(S||1)].range[0],r[r.length-1].range[1]]),void 0!==(E=this.performAction.apply(v,[a,l,o,m.yy,T[1],s,r].concat(u))))return E;S&&(i=i.slice(0,-1*S*2),s=s.slice(0,-1*S),r=r.slice(0,-1*S)),i.push(this.productions_[T[1]][0]),s.push(v.$),r.push(v._$),C=n[i[i.length-2]][i[i.length-1]],i.push(C);break;case 3:return!0}}return!0}},lt={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,i=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var s=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),i.length-1&&(this.yylineno-=i.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:i?(i.length===s.length?this.yylloc.first_column:0)+s[s.length-i.length].length-i[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var i,s,r;if(this.options.backtrack_lexer&&(r={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(r.yylloc.range=this.yylloc.range.slice(0))),(s=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=s.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:s?s[s.length-1].length-s[s.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],i=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),i)return i;if(this._backtrack){for(var n in r)this[n]=r[n];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,i,s;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var r=this._currentRules(),n=0;n<r.length;n++)if((i=this._input.match(this.rules[r[n]]))&&(!t||i[0].length>t[0].length)){if(t=i,s=n,this.options.backtrack_lexer){if(!1!==(e=this.test_match(i,r[n])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,r[s]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return e||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{"case-insensitive":!0},performAction:function(e,t,i,s){switch(i){case 0:break;case 1:this.begin("comment");break;case 2:this.popState();break;case 3:case 4:break;case 5:return 73;case 6:return 64;case 7:return 66;case 8:return 58;case 9:return 60;case 10:return 39;case 11:return 41;case 12:return 32;case 13:return 165;case 14:return 109;case 15:return 5;case 16:return 124;case 17:return 47;case 18:return 49;case 19:return 48;case 20:return 57;case 21:return 30;case 22:return 88;case 23:return 89;case 24:return 90;case 25:return 111;case 26:return 91;case 27:return 113;case 28:return 114;case 29:return 101;case 30:return 107;case 31:return 110;case 32:return 97;case 33:return 100;case 34:return 96;case 35:case 36:return 11;case 37:return 36;case 38:return 37;case 39:return 122;case 40:return 115;case 41:return 17;case 42:return 20;case 43:return 22;case 44:return 21;case 45:return 152;case 46:return 150;case 47:return 156;case 48:return 155;case 49:return 153;case 50:return 151;case 51:return 157;case 52:return 163;case 53:return 143;case 54:return 159;case 55:return 161;case 56:return 141;case 57:return 43;case 58:return 132;case 59:return 137;case 60:return 133;case 61:return 138;case 62:return 145;case 63:return 146;case 64:return 147;case 65:return 29;case 66:return 14;case 67:return 28;case 68:return 10;case 69:return 9;case 70:return 13;case 71:case 72:return 12;case 73:return 7;case 74:return"INVALID"}},rules:[/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?::=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:global\b)/i,/^(?:void\b)/i,/^(?:import\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:return\b)/i,/^(?:boolean\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:===)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\.)/i,/^(?:null\b)/i,/^(?:[_a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))+))/i,/^(?:((0|([1-9])([0-9])*)))/i,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/i,/^(?:[']['])/i,/^(?:['][^\n]['])/i,/^(?:$)/i,/^(?:.)/i],conditions:{comment:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],inclusive:!0},INITIAL:{rules:[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],inclusive:!0}}};function ct(){this.yy={}}return ot.lexer=lt,ct.prototype=ot,ot.Parser=ct,new ct}();"undefined"!=typeof exports&&(exports.parser=l,exports.Parser=l.Parser,exports.parse=function(){return l.parse.apply(l,arguments)},exports.main=function(t){t[1]||(console.log("Usage: "+t[0]+" FILE"),e.exit(1))},i.c[i.s]===s&&exports.main(e.argv.slice(1)))}).call(this,i(59),i(60)(e))},,function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(56);const r=class{constructor(e,t,i,r){this.type=s.a.types[e.toString().toLowerCase()],this.name=e.toString().toLowerCase(),void 0===this.type&&console.log(e),this.value=t,this.line=i,this.column=r,this.children=[],this.next=null,this.last=null,this.parent=null,this.isFalse=!1,this.isLeader=!1;for(let e=4;e<arguments.length;e++)this.children.push(arguments[e]),arguments[e].parent=this}markLeader(){this.isLeader=!0}getValue(){return this.value}addChild(...e){e.forEach(e=>{this.children.push(e),e.parent=this})}getChild(e){return e>this.children.length?null:this.children[e]}getLine(){return this.line}setValue(e){this.value=e}setNext(e){let t=this;for(;null!=t.next;)t=t.next;t.next=e,null!==e&&(e.last=t)}changeType(e){this.type=s.a.types[e],this.name=e}printTree(e=""){console.log(`${e}#${s.a.names[this.type]} (${this.type})`),this.children.forEach(t=>{t.printTree(e+"\t")}),this.next&&this.next.printTree(e)}toString(){switch(this.type){case s.a.types.stack:return`Stack[${this.getChild(0).toString()}]`;case s.a.types.heap:return`Heap[${this.getChild(0).toString()}]`;case s.a.types["-"]:case s.a.types["*"]:case s.a.types["/"]:case s.a.types["+"]:case s.a.types["%"]:return`${this.getChild(0).toString()} ${s.a.names[this.type]} ${this.getChild(1).toString()}`;case s.a.types.tmp:case s.a.types.number:return this.value;case s.a.types.sp:return"P";case s.a.types.hp:return"H";case s.a.types.var:return this.getChild(0).type===s.a.types.heap?"var Heap[];\n":this.getChild(0).type===s.a.types.stack?"var Stack[];\n":this.children.length>1?`var ${this.children.map(e=>e.toString()).join(",")};\n`:`var ${this.getChild(0).toString()};\n`;case s.a.types.print:return`print (${this.value}, ${this.getChild(0).toString()});\n`;case s.a.types.label:return this.value+":\n";case s.a.types.goto:return`goto ${this.value};\n`;case s.a.types["<"]:case s.a.types[">"]:case s.a.types[">="]:case s.a.types["<="]:case s.a.types["<>"]:case s.a.types["=="]:return`if (${this.getChild(0).toString()}${this.isFalse?this.negate():s.a.names[this.type]}${this.getChild(1).toString()}) goto ${this.value};\n`;case s.a.types["="]:return`${this.getChild(0).toString()} = ${this.getChild(1).toString()};\n`;case s.a.types.call:return this.value+"();\n";case s.a.types.method:{let e="",t=this.getChild(0);for(;null!==t;)e+=t.toString(),t=t.next;return`void ${this.value} {\n${e}return;\n}\n`}case s.a.types.e:return"E";default:return""}}copy(){const e=new r(this.name,this.value,this.line,this.column);e.name=this.name,e.type=this.type,e.isFalse=this.isFalse,e.isLeader=this.isLeader;for(const t of this.children)e.addChild(t.copy());return e}childrenSize(){return this.children.length}equals(e){return e.name===this.name&&e.type===this.type&&this.value===e.value&&e.column===this.column&&e.line===this.line}getNonNumericTypes(){switch(this.type){case s.a.types.hp:return["H"];case s.a.types.sp:return["P"];case s.a.types.tmp:return[this.getValue()];case s.a.types["-"]:case s.a.types["*"]:case s.a.types["/"]:case s.a.types["+"]:case s.a.types["%"]:{const e=[];return this.getChild(0).getType()!==s.a.types.number&&e.push(this.getChild(0).getValue()),this.getChild(1).getType()!==s.a.types.number&&e.push(this.getChild(1).getValue()),e}default:return[]}}typeEquality(e){if(e.childrenSize()!==this.childrenSize)return!1;if(this.getType()===e.getType()&&this.getValue()===e.getValue()){for(let t=0;t<e.childrenSize();t++)if(!this.getChild(t).typeEquality(e))return!1;return!0}return!1}getType(){return this.type}toStringSpecial(){switch(this.type){case s.a.types.var:return"var lista temporales;";case s.a.types[">"]:return`if (${this.getChild(0).toString()} GT ${this.getChild(1).toString()}) goto ${this.value}`;case s.a.types[">="]:return`if (${this.getChild(0).toString()} GTE ${this.getChild(1).toString()}) goto ${this.value}`;case s.a.types["<"]:return`if (${this.getChild(0).toString()} LT ${this.getChild(1).toString()}) goto ${this.value}`;case s.a.types["<="]:return`if (${this.getChild(0).toString()} LTE ${this.getChild(1).toString()}) goto ${this.value}`;case s.a.types["=="]:return`if (${this.getChild(0).toString()} EQEQ ${this.getChild(1).toString()}) goto ${this.value}`;case s.a.types["<>"]:return`if (${this.getChild(0).toString()} NOTEQ ${this.getChild(1).toString()}) goto ${this.value}`;default:return this.toString()}}negate(){switch(this.type){case s.a.types[">"]:return"<=";case s.a.types[">="]:return"<";case s.a.types["<="]:return">";case s.a.types["<"]:return">=";case s.a.types["<>"]:return"==";default:return"<>"}}hasZero(){return this.getChild(0).getType()===s.a.types.number&&0===this.getChild(0).value?0:this.getChild(1).getType()===s.a.types.number&&0===this.getChild(1).value?1:-1}hasTwo(){return this.getChild(0).getType()===s.a.types.number&&2===this.getChild(0).value?0:this.getChild(1).getType()===s.a.types.number&&2===this.getChild(1).value?1:-1}hasOne(){return this.getChild(0).getType()===s.a.types.number&&1===this.getChild(0).value?0:this.getChild(1).getType()===s.a.types.number&&1===this.getChild(1).value?1:-1}deleteAt(e){return this.children.splice(e,1)}converToFalse(){this.isFalse=!0}isConstantOperation(){return this.getChild(0).getType()===s.a.types.number&&this.getChild(1).getType()===s.a.types.number}trimMethodList(){null!=this.getChild(0).next&&(this.getChild(0).next.last=null,this.children[0]=this.getChild(0).next);let e=this.getChild(0);for(;null!=e.next;)e=e.next;e.last.next=e.next}usesTmp(e){switch(this.getChild(0)){case s.a.types.heap:case s.a.types.stack:if(this.getChild(0).getChild(0).getType()===s.a.types.tmp&&this.getChild(0).getChild(0).getValue()===e)return!0;break;case s.a.types.tmp:case s.a.types.sp:case s.a.types.hp:switch(this.getChild(1)){case s.a.types["-"]:case s.a.types["*"]:case s.a.types["/"]:case s.a.types["+"]:case s.a.types["%"]:if(this.getChild(1).getChild(0).getType()===s.a.types.tmp&&this.getChild(1).getChild(0).getValue()===e)return!0;if(this.getChild(1).getChild(1).getType()===s.a.types.tmp&&this.getChild(1).getChild(1).getValue()===e)return!0;break;case s.a.types.tmp:if(this.getChild(1).getValue()===e)return!0}}return!1}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(55);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s),this.parentesis=!1}ejecutar(){switch(this.token){case"MAS":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar(),i=this.comprobarOperacion(e,t,"MAS");return i}case"MENOS":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"MENOS")}case"POR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"POR")}case"DIV":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"DIV")}case"POTENCIA":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"POTENCIA")}case"MODULO":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"MODULO")}case"NEGADO":{let e=this.hijos[0].ejecutar();return this.comprobarOperacion(e,e,"NEGADO")}case"NUMERICO":return Number(this.texto);case"STRING":return String(this.texto);case"BOOLEAN":return"true"==this.texto.toLowerCase();case"NULL":return null;case"UNDEFINED":return;default:return 0}}traducir(){if(this.parentesis)switch(this.token){case"MAS":return"("+this.hijos[0].traducir()+" + "+this.hijos[1].traducir()+")";case"MENOS":return"("+this.hijos[0].traducir()+" - "+this.hijos[1].traducir()+")";case"POR":return"("+this.hijos[0].traducir()+" * "+this.hijos[1].traducir()+")";case"DIV":return"("+this.hijos[0].traducir()+" / "+this.hijos[1].traducir()+")";case"POTENCIA":return"("+this.hijos[0].traducir()+" ^^ "+this.hijos[1].traducir()+")";case"MODULO":return"("+this.hijos[0].traducir()+" % "+this.hijos[1].traducir()+")";case"NEGADO":return"(-"+this.hijos[0].traducir()+")";case"NUMERICO":return"("+this.texto+")";case"NUMERICOE":return"("+this.texto+".0)";case"STRING":return'("'+this.texto+'")';case"BOOLEAN":return"true"==this.texto.toLowerCase()?"(true)":"(false)";case"NULL":return"(null)";case"UNDEFINED":return"(undefined)";default:return""}switch(this.token){case"MAS":return this.hijos[0].traducir()+" + "+this.hijos[1].traducir();case"MENOS":return this.hijos[0].traducir()+" - "+this.hijos[1].traducir();case"POR":return this.hijos[0].traducir()+" * "+this.hijos[1].traducir();case"DIV":return this.hijos[0].traducir()+" / "+this.hijos[1].traducir();case"POTENCIA":return this.hijos[0].traducir()+" ^^ "+this.hijos[1].traducir();case"MODULO":return this.hijos[0].traducir()+" % "+this.hijos[1].traducir();case"NEGADO":return"-"+this.hijos[0].traducir();case"NUMERICO":return this.texto;case"NUMERICOE":return this.texto+".0";case"STRING":return'"'+(this.texto?this.texto.replaceAll("\n","\\n").replaceAll("\t","\\t").replaceAll('"','\\"'):"")+'"';case"BOOLEAN":return"true"==this.texto.toLowerCase()?"true":"false";case"NULL":return"null";case"UNDEFINED":return"undefined";default:return""}}comprobarOperacion(e,t,i){switch(i){case"MAS":if("number"==typeof e&&"number"==typeof t)return Number(e+t);if("number"==typeof e&&"string"==typeof t)return String(e+t);if("string"==typeof e&&"number"==typeof t)return String(e+t);if("string"==typeof e&&"string"==typeof t)return String(e+t);if("string"==typeof e&&"boolean"==typeof t)return String(e+t);if("boolean"==typeof e&&"string"==typeof t)return String(e+t);break;case"MENOS":return"number"==typeof e&&"number"==typeof t?Number(e-t):null;case"POR":if("number"==typeof e&&"number"==typeof t)return Number(e*t);break;case"DIV":if("number"==typeof e&&"number"==typeof t)return Number(e/t);break;case"POTENCIA":if("number"==typeof e&&"number"==typeof t)return Number(e**t);break;case"MODULO":if("number"==typeof e&&"number"==typeof t)return Number(e%t);break;case"NEGADO":if("number"==typeof e&&"number"==typeof t)return-1*Number(e);break;default:return 0}return window.errores.push(new r.a("Semantico","No se pude operar ("+this.texto+") con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),0}copyWithChildren(){const e=new n(this.token,this.texto,this.location,[]);return this.hijos.forEach(t=>e.addChild(t.copyWithChildren())),e}addChild(...e){e.forEach(e=>{this.hijos.push(e)})}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s=class{constructor(e,t,i){this.nombre=e,this.tipo=t,this.dimensiones=i}esIgual(e,t){return this.nombre==e&&this.tipo==t}}},,function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(61);const r=class{constructor(e){this.listaFunciones=[],this.listaVariables=[],this.listaVariables.push([]),this.nombre=e,this.esAnidada=!1}setAnidada(e){this.esAnidada=e}buscarFuncionDecla(e,t,i,s){for(let r=0;r<this.listaFunciones.length;r++)if(this.listaFunciones[r].igualdadDecla(e,t,i,s))return this.listaFunciones[r];return null}buscarFuncionLlamada(e,t,i){for(let s=0;s<this.listaFunciones.length;s++)if(this.listaFunciones[s].igualdadLlamada(e,t,i))return this.listaFunciones[s];return null}meterFuncion(e,t,i,s,r){this.listaFunciones.push(new class{constructor(e,t,i,s,r){this.nombre=e,this.params=t,this.tipo=i,this.sentencias=s,this.dims=r,this.esAnidada=window.esAnidada}igualdadDecla(e,t,i,s){if(this.nombre!=e)return!1;if(this.tipo!=i)return!1;if(this.dims!=s)return!1;if(this.params.length!=t.length)return!1;for(let e=0;e<this.params.length;e++)if(this.params[e].nombre!=t[e].nombre||this.params[e].tipo!=t[e].tipo||this.params[e].dimensiones!=t[e].dims)return!1}igualdadLlamada(e,t,i){return this.nombre==e&&this.params.length==t.length}igualdadLlamadaSeria(e,t,i){if(this.nombre!=e)return!1;if(this.params.length!=t.length)return!1;for(let e=0;e<this.params.length;e++)if(this.params[e].tipo!=t[e]||this.params[e].dimensiones!=i[e])return!1;return!0}}(e,t,i,s,r))}getVarLength(){let e=0;for(let t=this.listaVariables.length-1;t>=0;t--)e+=this.listaVariables[t].length;return e}buscarVariable(e,t,i,s){let r;for(let n=this.listaVariables.length-1;n>=0;n--)for(let a=this.listaVariables[n].length-1;a>=0;a--)if(r=this.listaVariables[n][a].buscarVariable(e,t,i,s),null!=r)return r;return null}buscarVariableSoloNombre(e){let t;for(let i=this.listaVariables.length-1;i>=0;i--)for(let s=this.listaVariables[i].length-1;s>=0;s--)if(t=this.listaVariables[i][s].buscarVariableSoloNombre(e),null!=t)return t;return null}meterVariable(e,t,i,r,n,a,o){this.listaVariables[this.listaVariables.length-1].push(new s.a(e,t,i,r,n,a,o))}meterAmbitoSuave(){this.listaVariables.push([])}sacarAmbitoSuave(){this.listaVariables.pop()}graficarTabla(){let e="";for(let t=0;t<=this.listaVariables.length-1;t++)for(let i=0;i<=this.listaVariables[t].length-1;i++)e+="|  "+this.anadirEspacios(this.listaVariables[t][i].cambio)+"  |  "+this.anadirEspacios(this.listaVariables[t][i].nombre)+"  |  "+this.anadirEspacios(this.nombre)+"  |  "+this.anadirEspacios(this.listaVariables[t][i].tipo)+"  |  "+this.anadirEspacios(this.listaVariables[t][i].dimensiones+"")+"  |  "+this.anadirEspacios(this.listaVariables[t][i].rol)+"  |\n";return e}anadirEspacios(e){if(e.length>11)return e.substring(0,8)+"...";let t=e.substring(0,11),i=11-t.length;for(let e=0;e<i;e++)t+=" ";return t}graficarTabla2(){let e=[];for(let t=0;t<=this.listaVariables.length-1;t++)for(let i=0;i<=this.listaVariables[t].length-1;i++)e.push({cambio:this.anadirEspacios(this.listaVariables[t][i].cambio),nombre:this.anadirEspacios(this.listaVariables[t][i].nombre),ambito:this.anadirEspacios(this.nombre),tipo:this.anadirEspacios(this.listaVariables[t][i].tipo),dimensiones:this.anadirEspacios(this.listaVariables[t][i].dimensiones+""),rol:this.anadirEspacios(this.listaVariables[t][i].rol)});return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(55);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e,t=this.hijos[0].texto,i="",s="",n="",a=0;this.hijos[1].hijos.forEach(o=>{switch(o.token){case"DECLAARR1":if(i=o.hijos[0].texto,s=o.hijos[1].texto,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(e=o.hijos[3].ejecutar(),a=o.hijos[2].hijos,e.length>0&&!this.comprobarCoincidenciaTipos(s,e))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero se le esta asignando un tipo ("+typeof e+"). No se declaro.",o.location.last_line,o.location.last_column));if(n="array",!window.tablaSimbolos.meterVariable(t,i,e,s,n,a,1))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAARR2":if(i=o.hijos[0].texto,"const"==t)return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",o.location.last_line,o.location.last_column));if(s=o.hijos[1].texto,e=void 0,n="array",a=o.hijos[2].hijos,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(!window.tablaSimbolos.meterVariable(t,i,e,s,n,a,2))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR1":if(i=o.hijos[0].texto,s=o.hijos[1].texto,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(e=o.hijos[2].ejecutar(),a=this.getDimensiones(e),!this.comprobarCoincidenciaTipos(s,e))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero se le esta asignando un tipo ("+typeof e+"). No se declaro.",o.location.last_line,o.location.last_column));if(n=this.getRol(e),!window.tablaSimbolos.meterVariable(t,i,e,s,n,a,1))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR2":if(i=o.hijos[0].texto,e=o.hijos[1].ejecutar(),s=this.getTipo(e),n=this.getRol(e),a=this.getDimensiones(e),!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(!window.tablaSimbolos.meterVariable(t,i,e,s,n,a,1))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR3":if(i=o.hijos[0].texto,"const"==t)return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",o.location.last_line,o.location.last_column));if(s=o.hijos[1].texto,e=void 0,n="undefined",a=0,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(!window.tablaSimbolos.meterVariable(t,i,e,s,n,a,2))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR4":if(i=o.hijos[0].texto,"const"==t)return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",o.location.last_line,o.location.last_column));if(e=void 0,s="undefined",n="undefined",a=0,!window.tablaSimbolos.meterVariable(t,i,e,s,n,a,3))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column))}})}ejecutarChafa(){let e,t=this.hijos[0].texto,i="",s="",n="",a=0;this.hijos[1].hijos.forEach(o=>{switch(o.token){case"DECLAARR1":if(i=o.hijos[0].texto,s=o.hijos[1].texto,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(e=o.hijos[3].ejecutar(),a=o.hijos[2].hijos,e.length>0&&!this.comprobarCoincidenciaTipos(s,e))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero se le esta asignando un tipo ("+typeof e+"). No se declaro.",o.location.last_line,o.location.last_column));if(n="array",!window.tablaSimbolos.meterVariableChafa(t,i,e,s,n,a,1))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAARR2":if(i=o.hijos[0].texto,"const"==t)return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",o.location.last_line,o.location.last_column));if(s=o.hijos[1].texto,e=void 0,n="array",a=o.hijos[2].hijos,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(!window.tablaSimbolos.meterVariableChafa(t,i,e,s,n,a,2))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR1":if(i=o.hijos[0].texto,s=o.hijos[1].texto,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(e=o.hijos[2].ejecutar(),a=this.getDimensiones(e),!this.comprobarCoincidenciaTipos(s,e))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero se le esta asignando un tipo ("+typeof e+"). No se declaro.",o.location.last_line,o.location.last_column));if(n=this.getRol(e),!window.tablaSimbolos.meterVariableChafa(t,i,e,s,n,a,1))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR2":if(i=o.hijos[0].texto,e=o.hijos[1].ejecutar(),s=this.getTipo(e),n=this.getRol(e),a=this.getDimensiones(e),!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(!window.tablaSimbolos.meterVariableChafa(t,i,e,s,n,a,1))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR3":if(i=o.hijos[0].texto,"const"==t)return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",o.location.last_line,o.location.last_column));if(s=o.hijos[1].texto,e=void 0,n="undefined",a=0,!this.validarTipo(s))return void window.errores.push(new r.a("Semantico","La variable <<"+i+">> se declara con tipo ("+s+") pero ese tipo no existe.",o.location.last_line,o.location.last_column));if(!window.tablaSimbolos.meterVariableChafa(t,i,e,s,n,a,2))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column));break;case"DECLAVAR4":if(i=o.hijos[0].texto,"const"==t)return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",o.location.last_line,o.location.last_column));if(e=void 0,s="undefined",n="undefined",a=0,!window.tablaSimbolos.meterVariableChafa(t,i,e,s,n,a,3))return void window.errores.push(new r.a("Semantico","No pudo declararse variable <<"+i+">>.",o.location.last_line,o.location.last_column))}})}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}comprobarCoincidenciaTipos(e,t){if(null==t||null==t)return!0;if("null"==e||"undefined"==e)return!0;if("number"==e&&"number"==typeof t)return!0;if("string"==e&&"string"==typeof t)return!0;if("boolean"==e&&"boolean"==typeof t)return!0;if("object"==typeof t){if("Array"==t.constructor.name){let i=t;for(;"Array"==i.constructor.name;){let e=Array.from(i.keys());if(0==e.length)return!0;i=i[e[0]]}return this.comprobarCoincidenciaTipos(e,i)}if("Objeto"==t.constructor.name)return t.comprobarElTipo(e)}return!1}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||null==e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}validarTipo(e){if("number"==e)return!0;if("string"==e)return!0;if("boolean"==e)return!0;if("undefined"==e)return!0;if("null"==e)return!0;return!!window.tablaObjetos.buscarObjeto(e)}traducir(){if(window.primeraPasada)return"";let e="";for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t];switch(i.token){case"DECLAARR1":let t="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto;e+=t;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";e+=" "+i.hijos[0].texto,"EXPARRAYNEW"==i.hijos[3].token?e+=" = "+i.hijos[3].traducir(t)+";":e+=" = "+i.hijos[3].traducir()+";";break;case"DECLAARR2":e+=i.hijos[0].texto+" : "+i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";break;case"DECLAVAR1":e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" "+i.hijos[0].texto+" = ",e+=i.hijos[2].traducir()+";";break;case"DECLAVAR2":e+="var "+i.hijos[0].texto,e+=" := "+i.hijos[1].traducir()+";";break;case"DECLAVAR3":e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" ",e+=i.hijos[0].texto+";";break;case"DECLAVAR4":e+="var "+i.hijos[0].texto+";"}t<this.hijos[1].hijos.length-1&&(e+="\n")}return e}traducirFOR(){if(window.primeraPasada)return"";let e="";for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t];switch(i.token){case"DECLAARR1":let t="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto;e+=t;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";e+=" "+i.hijos[0].texto,"EXPARRAYNEW"==i.hijos[1].token?e+=" = "+i.hijos[3].traducir(t)+";":e+=" = "+i.hijos[3].traducir()+";";break;case"DECLAARR2":e+=i.hijos[0].texto+" : "+i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";break;case"DECLAVAR1":e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" "+i.hijos[0].texto+" = ",e+=i.hijos[2].traducir()+";";break;case"DECLAVAR2":e+="double "+i.hijos[0].texto,e+=" = "+i.hijos[1].traducir()+";";break;case"DECLAVAR3":e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" ",e+=i.hijos[0].texto+";";break;case"DECLAVAR4":e+="double "+i.hijos[0].texto+";"}t<this.hijos[1].hijos.length-1&&(e+="\n")}return e}declasGlobales(){let e="";for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t];switch(i.token){case"DECLAARR1":let t="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto;e+=t;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";e+=" "+i.hijos[0].texto,"EXPARRAYNEW"==i.hijos[1].token?e+=" = "+i.hijos[3].traducir(t)+";":e+=" = "+i.hijos[3].traducir()+";";break;case"DECLAARR2":e+=i.hijos[0].texto+" : "+i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";break;case"DECLAVAR1":e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" "+i.hijos[0].texto+" = ",e+=i.hijos[2].traducir()+";";break;case"DECLAVAR2":e+="var "+i.hijos[0].texto,e+=" := "+i.hijos[1].traducir()+";";break;case"DECLAVAR3":e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" ",e+=i.hijos[0].texto+";";break;case"DECLAVAR4":e+="var "+i.hijos[0].texto+";"}t<this.hijos[1].hijos.length-1&&(e+="\n")}return e}}},,function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(53),r=i(63);const n=class{constructor(e,t,i,n){this.grouped=!1,this.type_name=e,this.file=r.a.CurrentFile[r.a.CurrentFile.length-1],this.type=s.a.types[e.toString().toUpperCase()],void 0===this.type&&console.log(e,i,n),this.value=this.type===s.a.types.IDENTIFIER?t.toLowerCase():t,this.line=i,this.column=n,this.children=[],this.last=null,this.parent=null;for(let e=4;e<arguments.length;e++)this.children.push(arguments[e]),arguments[e].parent=this}getLine(){return this.line}getColumn(){return this.column}getValue(){return this.value}changeType(e){this.type=s.a.types[e.toString().toUpperCase()],this.type_name=e.toString().toUpperCase()}addChild(...e){e.forEach(e=>{this.children.push(e),this.grouped=this.grouped||e.grouped,e.parent=this})}getChild(e){return e>this.children.length?null:this.children[e]}getChildren(){return this.children}printTree(e=""){console.log(`${e}#${s.a.names[this.type]} (${this.type})`),this.children.forEach(t=>{t.printTree(e+"\t")}),this.next&&this.next.printTree(e)}copy(){const e=new n(this.type_name,this.value,this.line,this.column);return e.type=this.type,e}copyWithChildren(){const e=new n(this.type_name,this.value,this.line,this.column);return e.type=this.type,this.children.forEach(t=>e.addChild(t.copyWithChildren())),e}insertAt(e,t,i=!1){i?this.children.splice(e,0,...t):this.children.splice(e,0,t)}setIndex(){this.index=window.index,window.index++;for(let e=0;e<this.children.length;e++)this.children[e].setIndex(window.index)}deleteAt(e){return this.children.splice(e,1)}writeNode(){let e=`\n\tnode${this.index} [label="${s.a.names[this.type]} (${this.index}) ${null!=this.value?this.value:""}"];\n`;for(let t=0;t<this.children.length;t++)e+=this.children[t].writeNode(),e+=`\n\tnode${this.index} -> node${this.children[t].index};`;return e}lookupByIndex(e){if(this.index===e)return this;let t=null;for(const i of this.children)if(null!=(t=i.lookupByIndex(e)))return t;return null}lookupByType(e){if(this.type===e)return this;for(const t of this.children)if(t.getType()===e)return t;return null}getType(){return this.type}getParent(){return this.parent}childrenSize(){return this.children.length}getPosition(e){for(let t=0;t<this.childrenSize();t++)if(e===this.children[t])return t;return-1}}},,,,function(e,t){window.indices=0,window.strArbol="",window.textoConsola=[],window.indiceLoops=0,window.strFunciones="",window.strObjetos="",window.coorelativoFunciones=0,window.currentTabs=0,window.esAnidada=!1,window.primeraPasada=!0,window.forincorrelativo=0,window.tablaSimbolos=null,window.errores=[],window.tablaObjetos=null,window.pilaRetornos=[],window.limpiarTodo=function(){window.forincorrelativo=0,window.primeraPasada=!0,window.esAnidada=!1,window.currentTabs=0,window.strFunciones="",window.strObjetos="",window.coorelativoFunciones=0,window.pilaRetornos=[],window.indiceLoops=0,window.tablaSimbolos=null,window.tablaObjetos=null,window.indices=0,window.strArbol="",window.errores=[],window.textoConsola=[],window.dispatchEvent(new CustomEvent("console-changed",{detail:[]})),window.dispatchEvent(new CustomEvent("graficar-errores",{detail:[]}))}},function(e,t,i){"use strict";(function(e,s){i.d(t,"a",(function(){return a})),i.d(t,"b",(function(){return n}));var r=i(69),n=function(){var e=function(e,t,i,s){for(i=i||{},s=e.length;s--;i[e[s]]=t);return i},t=[1,23],i=[1,20],s=[1,18],n=[1,17],o=[1,19],l=[1,14],c=[1,24],h=[1,13],p=[1,15],u=[1,25],d=[1,21],m=[1,22],g=[5,17,18,20,22,26,28,29,31,43,46,53,55,57],f=[1,68],y=[1,69],b=[1,70],_=[1,71],w=[1,72],T=[1,73],E=[8,27],A=[1,94],S=[1,95],C=[1,96],k=[1,97],L=[1,98],v=[24,28],O=[18,20,24,28],N={trace:function(){},yy:{},symbols_:{error:2,INICIO:3,STMT_LIST:4,EOF:5,STMT:6,CALL_STMT:7,puntoycoma:8,TMP_STMT:9,JMP_STMT:10,HEAP_STMT:11,STACK_STMT:12,PRINT_STMT:13,METHOD_DECL_STMT:14,LABEL_STMT:15,DECL_STMT:16,cast:17,sp:18,E:19,hp:20,TMP_LIST:21,heap:22,squarel:23,number:24,squarer:25,stack:26,comma:27,tmp:28,label:29,colon:30,identifier:31,lpar:32,rpar:33,eq:34,OPERATOR:35,fmod:36,ERROR_ASSIGN:37,plus:38,min:39,div:40,mod:41,mult:42,goto:43,IFINIT:44,GOTO_OP:45,if:46,gotoeq:47,gotoneq:48,gotogt:49,gotogte:50,gotolt:51,gotolte:52,printf:53,parameter:54,void:55,llaveabre:56,return:57,llavecierra:58,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",8:"puntoycoma",17:"cast",18:"sp",19:"E",20:"hp",22:"heap",23:"squarel",24:"number",25:"squarer",26:"stack",27:"comma",28:"tmp",29:"label",30:"colon",31:"identifier",32:"lpar",33:"rpar",34:"eq",36:"fmod",38:"plus",39:"min",40:"div",41:"mod",42:"mult",43:"goto",46:"if",47:"gotoeq",48:"gotoneq",49:"gotogt",50:"gotogte",51:"gotolt",52:"gotolte",53:"printf",54:"parameter",55:"void",56:"llaveabre",57:"return",58:"llavecierra"},productions_:[0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[16,2],[16,2],[16,2],[16,2],[16,5],[16,5],[21,3],[21,1],[15,3],[15,2],[7,3],[9,3],[9,3],[9,3],[9,3],[9,6],[9,6],[9,6],[9,9],[9,9],[9,9],[9,6],[9,6],[9,6],[9,9],[9,9],[9,9],[9,5],[9,5],[9,5],[9,5],[9,5],[9,5],[9,5],[9,5],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[37,3],[35,1],[35,1],[35,1],[35,1],[35,1],[11,6],[11,6],[11,6],[11,6],[11,9],[11,9],[11,9],[11,9],[11,6],[11,6],[11,6],[11,6],[11,9],[11,9],[11,9],[11,9],[11,5],[11,5],[11,8],[11,8],[12,6],[12,6],[12,6],[12,6],[12,9],[12,9],[12,9],[12,9],[12,6],[12,6],[12,6],[12,6],[12,9],[12,9],[12,9],[12,9],[12,5],[12,5],[12,5],[12,5],[12,8],[12,8],[12,8],[12,8],[10,2],[10,8],[10,6],[10,8],[10,6],[10,8],[10,6],[10,8],[10,6],[44,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[13,6],[13,9],[13,6],[13,9],[14,9],[14,9]],performAction:function(e,t,i,s,n,o,l){var c=o.length-1;switch(n){case 1:a=o[c-1],this.$=o[c-1];break;case 2:o[c-1].setNext(o[c]);break;case 3:this.$=o[c];break;case 4:case 5:case 6:case 7:case 8:case 9:case 12:this.$=o[c-1];break;case 10:case 11:case 57:case 58:case 59:case 60:case 61:case 116:case 117:case 118:case 119:case 120:case 121:this.$=o[c];break;case 13:this.$=new r.a("var",null,l[c-1].first_line,l[c-1].first_column,new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 14:this.$=new r.a("var",null,l[c-1].first_line,l[c-1].first_column,new r.a("e",null,l[c].first_line,l[c].first_column));break;case 15:this.$=new r.a("var",null,l[c-1].first_line,l[c-1].first_column,new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 16:this.$=new r.a("var",null,l[c-1].first_line,l[c-1].first_column),o[c].forEach(e=>this.$.addChild(e));break;case 17:this.$=new r.a("var",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-3].first_line,l[c-3].first_column));break;case 18:this.$=new r.a("var",null,l[c-2].first_line,l[c-2].first_column,new r.a("stack",null,l[c-3].first_line,l[c-3].first_column));break;case 19:this.$=o[c-2],this.$.push(new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 20:this.$=[new r.a("tmp",o[c],l[c].first_line,l[c].first_column)];break;case 21:o[c-2].next=new r.a("label",o[c],l[c].first_line,l[c].first_column),this.$=o[c-2];break;case 22:this.$=new r.a("label",o[c-1],l[c-1].first_line,l[c-1].first_column);break;case 23:this.$=new r.a("call",o[c-2],l[c-2].first_line,l[c-2].first_column);break;case 24:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 25:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 26:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 27:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 28:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("stack",null,l[c-3].first_line,l[c-3].first_column,new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 29:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("stack",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 30:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("stack",null,l[c-3].first_line,l[c-3].first_column,new r.a("sp",null,l[c-1].first_line,l[c-1].first_column)));break;case 31:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-8],l[c-8].first_line,l[c-8].first_column),new r.a("stack",null,l[c-6].first_line,l[c-6].first_column,new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 32:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-8],l[c-8].first_line,l[c-8].first_column),new r.a("stack",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 33:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-8],l[c-8].first_line,l[c-8].first_column),new r.a("stack",null,l[c-6].first_line,l[c-6].first_column,new r.a("sp",null,l[c-1].first_line,l[c-1].first_column)));break;case 34:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("heap",null,l[c-3].first_line,l[c-3].first_column,new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 35:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("heap",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 36:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("heap",null,l[c-3].first_line,l[c-3].first_column,new r.a("hp",null,l[c-1].first_line,l[c-1].first_column)));break;case 37:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-8],l[c-8].first_line,l[c-8].first_column),new r.a("heap",null,l[c-6].first_line,l[c-6].first_column,new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 38:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-8],l[c-8].first_line,l[c-8].first_column),new r.a("heap",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 39:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-8],l[c-8].first_line,l[c-8].first_column),new r.a("heap",null,l[c-6].first_line,l[c-6].first_column,new r.a("hp",null,l[c-1].first_line,l[c-1].first_column)));break;case 40:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("number",parseFloat(o[c-2]),l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 41:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("number",parseFloat(o[c-2]),l[c-2].first_line,l[c-2].first_column),new r.a("tmp",o[c],l[c].first_line,l[c].first_column)));break;case 42:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column),new r.a("tmp",o[c],l[c].first_line,l[c].first_column)));break;case 43:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 44:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("sp",null,l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 45:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("number",parseFloat(o[c-2]),l[c-2].first_line,l[c-2].first_column),new r.a("sp",null,l[c].first_line,l[c].first_column)));break;case 46:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("hp",null,l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 47:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("number",parseFloat(o[c-2]),l[c-2].first_line,l[c-2].first_column),new r.a("hp",null,l[c].first_line,l[c].first_column)));break;case 48:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("number",parseFloat(o[c-3]),l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 49:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("number",parseFloat(o[c-3]),l[c-3].first_line,l[c-3].first_column),new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 50:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column),new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 51:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 52:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 53:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("number",parseFloat(o[c-3]),l[c-3].first_line,l[c-3].first_column),new r.a("sp",null,l[c-1].first_line,l[c-1].first_column)));break;case 54:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 55:this.$=new r.a("=",null,l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-7],l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("number",parseFloat(o[c-3]),l[c-3].first_line,l[c-3].first_column),new r.a("hp",null,l[c-1].first_line,l[c-1].first_column)));break;case 56:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("E",null,l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(number),l[c].first_line,l[c].first_column));break;case 62:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 63:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 64:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 65:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 66:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 67:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 68:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 69:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 70:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 71:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 72:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 73:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("heap",null,l[c-5].first_line,l[c-5].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 74:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 75:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 76:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 77:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("heap",null,l[c-8].first_line,l[c-8].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 78:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("hp",null,l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("hp",null,l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 79:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("hp",null,l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("hp",null,l[c-2].first_line,l[c-2].first_column),new r.a("tmp",o[c],l[c].first_line,l[c].first_column)));break;case 80:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("hp",null,l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 81:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("hp",null,l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column),new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 82:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 83:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 84:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 85:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 86:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 87:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 88:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("tmp",o[c],l[c].first_line,l[c].first_column));break;case 89:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column));break;case 90:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 91:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 92:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 93:this.$=new r.a("=",null,l[c-1].first_line,l[c-1].first_column,new r.a("stack",null,l[c-5].first_line,l[c-5].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 94:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 95:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 96:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("sp",null,l[c].first_line,l[c].first_column));break;case 97:this.$=new r.a("=",null,l[c-4].first_line,l[c-4].first_column,new r.a("stack",null,l[c-8].first_line,l[c-8].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column)),new r.a("hp",null,l[c].first_line,l[c].first_column));break;case 98:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("sp",null,l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("hp",null,l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 99:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("sp",null,l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("hp",null,l[c-2].first_line,l[c-2].first_column),new r.a("tmp",o[c],l[c].first_line,l[c].first_column)));break;case 100:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("sp",null,l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("sp",null,l[c-2].first_line,l[c-2].first_column),new r.a("number",parseFloat(o[c]),l[c].first_line,l[c].first_column)));break;case 101:this.$=new r.a("=",null,l[c-3].first_line,l[c-3].first_column,new r.a("sp",null,l[c-4].first_line,l[c-4].first_column),new r.a(o[c-1],null,l[c-1].first_line,l[c-1].first_column,new r.a("sp",null,l[c-2].first_line,l[c-2].first_column),new r.a("tmp",o[c],l[c].first_line,l[c].first_column)));break;case 102:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("sp",null,l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 103:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("sp",null,l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("hp",null,l[c-3].first_line,l[c-3].first_column),new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 104:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("sp",null,l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column),new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column)));break;case 105:this.$=new r.a("=",null,l[c-6].first_line,l[c-6].first_column,new r.a("sp",null,l[c-7].first_line,l[c-7].first_column),new r.a("%",null,l[c-4].first_line,l[c-4].first_column,new r.a("sp",null,l[c-3].first_line,l[c-3].first_column),new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column)));break;case 106:this.$=new r.a(o[c-1],o[c],l[c-1].first_line,l[c-1].first_column);break;case 107:this.$=new r.a(o[c-4],o[c],l[c-7].first_line,l[c-7].first_column,new r.a("number",parseFloat(o[c-5]),l[c-5].first_line,l[c-5].first_column),new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),!0===o[c-7]&&this.$.converToFalse();break;case 108:this.$=new r.a(o[c-3],o[c],l[c-5].first_line,l[c-5].first_column,new r.a("number",parseFloat(o[c-4]),l[c-4].first_line,l[c-4].first_column),new r.a("tmp",o[c-2],l[c-1].first_line,l[c-2].first_column)),!0===o[c-5]&&this.$.converToFalse();break;case 109:this.$=new r.a(o[c-4],o[c],l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("number",parseFloat(o[c-3]),l[c-3].first_line,l[c-3].first_column)),!0===o[c-7]&&this.$.converToFalse();break;case 110:this.$=new r.a(o[c-3],o[c],l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a("number",parseFloat(o[c-2]),l[c-2].first_line,l[c-2].first_column)),!0===o[c-5]&&this.$.converToFalse();break;case 111:this.$=new r.a(o[c-4],o[c],l[c-7].first_line,l[c-7].first_column,new r.a("tmp",o[c-5],l[c-5].first_line,l[c-5].first_column),new r.a("tmp",o[c-3],l[c-3].first_line,l[c-3].first_column)),!0===o[c-7]&&this.$.converToFalse();break;case 112:this.$=new r.a(o[c-3],o[c],l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-4],l[c-4].first_line,l[c-4].first_column),new r.a("tmp",o[c-2],l[c-2].first_line,l[c-2].first_column)),!0===o[c-5]&&this.$.converToFalse();break;case 113:this.$=new r.a(o[c-4],o[c],l[c-7].first_line,l[c-7].first_column,new r.a("number",parseFloat(o[c-5]),l[c-5].first_line,l[c-5].first_column),new r.a("number",parseFloat(o[c-3]),l[c-3].first_line,l[c-3].first_column)),!0===o[c-7]&&this.$.converToFalse();break;case 114:this.$=new r.a(o[c-3],o[c],l[c-5].first_line,l[c-5].first_column,new r.a("number",parseFloat(o[c-4]),l[c-4].first_line,l[c-4].first_column),new r.a("number",parseFloat(o[c-2]),l[c-2].first_line,l[c-2].first_column)),!0===o[c-5]&&this.$.converToFalse();break;case 115:this.$=!1;break;case 122:this.$=new r.a(o[c-5],o[c-3],l[c-5].first_line,l[c-5].first_column,new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column));break;case 123:this.$=new r.a(o[c-8],o[c-6],l[c-8].first_line,l[c-8].first_column,new r.a("tmp",o[c-1],l[c-1].first_line,l[c-1].first_column));break;case 124:this.$=new r.a(o[c-5],o[c-3],l[c-5].first_line,l[c-5].first_column,new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column));break;case 125:this.$=new r.a(o[c-8],o[c-6],l[c-8].first_line,l[c-8].first_column,new r.a("number",parseFloat(o[c-1]),l[c-1].first_line,l[c-1].first_column));break;case 126:case 127:let e=new r.a("begin",null,l[c-6].first_line,l[c-6].first_column);e.setNext(o[c-3]),e.setNext(new r.a("end",null,l[c-4].first_line,l[c-4].first_column)),this.$=new r.a("method",o[c-7],l[c-7].first_line,l[c-7].first_column,e)}},table:[{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:t,18:i,20:s,22:n,26:o,28:l,29:c,31:h,43:p,44:16,46:u,53:d,55:m},{1:[3]},{5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:t,18:i,20:s,22:n,26:o,28:l,29:c,31:h,43:p,44:16,46:u,53:d,55:m},e(g,[2,3]),{8:[1,28]},{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},e(g,[2,10]),e(g,[2,11]),{8:[1,34]},{32:[1,35]},{34:[1,36]},{29:[1,37]},{24:[1,39],28:[1,40],32:[1,38]},{23:[1,41]},{34:[1,42]},{23:[1,43]},{34:[1,44]},{32:[1,45]},{31:[1,46]},{18:[1,48],19:[1,49],20:[1,50],21:51,22:[1,52],26:[1,53],28:[1,54],31:[1,47]},{27:[1,55],30:[1,56]},e([24,28,32],[2,115]),{1:[2,1]},e(g,[2,2]),e(g,[2,4]),e(g,[2,5]),e(g,[2,6]),e(g,[2,7]),e(g,[2,8]),e(g,[2,9]),e(g,[2,12]),{33:[1,57]},{18:[1,60],20:[1,61],22:[1,63],24:[1,59],26:[1,62],28:[1,58],36:[1,64]},{8:[2,106]},{24:[1,65],28:[1,66]},{45:67,47:f,48:y,49:b,50:_,51:w,52:T},{45:74,47:f,48:y,49:b,50:_,51:w,52:T},{20:[1,76],28:[1,75],32:[1,77]},{20:[1,78],36:[1,79]},{18:[1,81],28:[1,80],32:[1,82]},{18:[1,84],20:[1,83],36:[1,85]},{54:[1,86]},{32:[1,87]},{32:[1,88]},{8:[2,13]},{8:[2,14]},{8:[2,15]},{8:[2,16],27:[1,89]},{23:[1,90]},{23:[1,91]},e(E,[2,20]),{15:92,29:c},e(g,[2,22]),{8:[2,23]},{8:[2,24],35:93,38:A,39:S,40:C,41:k,42:L},{8:[2,25],35:99,38:A,39:S,40:C,41:k,42:L},{8:[2,26],35:100,38:A,39:S,40:C,41:k,42:L},{8:[2,27],35:101,38:A,39:S,40:C,41:k,42:L},{23:[1,102]},{23:[1,103]},{32:[1,104]},{45:105,47:f,48:y,49:b,50:_,51:w,52:T},{45:106,47:f,48:y,49:b,50:_,51:w,52:T},{24:[1,108],28:[1,107]},e(v,[2,116]),e(v,[2,117]),e(v,[2,118]),e(v,[2,119]),e(v,[2,120]),e(v,[2,121]),{24:[1,109],28:[1,110]},{25:[1,111]},{25:[1,112]},{17:[1,113]},{35:114,38:A,39:S,40:C,41:k,42:L},{32:[1,115]},{25:[1,116]},{25:[1,117]},{17:[1,118]},{35:119,38:A,39:S,40:C,41:k,42:L},{35:120,38:A,39:S,40:C,41:k,42:L},{32:[1,121]},{27:[1,122]},{33:[1,123]},{33:[1,124]},{28:[1,125]},{24:[1,126]},{24:[1,127]},e(g,[2,21]),{24:[1,129],28:[1,128]},e(O,[2,57]),e(O,[2,58]),e(O,[2,59]),e(O,[2,60]),e(O,[2,61]),{18:[1,132],20:[1,133],24:[1,130],28:[1,131]},{24:[1,134]},{24:[1,135]},{18:[1,138],24:[1,136],28:[1,137],32:[1,139]},{20:[1,142],24:[1,140],28:[1,141],32:[1,143]},{18:[1,146],20:[1,147],24:[1,144],28:[1,145]},{24:[1,149],28:[1,148]},{24:[1,150],28:[1,151]},{43:[1,152]},{43:[1,153]},{43:[1,154]},{43:[1,155]},{34:[1,156]},{34:[1,157]},{33:[1,158]},{24:[1,159],28:[1,160]},{20:[1,161]},{34:[1,162]},{34:[1,163]},{33:[1,164]},{24:[1,165],28:[1,166]},{24:[1,167],28:[1,168]},{18:[1,170],20:[1,169]},{24:[1,173],28:[1,171],32:[1,172]},{56:[1,174]},{56:[1,175]},e(E,[2,19]),{25:[1,176]},{25:[1,177]},{8:[2,42]},{8:[2,43]},{8:[2,40]},{8:[2,41]},{8:[2,45]},{8:[2,47]},{8:[2,44]},{8:[2,46]},{25:[1,178]},{25:[1,179]},{25:[1,180]},{17:[1,181]},{25:[1,182]},{25:[1,183]},{25:[1,184]},{17:[1,185]},{27:[1,186]},{27:[1,187]},{27:[1,188]},{27:[1,189]},{33:[1,190]},{33:[1,191]},{33:[1,192]},{33:[1,193]},{29:[1,194]},{29:[1,195]},{29:[1,196]},{29:[1,197]},{18:[1,201],20:[1,200],24:[1,198],28:[1,199]},{18:[1,205],20:[1,204],24:[1,202],28:[1,203]},{20:[1,207],28:[1,206]},{8:[2,78]},{8:[2,79]},{27:[1,208]},{18:[1,211],20:[1,212],24:[1,209],28:[1,210]},{18:[1,215],20:[1,216],24:[1,214],28:[1,213]},{18:[1,218],28:[1,217]},{8:[2,98]},{8:[2,99]},{8:[2,100]},{8:[2,101]},{27:[1,219]},{27:[1,220]},{33:[1,221]},{17:[1,222]},{33:[1,223]},{4:224,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:t,18:i,20:s,22:n,26:o,28:l,29:c,31:h,43:p,44:16,46:u,53:d,55:m},{4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:t,18:i,20:s,22:n,26:o,28:l,29:c,31:h,43:p,44:16,46:u,53:d,55:m},{8:[2,17]},{8:[2,18]},{8:[2,28]},{8:[2,29]},{8:[2,30]},{33:[1,226]},{8:[2,34]},{8:[2,35]},{8:[2,36]},{33:[1,227]},{18:[1,230],20:[1,231],24:[1,228],28:[1,229]},{24:[1,233],28:[1,232]},{24:[1,234]},{24:[1,235]},{43:[1,236]},{43:[1,237]},{43:[1,238]},{43:[1,239]},{8:[2,108]},{8:[2,114]},{8:[2,110]},{8:[2,112]},{8:[2,62]},{8:[2,64]},{8:[2,70]},{8:[2,72]},{8:[2,63]},{8:[2,65]},{8:[2,71]},{8:[2,73]},{25:[1,240]},{25:[1,241]},{24:[1,242],28:[1,243]},{8:[2,82]},{8:[2,83]},{8:[2,90]},{8:[2,91]},{8:[2,84]},{8:[2,85]},{8:[2,92]},{8:[2,93]},{25:[1,244]},{25:[1,245]},{24:[1,246],28:[1,247]},{24:[1,248],28:[1,249]},{8:[2,122]},{33:[1,250]},{8:[2,124]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:t,18:i,20:s,22:n,26:o,28:l,29:c,31:h,43:p,44:16,46:u,53:d,55:m,57:[1,251]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:t,18:i,20:s,22:n,26:o,28:l,29:c,31:h,43:p,44:16,46:u,53:d,55:m,57:[1,252]},{18:[1,255],24:[1,253],28:[1,254]},{20:[1,258],24:[1,256],28:[1,257]},{33:[1,259]},{33:[1,260]},{33:[1,261]},{33:[1,262]},{33:[1,263]},{33:[1,264]},{33:[1,265]},{33:[1,266]},{29:[1,267]},{29:[1,268]},{29:[1,269]},{29:[1,270]},{34:[1,271]},{34:[1,272]},{33:[1,273]},{33:[1,274]},{34:[1,275]},{34:[1,276]},{33:[1,277]},{33:[1,278]},{33:[1,279]},{33:[1,280]},{24:[1,282],28:[1,281]},{8:[1,283]},{8:[1,284]},{25:[1,285]},{25:[1,286]},{25:[1,287]},{25:[1,288]},{25:[1,289]},{25:[1,290]},{8:[2,48]},{8:[2,49]},{8:[2,53]},{8:[2,55]},{8:[2,50]},{8:[2,51]},{8:[2,52]},{8:[2,54]},{8:[2,107]},{8:[2,113]},{8:[2,109]},{8:[2,111]},{18:[1,294],20:[1,293],24:[1,291],28:[1,292]},{18:[1,298],20:[1,297],24:[1,295],28:[1,296]},{8:[2,80]},{8:[2,81]},{18:[1,301],20:[1,302],24:[1,299],28:[1,300]},{18:[1,305],20:[1,306],24:[1,304],28:[1,303]},{8:[2,102]},{8:[2,103]},{8:[2,104]},{8:[2,105]},{33:[1,307]},{33:[1,308]},{58:[1,309]},{58:[1,310]},{8:[2,31]},{8:[2,32]},{8:[2,33]},{8:[2,37]},{8:[2,38]},{8:[2,39]},{8:[2,66]},{8:[2,68]},{8:[2,74]},{8:[2,76]},{8:[2,67]},{8:[2,69]},{8:[2,75]},{8:[2,77]},{8:[2,86]},{8:[2,87]},{8:[2,94]},{8:[2,95]},{8:[2,88]},{8:[2,89]},{8:[2,96]},{8:[2,97]},{8:[2,123]},{8:[2,125]},e(g,[2,126]),e(g,[2,127])],defaultActions:{26:[2,1],37:[2,106],48:[2,13],49:[2,14],50:[2,15],57:[2,23],128:[2,42],129:[2,43],130:[2,40],131:[2,41],132:[2,45],133:[2,47],134:[2,44],135:[2,46],159:[2,78],160:[2,79],165:[2,98],166:[2,99],167:[2,100],168:[2,101],176:[2,17],177:[2,18],178:[2,28],179:[2,29],180:[2,30],182:[2,34],183:[2,35],184:[2,36],194:[2,108],195:[2,114],196:[2,110],197:[2,112],198:[2,62],199:[2,64],200:[2,70],201:[2,72],202:[2,63],203:[2,65],204:[2,71],205:[2,73],209:[2,82],210:[2,83],211:[2,90],212:[2,91],213:[2,84],214:[2,85],215:[2,92],216:[2,93],221:[2,122],223:[2,124],259:[2,48],260:[2,49],261:[2,53],262:[2,55],263:[2,50],264:[2,51],265:[2,52],266:[2,54],267:[2,107],268:[2,113],269:[2,109],270:[2,111],273:[2,80],274:[2,81],277:[2,102],278:[2,103],279:[2,104],280:[2,105],285:[2,31],286:[2,32],287:[2,33],288:[2,37],289:[2,38],290:[2,39],291:[2,66],292:[2,68],293:[2,74],294:[2,76],295:[2,67],296:[2,69],297:[2,75],298:[2,77],299:[2,86],300:[2,87],301:[2,94],302:[2,95],303:[2,88],304:[2,89],305:[2,96],306:[2,97],307:[2,123],308:[2,125]},parseError:function(e,t){if(!t.recoverable){var i=new Error(e);throw i.hash=t,i}this.trace(e)},parse:function(e){var t=this,i=[0],s=[null],r=[],n=this.table,a="",o=0,l=0,c=0,h=2,p=1,u=r.slice.call(arguments,1),d=Object.create(this.lexer),m={yy:{}};for(var g in this.yy)Object.prototype.hasOwnProperty.call(this.yy,g)&&(m.yy[g]=this.yy[g]);d.setInput(e,m.yy),m.yy.lexer=d,m.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var f=d.yylloc;r.push(f);var y=d.options&&d.options.ranges;"function"==typeof m.yy.parseError?this.parseError=m.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var b,_,w,T,E,A,S,C,k,L=function(){var e;return"number"!=typeof(e=d.lex()||p)&&(e=t.symbols_[e]||e),e},v={};;){if(w=i[i.length-1],this.defaultActions[w]?T=this.defaultActions[w]:(null==b&&(b=L()),T=n[w]&&n[w][b]),void 0===T||!T.length||!T[0]){var O="";for(A in k=[],n[w])this.terminals_[A]&&A>h&&k.push("'"+this.terminals_[A]+"'");O=d.showPosition?"Parse error on line "+(o+1)+":\n"+d.showPosition()+"\nExpecting "+k.join(", ")+", got '"+(this.terminals_[b]||b)+"'":"Parse error on line "+(o+1)+": Unexpected "+(b==p?"end of input":"'"+(this.terminals_[b]||b)+"'"),this.parseError(O,{text:d.match,token:this.terminals_[b]||b,line:d.yylineno,loc:f,expected:k})}if(T[0]instanceof Array&&T.length>1)throw new Error("Parse Error: multiple actions possible at state: "+w+", token: "+b);switch(T[0]){case 1:i.push(b),s.push(d.yytext),r.push(d.yylloc),i.push(T[1]),b=null,_?(b=_,_=null):(l=d.yyleng,a=d.yytext,o=d.yylineno,f=d.yylloc,c>0&&c--);break;case 2:if(S=this.productions_[T[1]][1],v.$=s[s.length-S],v._$={first_line:r[r.length-(S||1)].first_line,last_line:r[r.length-1].last_line,first_column:r[r.length-(S||1)].first_column,last_column:r[r.length-1].last_column},y&&(v._$.range=[r[r.length-(S||1)].range[0],r[r.length-1].range[1]]),void 0!==(E=this.performAction.apply(v,[a,l,o,m.yy,T[1],s,r].concat(u))))return E;S&&(i=i.slice(0,-1*S*2),s=s.slice(0,-1*S),r=r.slice(0,-1*S)),i.push(this.productions_[T[1]][0]),s.push(v.$),r.push(v._$),C=n[i[i.length-2]][i[i.length-1]],i.push(C);break;case 3:return!0}}return!0}},R={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,i=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var s=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),i.length-1&&(this.yylineno-=i.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:i?(i.length===s.length?this.yylloc.first_column:0)+s[s.length-i.length].length-i[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var i,s,r;if(this.options.backtrack_lexer&&(r={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(r.yylloc.range=this.yylloc.range.slice(0))),(s=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=s.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:s?s[s.length-1].length-s[s.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],i=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),i)return i;if(this._backtrack){for(var n in r)this[n]=r[n];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,i,s;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var r=this._currentRules(),n=0;n<r.length;n++)if((i=this._input.match(this.rules[r[n]]))&&(!t||i[0].length>t[0].length)){if(t=i,s=n,this.options.backtrack_lexer){if(!1!==(e=this.test_match(i,r[n])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,r[s]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return e||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{flex:!0,"case-insensitive":!0},performAction:function(e,t,i,s){switch(i){case 0:case 1:break;case 2:return"parameter";case 3:return 19;case 4:return 29;case 5:return 28;case 6:return 24;case 7:return"call";case 8:return 20;case 9:return 18;case 10:return 22;case 11:return 26;case 12:return 46;case 13:return 34;case 14:return 27;case 15:return 8;case 16:return"plus";case 17:return"min";case 18:return"div";case 19:case 20:return"parameter";case 21:return"mod";case 22:return"mult";case 23:return"goto";case 24:return"proc";case 25:return 36;case 26:return"gotoeq";case 27:return"gotoneq";case 28:return"gotogt";case 29:return"gotolt";case 30:return"gotogte";case 31:return"gotolte";case 32:return"void";case 33:case 34:return"cast";case 35:return"return";case 36:return"squarel";case 37:return"squarer";case 38:return"llaveabre";case 39:return"llavecierra";case 40:return"squarel";case 41:return"squarer";case 42:return"printf";case 43:return 32;case 44:return 33;case 45:return 30;case 46:return 31;case 47:return"invalid";case 48:return 5;case 49:console.log(t.yytext)}},rules:[/^(?:\s+)/i,/^(?:\/\/[^\n]*)/i,/^(?:"%\.2f")/i,/^(?:E)/i,/^(?:[l][0-9]+)/i,/^(?:[t][0-9]+)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:call)/i,/^(?:H)/i,/^(?:P)/i,/^(?:Heap)/i,/^(?:Stack)/i,/^(?:if)/i,/^(?:=)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:"%c")/i,/^(?:"%d")/i,/^(?:%)/i,/^(?:\*)/i,/^(?:goto)/i,/^(?:proc)/i,/^(?:fmod)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:void)/i,/^(?:int)/i,/^(?:double)/i,/^(?:return)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:llaveabre)/i,/^(?:llavecierra)/i,/^(?:printf)/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:[_A-Za-z][_A-Za-z0-9]*)/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],inclusive:!0}}};function I(){this.yy={}}return N.lexer=R,I.prototype=N,N.Parser=I,new I}();"undefined"!=typeof exports&&(exports.parser=n,exports.Parser=n.Parser,exports.parse=function(){return n.parse.apply(n,arguments)},exports.main=function(t){t[1]||(console.log("Usage: "+t[0]+" FILE"),e.exit(1))},i.c[i.s]===s&&exports.main(e.argv.slice(1)));var a=null}).call(this,i(59),i(60)(e))},function(e,t,i){"use strict";(function(e,s){i.d(t,"a",(function(){return N}));var r=i(54),n=i(70),a=i(83),o=i(84),l=i(85),c=i(86),h=i(87),p=i(74),u=i(88),d=i(89),m=i(90),g=i(91),f=i(92),y=i(93),b=i(105),_=i(106),w=i(94),T=i(95),E=i(96),A=i(97),S=i(98),C=i(99),k=i(100),L=i(101),v=i(102),O=i(55),N=function(){var e=function(e,t,i,s){for(i=i||{},s=e.length;s--;i[e[s]]=t);return i},t=[1,31],i=[1,32],s=[1,33],N=[1,20],R=[1,34],I=[1,30],x=[1,37],P=[1,28],j=[1,29],$=[1,38],D=[1,35],M=[1,36],F=[1,26],H=[1,21],U=[1,22],V=[5,27,29,30,31,33,45,51,54,57,58,61,64,65,69,84,86],B=[5,27,29,30,31,33,45,48,50,51,54,57,58,61,64,65,69,84,86],z=[1,44],Y=[1,46],G=[1,47],J=[1,48],Q=[12,37],W=[12,27,37,38,40,44,63,68,74,75,78,87,88,92,93,94,95,96,97,98,99,100,101,102,103],q=[2,84],X=[1,58],K=[1,63],Z=[1,90],ee=[1,81],te=[1,88],ie=[1,69],se=[1,75],re=[1,73],ne=[1,74],ae=[1,76],oe=[1,77],le=[1,78],ce=[1,79],he=[1,80],pe=[1,89],ue=[2,135],de=[12,27,37,38,40,44,63,87,88,92,93,94,95,96,97,98,99,100,101,102,103],me=[12,40],ge=[1,106],fe=[1,128],ye=[1,126],be=[1,127],_e=[12,27,37,38,40,44,63,87,88],we=[1,136],Te=[1,137],Ee=[1,138],Ae=[1,139],Se=[1,140],Ce=[1,141],ke=[1,167],Le=[37,40,63],ve=[5,27,29,30,31,33,45,48,50,51,54,57,58,60,61,64,65,69,84,86],Oe=[27,29,30,31,45,48,50,51,54,57,58,61,64,65,69,84,86],Ne=[1,208],Re=[37,40],Ie=[1,213],xe=[12,27,37,38,40,44,62,63,68,74,75,78,87,88,92,93,94,95,96,97,98,99,100,101,102,103],Pe=[12,27,37,38,40,44,63,87,88,92,93,94,95,96,97,98,99],je=[12,27,37,38,40,44,63,87,88,92,93,94,95,96,97,98,99,100,102],$e=[1,240],De=[27,40],Me=[1,256],Fe=[12,26,27,37,40,62,68],He=[48,50],Ue={trace:function(){},yy:{},symbols_:{error:2,INICIO:3,SENTENCIASF:4,EOF:5,SENTENCIAF:6,SENTENCIAS:7,SENTENCIA:8,DECLAFUNCION:9,IMPRIMIR:10,DECLARACION:11,puntoycoma:12,ASIGNACION:13,LISTARECURSIVA:14,DEFOBJETO:15,SENTIF:16,SENTWHILE:17,SENTDO:18,SENTFOR:19,SENTBREAK:20,SENTCONTINUE:21,SENTRETURN:22,SENTSWITCH:23,LLAMADAFUNCION:24,BLOQUESENT:25,llaveabre:26,llavecierra:27,BLOQUESENTF:28,break:29,continue:30,return:31,COND:32,function:33,ID:34,parentesisabre:35,LISTAPARAMS:36,parentesiscierra:37,dospuntos:38,LISTADIMS:39,coma:40,PARAM:41,LISTAEXP:42,TERNARIO:43,pregunta:44,switch:45,BLOQUESWITCH:46,LISTACASE:47,default:48,CASE:49,case:50,for:51,FORINIT:52,TIPOCAMBIO:53,IDENTIFICADOR:54,in:55,of:56,while:57,do:58,IF_LIST:59,else:60,if:61,corcheteabre:62,corchetecierra:63,const:64,let:65,LISTADECLA:66,DECLAELEMENT:67,igual:68,type:69,LISTAATRIBUTOS:70,EXPOBJ:71,LISTAATRIBUTOSDEF:72,INCREMENTOS:73,masmas:74,menosmenos:75,ELEMENTRECURSIVO:76,LISTAACCESODIMS:77,punto:78,length:79,pop:80,push:81,toLowerCase:82,toUpperCase:83,console:84,log:85,graficar_ts:86,and:87,or:88,not:89,REL:90,EXP:91,mayor:92,menor:93,menoroigual:94,mayoroigual:95,igualigual:96,diferente:97,"+":98,"-":99,"*":100,potencia:101,"/":102,"%":103,ENTERO:104,DECIMAL:105,CADENA:106,verdadero:107,falso:108,null:109,undefined:110,EXPARRAY:111,EXPARRAYNEW:112,new:113,Array:114,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",12:"puntoycoma",26:"llaveabre",27:"llavecierra",29:"break",30:"continue",31:"return",33:"function",35:"parentesisabre",37:"parentesiscierra",38:"dospuntos",40:"coma",44:"pregunta",45:"switch",48:"default",50:"case",51:"for",54:"IDENTIFICADOR",55:"in",56:"of",57:"while",58:"do",60:"else",61:"if",62:"corcheteabre",63:"corchetecierra",64:"const",65:"let",68:"igual",69:"type",74:"masmas",75:"menosmenos",78:"punto",79:"length",80:"pop",81:"push",82:"toLowerCase",83:"toUpperCase",84:"console",85:"log",86:"graficar_ts",87:"and",88:"or",89:"not",92:"mayor",93:"menor",94:"menoroigual",95:"mayoroigual",96:"igualigual",97:"diferente",98:"+",99:"-",100:"*",101:"potencia",102:"/",103:"%",104:"ENTERO",105:"DECIMAL",106:"CADENA",107:"verdadero",108:"falso",109:"null",110:"undefined",113:"new",114:"Array"},productions_:[0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[25,3],[25,2],[28,3],[20,2],[21,2],[22,2],[22,3],[9,9],[9,8],[9,6],[9,8],[9,7],[9,5],[36,3],[36,1],[41,3],[41,4],[24,4],[24,3],[43,5],[23,5],[46,6],[47,2],[47,1],[49,4],[19,9],[19,8],[19,8],[52,1],[52,1],[17,5],[18,7],[16,3],[16,1],[59,7],[59,5],[39,3],[39,2],[53,1],[53,1],[11,2],[66,3],[66,1],[67,6],[67,4],[67,5],[67,3],[67,3],[67,1],[15,7],[70,6],[70,5],[70,4],[70,3],[71,3],[72,5],[72,3],[13,3],[13,1],[73,2],[73,2],[14,2],[14,1],[14,2],[76,2],[76,3],[76,2],[76,4],[76,5],[76,4],[76,4],[77,4],[77,3],[10,7],[10,4],[32,3],[32,3],[32,2],[32,1],[32,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,1],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,1],[91,1],[91,2],[91,1],[91,1],[91,1],[91,1],[91,1],[91,3],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[112,5],[111,3],[111,2],[42,3],[42,1],[34,1]],performAction:function(e,t,i,s,O,N,R){var I=N.length-1;switch(O){case 1:return N[I-1];case 2:N[I-1].hijos.push(N[I]);break;case 3:this.$=new h.a("SENTENCIAS","SENTENCIAS",R[I],[N[I]]);break;case 4:case 44:N[I-1].hijos.push(N[I]),this.$=N[I-1];break;case 5:this.$=new h.a("SENTENCIAS","SENTENCIAS",R[I],[N[I]]);break;case 6:case 7:case 8:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 50:case 51:case 55:case 80:case 100:case 101:case 108:case 124:case 125:case 126:case 127:case 128:case 129:this.$=N[I];break;case 9:case 10:case 11:case 21:case 22:case 24:case 76:this.$=N[I-1];break;case 23:this.$=new h.a("SENTENCIAS","SENTENCIAS",[0,0],[]);break;case 25:this.$=new C.a("BREAK","BREAK",R[I-1],[]);break;case 26:this.$=new k.a("CONTINUE","CONTINUE",R[I-1],[]);break;case 27:this.$=new L.a("RETURN","RETURN",R[I-1],[]);break;case 28:this.$=new L.a("RETURN","RETURN",R[I-2],[N[I-1]]);break;case 29:this.$=new u.a("DECLAFUNCION","DECLAFUNCION",R[I-7],[N[I-7],N[I-5],N[I-2],N[I-1],N[I]]);break;case 30:this.$=new u.a("DECLAFUNCION","DECLAFUNCION",R[I-6],[N[I-6],N[I-4],N[I-1],new r.a("LISTADIMS","LISTADIMS",R[I-7],0),N[I]]);break;case 31:this.$=new u.a("DECLAFUNCION","DECLAFUNCION",R[I-4],[N[I-4],N[I-2],new r.a("ID","void",R[I-5],[]),new r.a("LISTADIMS","LISTADIMS",R[I-5],0),N[I]]);break;case 32:this.$=new u.a("DECLAFUNCION","DECLAFUNCION",R[I-6],[N[I-6],new r.a("LISTAPARAMS","LISTAPARAMS",R[I-7],[]),N[I-2],N[I-1],N[I]]);break;case 33:this.$=new u.a("DECLAFUNCION","DECLAFUNCION",R[I-5],[N[I-5],new r.a("LISTAPARAMS","LISTAPARAMS",R[I-6],[]),N[I-1],new r.a("LISTADIMS","LISTADIMS",R[I-6],0),N[I]]);break;case 34:this.$=new u.a("DECLAFUNCION","DECLAFUNCION",R[I-3],[N[I-3],new r.a("LISTAPARAMS","LISTAPARAMS",R[I-4],[]),new r.a("ID","void",R[I-4],[]),new r.a("LISTADIMS","LISTADIMS",R[I-4],0),N[I]]);break;case 35:case 63:case 133:N[I-2].hijos.push(N[I]),this.$=N[I-2];break;case 36:this.$=new r.a("LISTAPARAMS","LISTAPARAMS",R[I],[N[I]]);break;case 37:this.$=new r.a("PARAM","PARAM",R[I-1],[N[I-2],N[I],new r.a("LISTADIMS","LISTADIMS",R[I-2],0)]);break;case 38:this.$=new r.a("PARAM","PARAM",R[I-2],[N[I-3],N[I-1],N[I]]);break;case 39:this.$=new y.a("LLAMADAFUNCION","LLAMADAFUNCION",R[I-3],[N[I-3],N[I-1]]);break;case 40:this.$=new y.a("LLAMADAFUNCION","LLAMADAFUNCION",R[I-2],[N[I-2],new r.a("LISTAEXP","LISTAEXP",R[I-2],[])]);break;case 41:this.$=new v.a("TERNARIO","TERNARIO",R[I-4],[N[I-4],N[I-2],N[I]]);break;case 42:this.$=new A.a("SWITCH","SWITCH",R[I-2],[N[I-2],N[I]]);break;case 43:this.$=new A.a("SWITCH","BLOQUESWITCH",R[I-5],[N[I-4],N[I-1]]);break;case 45:let t=new A.a("LISTACASE","LISTACASE",R[I],[N[I]]);this.$=t;break;case 46:this.$=new A.a("CASE","CASE",R[I-3],[N[I-2],N[I]]);break;case 47:this.$=new S.a("FOR","FOR",R[I-8],[N[I-6],N[I-4],N[I-2],N[I]]);break;case 48:this.$=new S.a("FORIN","FORIN",R[I-7],[N[I-4],N[I-2],N[I]]);break;case 49:this.$=new S.a("FOROF","FOROF",R[I-7],[N[I-4],N[I-2],N[I]]);break;case 52:this.$=new T.a("WHILE","WHILE",R[I-4],[N[I-2],N[I]]);break;case 53:this.$=new E.a("DO","DO",R[I-6],[N[I-2],N[I-5]]);break;case 54:let i=new w.a("else","ELSE",R[I-1],[N[I]]);N[I-2].hijos.push(i),this.$=N[I-2];break;case 56:let s=new w.a("IFELSE","IFELSE",R[I-6],[N[I-2],N[I]]);N[I-6].hijos.push(s),this.$=N[I-6];break;case 57:let O=new w.a("IF","IF",R[I-4],[N[I-2],N[I]]);this.$=new w.a("IFMAESTRO","IFMAESTRO",R[I-4],[O]);break;case 58:N[I-2].hijos=N[I-2].hijos+1,this.$=N[I-2];break;case 59:this.$=new r.a("LISTADIMS","LISTADIMS",R[I-1],1);break;case 60:this.$=new r.a("const","const",R[I],[]);break;case 61:this.$=new r.a("let","let",R[I],[]);break;case 62:this.$=new p.a("DECLA","DECLA",R[I-1],[N[I-1],N[I]]);break;case 64:this.$=new p.a("LISTADECLA","LISTADECLA",R[I],[N[I]]);break;case 65:this.$=new p.a("DECLAARR1","DECLAELEMENT",R[I-5],[N[I-5],N[I-3],N[I-2],N[I]]);break;case 66:this.$=new p.a("DECLAARR2","DECLAELEMENT",R[I-3],[N[I-3],N[I-1],N[I]]);break;case 67:this.$=new p.a("DECLAVAR1","DECLAELEMENT",R[I-4],[N[I-4],N[I-2],N[I]]);break;case 68:this.$=new p.a("DECLAVAR2","DECLAELEMENT",R[I-2],[N[I-2],N[I]]);break;case 69:this.$=new p.a("DECLAVAR3","DECLAELEMENT",R[I-2],[N[I-2],N[I]]);break;case 70:this.$=new p.a("DECLAVAR4","DECLAELEMENT",R[I],[N[I]]);break;case 71:this.$=new b.a("DEFOBJ","DEFOBJ",R[I-5],[N[I-5],N[I-2]]);break;case 72:N[I-5].hijos.push(new r.a("ATTR","ATTR",R[I-5],[N[I-3],N[I-1],N[I]])),this.$=N[I-5];break;case 73:N[I-4].hijos.push(new r.a("ATTR","ATTR",R[I-4],[N[I-2],N[I]])),this.$=N[I-4];break;case 74:this.$=new r.a("LATTR","LATTR",R[I-3],[new r.a("ATTR","ATTR",R[I-3],[N[I-3],N[I-1],N[I]])]);break;case 75:this.$=new r.a("LATTR","LATTR",R[I-2],[new r.a("ATTR","ATTR",R[I-2],[N[I-2],N[I]])]);break;case 77:N[I-4].hijos.push(new r.a("ATTRDEF","ATTRDEF",R[I-4],[N[I-2],N[I]])),this.$=N[I-4];break;case 78:this.$=new _.a("EXPOBJ","EXPOBJ",R[I-2],[new r.a("ATTR","ATTR",R[I-2],[N[I-2],N[I]])]);break;case 79:this.$=new m.a("ASIGNACION","ASIGNACION",R[I-2],[N[I-2],N[I]]);break;case 81:this.$=new m.a("ASIGNACION","ASIGNACION",R[I-1],[N[I-1],new n.a("MAS","+",R[I-1],[N[I-1],new n.a("NUMERICO","1",R[I-1],[])])]);break;case 82:this.$=new m.a("ASIGNACION","ASIGNACION",R[I-1],[N[I-1],new n.a("MENOS","-",R[I-1],[N[I-1],new n.a("NUMERICO","1",R[I-1],[])])]);break;case 83:N[I-1].hijos=N[I-1].hijos.concat(N[I]),this.$=N[I-1];break;case 84:this.$=new d.a("LLAMADARECURSIVA","LLAMADARECURSIVA",R[I],[N[I]]);break;case 85:this.$=new d.a("LLAMADARECURSIVA","LLAMADARECURSIVA",R[I-1],[N[I-1],N[I]]);break;case 86:this.$=[N[I]];break;case 87:this.$=[N[I-1],N[I]];break;case 88:this.$=[new r.a("LENGTH","LENGTH",R[I-1],[])];break;case 89:this.$=[new r.a("POP","POP",R[I-3],[])];break;case 90:this.$=[new r.a("PUSH","PUSH",R[I-4],[N[I-1]])];break;case 91:this.$=[new r.a("TOLOWER","TOLOWER",R[I-3],[N[I]])];break;case 92:this.$=[new r.a("TOUPPER","TOUPPER",R[I-3],[N[I]])];break;case 93:N[I-3].hijos.push(N[I-1]),this.$=N[I-3];break;case 94:this.$=new r.a("LISTAACCESODIMS","LISTAACCESODIMS",R[I-1],[N[I-1]]);break;case 95:this.$=new l.a("imprimir","PRINT",R[I-6],[N[I-2]]);break;case 96:this.$=new c.a("imprimir","PRINT",R[I-3],[]);break;case 97:this.$=new o.a("AND","&&",R[I-2],[N[I-2],N[I]]);break;case 98:this.$=new o.a("OR","||",R[I-2],[N[I-2],N[I]]);break;case 99:this.$=new o.a("NOT","!",R[I-1],[N[I]]);break;case 102:this.$=new a.a("MAYOR",">",R[I-2],[N[I-2],N[I]]);break;case 103:this.$=new a.a("MENOR","<",R[I-2],[N[I-2],N[I]]);break;case 104:this.$=new a.a("MENOROIGUAL","<=",R[I-2],[N[I-2],N[I]]);break;case 105:this.$=new a.a("MAYOROIGUAL",">=",R[I-2],[N[I-2],N[I]]);break;case 106:this.$=new a.a("IGUALIGUAL","==",R[I-2],[N[I-2],N[I]]);break;case 107:this.$=new a.a("DIFERENTE","!=",R[I-2],[N[I-2],N[I]]);break;case 109:this.$=new n.a("MAS","+",R[I-2],[N[I-2],N[I]]);break;case 110:this.$=new n.a("MENOS","-",R[I-2],[N[I-2],N[I]]);break;case 111:this.$=new n.a("POR","*",R[I-2],[N[I-2],N[I]]);break;case 112:this.$=new n.a("POTENCIA","**",R[I-2],[N[I-2],N[I]]);break;case 113:this.$=new n.a("DIV","/",R[I-2],[N[I-2],N[I]]);break;case 114:this.$=new n.a("MODULO","%",R[I-2],[N[I-2],N[I]]);break;case 115:this.$=new n.a("NUMERICOE",e,R[I],[]);break;case 116:this.$=new n.a("NUMERICO",e,R[I],[]);break;case 117:this.$=new n.a("NEGADO","-",R[I-1],[N[I]]);break;case 118:this.$=new n.a("STRING",e.split('\\"').join('"').split("\\t").join("\t").split("\\n").join("\n").split("\\\\").join("\\").split("\\r").join("\r"),R[I],[]);break;case 119:this.$=new n.a("BOOLEAN","true",R[I],[]);break;case 120:this.$=new n.a("BOOLEAN","false",R[I],[]);break;case 121:this.$=new n.a("NULL","null",R[I],[]);break;case 122:this.$=new n.a("UNDEFINED","undefined",R[I],[]);break;case 123:N[I-1].parentesis=!0,this.$=N[I-1];break;case 130:this.$=new g.a("EXPARRAYNEW","EXPARRAYNEW",R[I-3],[N[I-1]]);break;case 131:this.$=new f.a("EXPARRAY","EXPARRAY",R[I-1],[N[I-1]]);break;case 132:this.$=new f.a("EXPARRAY","EXPARRAY",R[I],[]);break;case 134:this.$=new r.a("LISTAEXP","LISTAEXP",R[I],[N[I]]);break;case 135:this.$=new r.a("ID",e,R[I],[])}},table:[{3:1,4:2,6:3,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:s,33:N,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},{1:[3]},{5:[1,39],6:40,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:s,33:N,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},e(V,[2,3]),e(V,[2,6]),e(V,[2,7]),e(B,[2,8]),{12:[1,41]},{12:[1,42]},{12:[1,43],68:z,74:Y,75:G,76:45,78:J},e(B,[2,12]),e(B,[2,13]),e(B,[2,14]),e(B,[2,15]),e(B,[2,16]),e(B,[2,17]),e(B,[2,18]),e(B,[2,19]),e(B,[2,20]),{12:[1,49]},{34:50,54:x},{78:[1,51]},{35:[1,52]},{34:55,54:x,66:53,67:54},e(Q,[2,80]),e(W,q,{77:56,35:[1,57],62:X}),{34:59,54:x},e(B,[2,55],{60:[1,60]}),{35:[1,61]},{25:62,26:K},{35:[1,64]},{12:[1,65]},{12:[1,66]},{12:[1,67],14:82,24:87,26:Z,32:68,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{35:[1,91]},{54:[2,60]},{54:[2,61]},e([12,26,27,35,37,38,40,44,62,63,68,74,75,78,87,88,92,93,94,95,96,97,98,99,100,101,102,103],ue),{35:[1,92]},{1:[2,1]},e(V,[2,2]),e(B,[2,9]),e(B,[2,10]),e(B,[2,11]),{14:82,24:87,26:Z,32:93,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(W,[2,83]),e(de,[2,81]),e(de,[2,82]),{34:94,54:x,79:[1,95],80:[1,96],81:[1,97],82:[1,98],83:[1,99]},e(B,[2,21]),{35:[1,100]},{85:[1,101]},{37:[1,102]},{12:[2,62],40:[1,103]},e(me,[2,64]),e(me,[2,70],{38:[1,104],68:[1,105]}),e(W,[2,85],{62:ge}),{14:82,24:87,26:Z,32:109,34:25,35:ee,37:[1,108],42:107,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:110,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{68:[1,111]},{25:112,26:K,61:[1,113]},{14:82,24:87,26:Z,32:114,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{57:[1,115]},{7:116,8:118,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,117],29:t,30:i,31:s,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},{11:121,13:122,14:123,34:124,52:119,53:120,54:x,64:D,65:M,73:24},e(B,[2,25]),e(B,[2,26]),e(B,[2,27]),{12:[1,125],44:fe,87:ye,88:be},{14:82,24:87,26:Z,32:129,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(_e,[2,100]),e(_e,[2,101]),e(_e,[2,108],{92:[1,130],93:[1,131],94:[1,132],95:[1,133],96:[1,134],97:[1,135],98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(de,[2,115]),e(de,[2,116]),{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:142,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(de,[2,118]),e(de,[2,119]),e(de,[2,120]),e(de,[2,121]),e(de,[2,122]),{14:82,24:87,26:Z,32:143,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(de,[2,124],{76:45,74:Y,75:G,78:J}),e(de,[2,125]),e(de,[2,126]),e(de,[2,127]),e(de,[2,128]),e(de,[2,129]),{14:82,24:87,26:Z,32:109,34:25,35:ee,42:144,43:71,54:x,62:te,63:[1,145],71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{114:[1,146]},{34:148,54:x,72:147},{14:82,24:87,26:Z,32:149,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:150,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(Q,[2,79],{44:fe,87:ye,88:be}),e(W,[2,86],{77:151,62:X}),e(W,[2,88]),{35:[1,152]},{35:[1,153]},{35:[1,154]},{35:[1,155]},{34:159,36:156,37:[1,157],41:158,54:x},{35:[1,160]},{12:[1,161]},{34:55,54:x,67:162},{34:163,54:x},{14:82,24:87,26:Z,32:164,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:165,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{37:[1,166],40:ke},e(de,[2,40]),e(Le,[2,134],{44:fe,87:ye,88:be}),{44:fe,63:[1,168],87:ye,88:be},{26:[1,169]},e(B,[2,54]),{35:[1,170]},{37:[1,171],44:fe,87:ye,88:be},{35:[1,172]},{8:174,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,173],29:t,30:i,31:s,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},e(ve,[2,23]),e(Oe,[2,5]),{12:[1,175]},{34:55,54:[1,176],66:53,67:54},{12:[2,50]},{12:[2,51]},{68:z,74:Y,75:G,76:45,78:J},e([68,74,75,78],q,{77:56,62:X}),e(B,[2,28]),{14:82,24:87,26:Z,32:177,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:178,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:179,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(_e,[2,99]),{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:180,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:181,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:182,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:183,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:184,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:185,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:186,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:187,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:188,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:189,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:190,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,34:25,35:ee,54:x,62:te,71:85,73:86,91:191,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(de,[2,117]),{37:[1,192],44:fe,87:ye,88:be},{40:ke,63:[1,193]},e(de,[2,132]),{35:[1,194]},{27:[1,195],40:[1,196]},{38:[1,197]},{37:[1,198],44:fe,87:ye,88:be},{37:[1,199],44:fe,87:ye,88:be},e(W,[2,87],{62:ge}),{37:[1,200]},{14:82,24:87,26:Z,32:201,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{37:[1,202]},{37:[1,203]},{37:[1,204],40:[1,205]},{26:Ne,28:207,38:[1,206]},e(Re,[2,36]),{38:[1,209]},{14:82,24:87,26:Z,32:109,34:25,35:ee,42:210,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(B,[2,96]),e(me,[2,63]),e(me,[2,69],{39:211,62:Ie,68:[1,212]}),e(me,[2,68],{44:fe,87:ye,88:be}),{44:fe,63:[1,214],87:ye,88:be},e(de,[2,39]),{14:82,24:87,26:Z,32:215,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(xe,[2,94]),{34:217,54:x,70:216},{14:82,24:87,26:Z,32:218,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{25:219,26:K},{14:82,24:87,26:Z,32:220,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(ve,[2,22]),e(Oe,[2,4]),{14:82,24:87,26:Z,32:221,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e([12,38,40,68],ue,{55:[1,222],56:[1,223]}),e(_e,[2,97]),e([12,27,37,38,40,44,63,88],[2,98],{87:ye}),{38:[1,224],44:fe,87:ye,88:be},e(_e,[2,102],{98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(_e,[2,103],{98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(_e,[2,104],{98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(_e,[2,105],{98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(_e,[2,106],{98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(_e,[2,107],{98:we,99:Te,100:Ee,101:Ae,102:Se,103:Ce}),e(Pe,[2,109],{100:Ee,101:Ae,102:Se,103:Ce}),e(Pe,[2,110],{100:Ee,101:Ae,102:Se,103:Ce}),e(je,[2,111],{101:Ae,103:Ce}),e(de,[2,112]),e(je,[2,113],{101:Ae,103:Ce}),e(de,[2,114]),e(de,[2,123]),e(de,[2,131]),{14:82,24:87,26:Z,32:225,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},e(de,[2,76]),{34:226,54:x},{14:82,24:87,26:Z,32:227,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{26:[1,229],46:228},{25:230,26:K},e(W,[2,89]),{37:[1,231],44:fe,87:ye,88:be},e(W,[2,91]),e(W,[2,92]),{26:Ne,28:233,38:[1,232]},{34:159,41:234,54:x},{34:235,54:x},e(V,[2,34]),{4:236,6:3,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:s,33:N,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},{34:237,54:x},{37:[1,238],40:ke},e(me,[2,66],{62:$e,68:[1,239]}),{14:82,24:87,26:Z,32:241,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{63:[1,242]},e(xe,[2,93]),e(Le,[2,133],{44:fe,87:ye,88:be}),{27:[1,243],40:[1,244]},{38:[1,245]},{37:[1,246],44:fe,87:ye,88:be},e(B,[2,52]),{37:[1,247],44:fe,87:ye,88:be},{12:[1,248],44:fe,87:ye,88:be},{14:82,24:87,26:Z,32:249,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:250,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{14:82,24:87,26:Z,32:251,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{37:[1,252],44:fe,87:ye,88:be},{38:[1,253]},e(De,[2,78],{44:fe,87:ye,88:be}),e(B,[2,42]),{47:254,49:255,50:Me},e(ve,[2,57]),e(W,[2,90]),{34:257,54:x},e(V,[2,31]),e(Re,[2,35]),{26:Ne,28:259,39:258,62:Ie},{6:40,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,260],29:t,30:i,31:s,33:N,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},e(Re,[2,37],{39:261,62:Ie}),{12:[1,262]},{14:82,24:87,26:Z,32:263,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{63:[1,264]},e(me,[2,67],{44:fe,87:ye,88:be}),e(Fe,[2,59]),{12:[1,265]},{34:266,54:x},{34:267,54:x},{25:268,26:K},{12:[1,269]},{13:270,14:123,34:124,54:x,73:24},{37:[1,271],44:fe,87:ye,88:be},{37:[1,272],44:fe,87:ye,88:be},e([12,27,37,38,40,63],[2,41],{44:fe,87:ye,88:be}),e(de,[2,130]),{14:82,24:87,26:Z,32:273,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{48:[1,274],49:275,50:Me},e(He,[2,45]),{14:82,24:87,26:Z,32:276,34:25,35:ee,43:71,54:x,62:te,71:85,73:86,89:ie,90:70,91:72,99:se,104:re,105:ne,106:ae,107:oe,108:le,109:ce,110:he,111:83,112:84,113:pe},{26:Ne,28:278,39:277,62:Ie},{26:Ne,28:279,62:$e},e(V,[2,33]),e(V,[2,24]),e(Re,[2,38],{62:$e}),e(B,[2,95]),e(me,[2,65],{44:fe,87:ye,88:be}),e(Fe,[2,58]),e(B,[2,71]),{38:[1,280]},e(De,[2,75],{39:281,62:Ie}),e(ve,[2,56]),e(B,[2,53]),{37:[1,282]},{25:283,26:K},{25:284,26:K},e(De,[2,77],{44:fe,87:ye,88:be}),{38:[1,285]},e(He,[2,44]),{38:[1,286],44:fe,87:ye,88:be},{26:Ne,28:287,62:$e},e(V,[2,30]),e(V,[2,32]),{34:288,54:x},e(De,[2,74],{62:$e}),{25:289,26:K},e(B,[2,48]),e(B,[2,49]),{7:290,8:118,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:s,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},{7:291,8:118,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:s,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},e(V,[2,29]),e(De,[2,73],{39:292,62:Ie}),e(B,[2,47]),{8:174,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,293],29:t,30:i,31:s,34:25,45:R,51:I,53:23,54:x,57:P,58:j,59:27,61:$,64:D,65:M,69:F,73:24,84:H,86:U},e(He,[2,46],{10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,53:23,73:24,34:25,59:27,8:174,29:t,30:i,31:s,45:R,51:I,54:x,57:P,58:j,61:$,64:D,65:M,69:F,84:H,86:U}),e(De,[2,72],{62:$e}),e(B,[2,43])],defaultActions:{35:[2,60],36:[2,61],39:[2,1],121:[2,50],122:[2,51]},parseError:function(e,t){if(!t.recoverable){var i=new Error(e);throw i.hash=t,"INVALID"==t.token?window.errores.push(new O.a("Lexico","Lexema: "+t.text+", no reconocido.",t.loc.last_line,t.loc.last_column)):window.errores.push(new O.a("Sintactico","Error en: "+t.text+", se esperaba "+t.expected+".",t.loc.last_line,t.loc.last_column)),i}this.trace(e)},parse:function(e){var t=this,i=[0],s=[null],r=[],n=this.table,a="",o=0,l=0,c=0,h=2,p=1,u=r.slice.call(arguments,1),d=Object.create(this.lexer),m={yy:{}};for(var g in this.yy)Object.prototype.hasOwnProperty.call(this.yy,g)&&(m.yy[g]=this.yy[g]);d.setInput(e,m.yy),m.yy.lexer=d,m.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var f=d.yylloc;r.push(f);var y=d.options&&d.options.ranges;"function"==typeof m.yy.parseError?this.parseError=m.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var b,_,w,T,E,A,S,C,k,L=function(){var e;return"number"!=typeof(e=d.lex()||p)&&(e=t.symbols_[e]||e),e},v={};;){if(w=i[i.length-1],this.defaultActions[w]?T=this.defaultActions[w]:(null==b&&(b=L()),T=n[w]&&n[w][b]),void 0===T||!T.length||!T[0]){var O="";for(A in k=[],n[w])this.terminals_[A]&&A>h&&k.push("'"+this.terminals_[A]+"'");O=d.showPosition?"Parse error on line "+(o+1)+":\n"+d.showPosition()+"\nExpecting "+k.join(", ")+", got '"+(this.terminals_[b]||b)+"'":"Parse error on line "+(o+1)+": Unexpected "+(b==p?"end of input":"'"+(this.terminals_[b]||b)+"'"),this.parseError(O,{text:d.match,token:this.terminals_[b]||b,line:d.yylineno,loc:f,expected:k})}if(T[0]instanceof Array&&T.length>1)throw new Error("Parse Error: multiple actions possible at state: "+w+", token: "+b);switch(T[0]){case 1:i.push(b),s.push(d.yytext),r.push(d.yylloc),i.push(T[1]),b=null,_?(b=_,_=null):(l=d.yyleng,a=d.yytext,o=d.yylineno,f=d.yylloc,c>0&&c--);break;case 2:if(S=this.productions_[T[1]][1],v.$=s[s.length-S],v._$={first_line:r[r.length-(S||1)].first_line,last_line:r[r.length-1].last_line,first_column:r[r.length-(S||1)].first_column,last_column:r[r.length-1].last_column},y&&(v._$.range=[r[r.length-(S||1)].range[0],r[r.length-1].range[1]]),void 0!==(E=this.performAction.apply(v,[a,l,o,m.yy,T[1],s,r].concat(u))))return E;S&&(i=i.slice(0,-1*S*2),s=s.slice(0,-1*S),r=r.slice(0,-1*S)),i.push(this.productions_[T[1]][0]),s.push(v.$),r.push(v._$),C=n[i[i.length-2]][i[i.length-1]],i.push(C);break;case 3:return!0}}return!0},treeparser:{raiz:null},error:{error:[]}},Ve={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,i=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var s=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),i.length-1&&(this.yylineno-=i.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:i?(i.length===s.length?this.yylloc.first_column:0)+s[s.length-i.length].length-i[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var i,s,r;if(this.options.backtrack_lexer&&(r={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(r.yylloc.range=this.yylloc.range.slice(0))),(s=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=s.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:s?s[s.length-1].length-s[s.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],i=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),i)return i;if(this._backtrack){for(var n in r)this[n]=r[n];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,i,s;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var r=this._currentRules(),n=0;n<r.length;n++)if((i=this._input.match(this.rules[r[n]]))&&(!t||i[0].length>t[0].length)){if(t=i,s=n,this.options.backtrack_lexer){if(!1!==(e=this.test_match(i,r[n])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,r[s]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return e||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{ranges:!0},performAction:function(e,t,i,s){switch(i){case 0:case 1:break;case 2:this.begin("comment");break;case 3:this.popState();break;case 4:case 5:break;case 6:return 105;case 7:return 104;case 8:return 103;case 9:return 74;case 10:return 101;case 11:return 75;case 12:return 96;case 13:return 97;case 14:return 95;case 15:return 94;case 16:return 92;case 17:return 93;case 18:return 44;case 19:return 38;case 20:return 87;case 21:return 88;case 22:return 68;case 23:return 89;case 24:return 99;case 25:return 98;case 26:return 103;case 27:return 100;case 28:return 102;case 29:return 35;case 30:return 37;case 31:return 26;case 32:return 27;case 33:return 62;case 34:return 63;case 35:return 12;case 36:return 40;case 37:return 78;case 38:return 69;case 39:return 61;case 40:return 60;case 41:return 84;case 42:return 85;case 43:return 57;case 44:return 58;case 45:return 31;case 46:return 30;case 47:return 29;case 48:return 48;case 49:return 50;case 50:return 45;case 51:return 107;case 52:return 108;case 53:return"double";case 54:return 65;case 55:return 64;case 56:return 86;case 57:return 51;case 58:return 79;case 59:return 109;case 60:return 110;case 61:return 81;case 62:return 80;case 63:return 33;case 64:return 83;case 65:return 82;case 66:return"concat";case 67:return 113;case 68:return 114;case 69:return 55;case 70:return 56;case 71:case 72:return t.yytext=t.yytext.substr(1,t.yyleng-2),106;case 73:return 54;case 74:return 5;case 75:return"INVALID"}},rules:[/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:(0|[0-9]+))/,/^(?:%)/,/^(?:\+\+)/,/^(?:\*\*)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\?)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:!)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:type\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:double\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:length\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:toUpperCase\b)/,/^(?:toLowerCase\b)/,/^(?:concat\b)/,/^(?:new\b)/,/^(?:Array\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:"((\\")|[^"])*")/,/^(?:'((\\')|[^'])*')/,/^(?:(ñ|Ñ|_|[a-zA-Z])(ñ|Ñ|[a-zA-Z]|[0-9]|_)*)/,/^(?:$)/,/^(?:.)/],conditions:{comment:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],inclusive:!0},INITIAL:{rules:[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],inclusive:!0}}};function Be(){this.yy={}}return Ue.lexer=Ve,Be.prototype=Ue,Ue.Parser=Be,new Be}();"undefined"!=typeof exports&&(exports.parser=N,exports.Parser=N.Parser,exports.parse=function(){return N.parse.apply(N,arguments)},exports.main=function(t){t[1]||(console.log("Usage: "+t[0]+" FILE"),e.exit(1))},i.c[i.s]===s&&exports.main(e.argv.slice(1)))}).call(this,i(59),i(60)(e))},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(55);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s),this.parentesis=!1}ejecutar(){switch(this.token){case"MAYOR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e>t}case"MENOR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e<t}case"MAYOROIGUAL":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e>=t}case"MENOROIGUAL":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e<=t}case"IGUALIGUAL":return this.hijos[0].ejecutar()==this.hijos[1].ejecutar();case"DIFERENTE":return this.hijos[0].ejecutar()!=this.hijos[1].ejecutar();default:return!1}}traducir(){if(this.parentesis)switch(this.token){case"MAYOR":return"("+this.hijos[0].traducir()+" > "+this.hijos[1].traducir()+")";case"MENOR":return"("+this.hijos[0].traducir()+" < "+this.hijos[1].traducir()+")";case"MAYOROIGUAL":return"("+this.hijos[0].traducir()+" >= "+this.hijos[1].traducir()+")";case"MENOROIGUAL":return"("+this.hijos[0].traducir()+" <= "+this.hijos[1].traducir()+")";case"IGUALIGUAL":return"("+this.hijos[0].traducir()+" == "+this.hijos[1].traducir()+")";case"DIFERENTE":return"("+this.hijos[0].traducir()+" != "+this.hijos[1].traducir()+")";default:return""}switch(this.token){case"MAYOR":return this.hijos[0].traducir()+" > "+this.hijos[1].traducir();case"MENOR":return this.hijos[0].traducir()+" < "+this.hijos[1].traducir();case"MAYOROIGUAL":return this.hijos[0].traducir()+" >= "+this.hijos[1].traducir();case"MENOROIGUAL":return this.hijos[0].traducir()+" <= "+this.hijos[1].traducir();case"IGUALIGUAL":return this.hijos[0].traducir()+" == "+this.hijos[1].traducir();case"DIFERENTE":return this.hijos[0].traducir()+" != "+this.hijos[1].traducir();default:return""}}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(55);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s),this.parentesis=!1}ejecutar(){switch(this.token){case"AND":{let e=this.hijos[0].ejecutar();if("boolean"!=typeof e)return window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+".",this.location.last_line,this.location.last_column)),!1;if(0==e)return!1;let t=this.hijos[1].ejecutar();return"boolean"!=typeof t?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof t+".",this.location.last_line,this.location.last_column)),!1):t}case"OR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"boolean"!=typeof e||"boolean"!=typeof t?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e||t}case"NOT":{let e=this.hijos[0].ejecutar();return"boolean"!=typeof e?(window.errores.push(new r.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+".",this.location.last_line,this.location.last_column)),!1):!e}default:return!1}}traducir(){if(this.parentesis)switch(this.token){case"AND":return"("+this.hijos[0].traducir()+" && "+this.hijos[1].traducir()+")";case"OR":return"("+this.hijos[0].traducir()+" || "+this.hijos[1].traducir()+")";case"NOT":return"(!"+this.hijos[0].traducir()+")";default:return""}switch(this.token){case"AND":return this.hijos[0].traducir()+" && "+this.hijos[1].traducir();case"OR":return this.hijos[0].traducir()+" || "+this.hijos[1].traducir();case"NOT":return"!"+this.hijos[0].traducir();default:return""}}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e,t="";for(let i=0;i<this.hijos[0].hijos.length;i++)e=this.hijos[0].hijos[i].ejecutar(),"number"==typeof e&&(t+=String(e)),"string"==typeof e&&(t+=e),"boolean"==typeof e&&(t+=String(e)),"Array"==e.constructor.name&&(t+="["+e.toString()+"]");window.textoConsola=window.textoConsola.concat(t.split("\n")),window.dispatchEvent(new CustomEvent("console-changed",{detail:window.textoConsola}))}traducir(){let e="print(";for(let t=0;t<this.hijos[0].hijos.length;t++)e+=this.hijos[0].hijos[t].traducir(),t<this.hijos[0].hijos.length-1&&(e+=", ");return e+=', "\\n");',e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e=window.tablaSimbolos.graficarTabla().split("\n");window.textoConsola=window.textoConsola.concat(e),window.dispatchEvent(new CustomEvent("console-changed",{detail:window.textoConsola}))}traducir(){return"graficar_ts();"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);i(55);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){for(let e=0;e<this.hijos.length;e++){let t=this.hijos[e].ejecutar();if("object"==typeof t&&null!=t&&"EscapeEstructura"==t.constructor.name)return t}}ejecutar2(){for(let e=0;e<this.hijos.length;e++)this.hijos[e].ejecutar2()}ejecutar3(){for(let e=0;e<this.hijos.length;e++)this.hijos[e].ejecutar3()}traducir(){let e="";for(let t=0;t<this.hijos.length;t++){for(let t=0;t<window.currentTabs;t++)e+="\t";e+=this.hijos[t].traducir(),"ASIGNACION"==this.hijos[t].token||"LLAMADARECURSIVA"==this.hijos[t].token||"LLAMADAFUNCION"==this.hijos[t].token?e+=";\n":"DECLA"==this.hijos[t].token?e+="":e+="\n"}return e}declasGlobales(){let e="";for(let t=0;t<this.hijos.length;t++)e+=this.hijos[t].declasGlobales(),"DECLA"==this.hijos[t].token&&(e+="\n");return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var s=i(54),r=i(55),n=i(71);const a=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){}ejecutar2(){let e=this.hijos[0].texto,t=this.hijos[2].texto,i=this.hijos[3].hijos,s=this.hijos[4];if(!this.validarTipo(t))return void window.errores.push(new r.a("Semantico","No pudo declararse funcion<<"+e+">>. El tipo ("+t+") no existe.",this.location.last_line,this.location.last_column));let a=[];for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t].hijos[1].texto,s=this.hijos[1].hijos[t].hijos[0].texto,o=this.hijos[1].hijos[t].hijos[2].hijos;if(!this.validarTipo(i))return void window.errores.push(new r.a("Semantico","No pudo declararse funcion<<"+e+">>. El tipo ("+i+") no existe.",this.location.last_line,this.location.last_column));a.push(new n.a(s,i,o))}window.tablaSimbolos.meterFuncion(e,a,t,s,i)||window.errores.push(new r.a("Semantico","Funcion <<"+e+">> no se pude insertar ya que existe una con la misma firma.",this.location.last_line,this.location.last_column))}validarTipo(e){if("number"==e)return!0;if("string"==e)return!0;if("boolean"==e)return!0;if("undefined"==e)return!0;if("null"==e)return!0;if("void"==e)return!0;return!!window.tablaObjetos.buscarObjeto(e)}traducir(){let e="";e+="number"==this.hijos[2].texto.toLowerCase()?"double":this.hijos[2].texto;for(let t=0;t<this.hijos[3].hijos;t++)e+="[]";e+=" "+this.hijos[0].texto+" (";for(let t=0;t<this.hijos[1].hijos.length;t++){e+="number"==this.hijos[1].hijos[t].hijos[1].texto.toLowerCase()?"double":this.hijos[1].hijos[t].hijos[1].texto;for(let i=0;i<this.hijos[1].hijos[t].hijos[2].hijos;i++)e+="[]";e+=" "+this.hijos[1].hijos[t].hijos[0].texto,t<this.hijos[1].hijos.length-1&&(e+=", ")}return e+=")",e+="{\n"+this.hijos[4].traducir()+"}\n",window.strFunciones+=e,""}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var s=i(54),r=i(55),n=i(61);const a=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e;for(let t=0;t<=this.hijos.length-1;t++)switch(this.hijos[t].token){case"ID":if(0==t){if(e=window.tablaSimbolos.buscarVariableSoloNombre(this.hijos[t].texto),!e)return window.errores.push(new r.a("Semantico","Variable <<"+this.hijos[t].texto+">> no econtrada. Se retorno 0 para recuperar.",this.location.last_line,this.location.last_column)),0;if(e.asigIndice>1)return window.errores.push(new r.a("Semantico","Variable <<"+this.hijos[t].texto+">> no se puede acceder ya que no se definio.",this.location.last_line,this.location.last_column)),0;e=e}else{if("tipo"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a atributo en <<"+e.nombre+">> pero no es un tipo.",this.location.last_line,this.location.last_column)),0;if(null==e||null==e)return window.errores.push(new r.a("Semantico","Tipo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let i=e.valor.buscarAtributo(this.hijos[t].texto);if(!i)return window.errores.push(new r.a("Semantico","Atributo <<"+this.hijos[t].texto+">> no existe.",this.location.last_line,this.location.last_column)),0;e=i}break;case"LENGTH":if("array"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new r.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;e=new n.a("let",e.nombre,e.valor.length,"number","variable",0,1);break;case"POP":if("array"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new r.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;e=new n.a("let",e.nombre,e.valor.pop(),"number","variable",0,1);break;case"PUSH":if("array"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new r.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let i=this.hijos[t].hijos[0].ejecutar();if(this.getTipo(e.valor)!=this.getTipo(i))return window.errores.push(new r.a("Semantico","No se puede hacer push a <<"+e.nombre+">> tipos ("+e.tipo+", "+this.getTipo(i)+") no compatibles.",this.location.last_line,this.location.last_column)),0;e.valor.push(i),e=new n.a("let","auxtmp",0,"number","variable",0,1);break;case"LISTAACCESODIMS":if("array"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new r.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;if(e.dimensiones<this.hijos[t].hijos.length)return window.errores.push(new r.a("Semantico","El arreglo <<"+e.nombre+">> es de "+e.dimensiones+" dimensiones y se quiere acceder a "+this.hijos[t].hijos.length+".",this.location.last_line,this.location.last_column)),0;let s,a,o=[];for(let e=0;e<this.hijos[t].hijos.length;e++){if(s=this.hijos[t].hijos[e].ejecutar(),!Number.isInteger(s))return window.errores.push(new r.a("Semantico","Solo se puede acceder a posicion por medio de ENTEROS.",this.location.last_line,this.location.last_column)),0;o.push(s)}let l="";for(let t=0;t<o.length;t++){if(a=e.valor[o[t]],l+="["+o[t]+"]",null==a||null==a||t<o.length-1&&"Array"!=a.constructor.name)return window.errores.push(new r.a("Semantico","En arreglo <<"+e.nombre+">> se intenta acceder a una dimension que no esta definida ("+l+").",this.location.last_line,this.location.last_column)),0;e=new n.a("let",e.nombre,a,e._tipo,this.getRol(a),e.dimensiones)}}return e.valor}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||"null"==typeof e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if("null"==typeof e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}traducir(){let e="";for(let t=0;t<this.hijos.length;t++)switch(this.hijos[t].token){case"ID":e+=0==t?this.hijos[t].texto:"."+this.hijos[t].texto;break;case"LISTAACCESODIMS":for(let i=0;i<this.hijos[t].hijos.length;i++)e+="["+this.hijos[t].hijos[i].traducir()+"]";break;case"LENGTH":e+=".length";break;case"POP":e+=".pop()";break;case"PUSH":e+=".push("+this.hijos[t].hijos[0].traducir()+")";break;case"TOLOWER":e+=".toLowerCase()";break;case"TOUPPER":e+=".toUpperCase()"}return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var s=i(54),r=i(55),n=i(61);const a=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e,t=this.hijos[1].ejecutar();for(let t=0;t<this.hijos[0].hijos.length-1;t++)switch(this.hijos[0].hijos[t].token){case"ID":if(0==t){if(e=window.tablaSimbolos.buscarVariableSoloNombre(this.hijos[0].hijos[t].texto),!e)return window.errores.push(new r.a("Semantico","Variable <<"+this.hijos[0].hijos[t].texto+">> no econtrada. Se retorno 0 para recuperar.",this.location.last_line,this.location.last_column)),0;if(e.asigIndice>1)return window.errores.push(new r.a("Semantico","Variable <<"+this.hijos[0].hijos[t].texto+">> no se puede acceder ya que no se definio.",this.location.last_line,this.location.last_column)),0;e=e}else{if("tipo"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a atributo en <<"+e.nombre+">> pero no es un tipo.",this.location.last_line,this.location.last_column)),0;if(null==e||null==e)return window.errores.push(new r.a("Semantico","Tipo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let i=e.valor.buscarAtributo(this.hijos[0].hijos[t].texto);if(!i)return window.errores.push(new r.a("Semantico","Atributo <<"+this.hijos[0].hijos[t].texto+">> no existe.",this.location.last_line,this.location.last_column)),0;e=i}break;case"LISTAACCESODIMS":if("array"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(e.dimensiones<this.hijos[0].hijos[t].hijos.length)return window.errores.push(new r.a("Semantico","El arreglo <<"+e.nombre+">> es de "+e.dimensiones+" dimensiones y se quiere acceder a "+this.hijos[0].hijos[t].hijos.length+".",this.location.last_line,this.location.last_column)),0;let i,s,a=[];for(let e=0;e<this.hijos[0].hijos[t].hijos.length;e++){if(i=this.hijos[0].hijos[t].hijos[e].ejecutar(),!Number.isInteger(i))return window.errores.push(new r.a("Semantico","Solo se puede acceder a posicion por medio de ENTEROS.",this.location.last_line,this.location.last_column)),0;a.push(i)}let o="";for(let t=0;t<a.length;t++){if(s=e.valor[a[t]],o+="["+a[t]+"]",null==s||null==s||t<a.length-1&&"Array"!=s.constructor.name)return window.errores.push(new r.a("Semantico","En arreglo <<"+e.nombre+">> se intenta acceder a una dimension que no esta definida ("+o+").",this.location.last_line,this.location.last_column)),0;e=new n.a("let",e.nombre,s,e._tipo,this.getRol(s),e.dimensiones)}}let i=this.hijos[0].hijos.length-1;switch(this.hijos[0].hijos[i].token){case"ID":if(0!=i){if("tipo"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a atributo en <<"+e.nombre+">> pero no es un tipo.",this.location.last_line,this.location.last_column)),0;if(null==e||null==e)return window.errores.push(new r.a("Semantico","Tipo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let s=e.valor.buscarAtributo(this.hijos[0].hijos[i].texto);return s?this.comprobarCoincidenciaTipos(s.tipo,t)?(s.valor=t,s.tipo=this.getTipo(t),s.rol=this.getRol(t),s.dimensiones=this.getDimensiones(t),s.valor):(window.errores.push(new r.a("Semantico","No se puede asignar valor a atributo <<"+this.hijos[0].hijos[i].texto+">> tipos ("+s.tipo+", "+typeof t+") no son compatibles.",this.location.last_line,this.location.last_column)),0):(window.errores.push(new r.a("Semantico","Atributo <<"+this.hijos[0].hijos[i].texto+">> no existe.",this.location.last_line,this.location.last_column)),0)}if(e=window.tablaSimbolos.buscarVariableSoloNombre(this.hijos[0].hijos[i].texto),!e)return window.errores.push(new r.a("Semantico","Variable <<"+this.hijos[0].hijos[i].texto+">> no econtrada. Se retorno 0 para recuperar.",this.location.last_line,this.location.last_column)),0;if(e.asigIndice<=2)return this.comprobarCoincidenciaTipos(e.tipo,t)?(e.valor=t,e.tipo=this.getTipo(t),e.rol=this.getRol(t),e.dimensiones=this.getDimensiones(t),e.valor):void window.errores.push(new r.a("Semantico","No se puede asignar variable <<"+this.hijos[0].hijos[i].texto+">> los tipos ("+e.tipo+", "+typeof t+") no son compatibles.",this.location.last_line,this.location.last_column));if(3==e.asigIndice){let i=this.getTipo(t),s=this.getRol(t),r=this.getDimensiones(t);return e.valor=t,e.tipo=i,e.rol=s,e.dimensiones=r,void(e.asigIndice=1)}break;case"LISTAACCESODIMS":if("array"!=e.rol)return window.errores.push(new r.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(e.dimensiones<this.hijos[0].hijos[i].hijos.length)return window.errores.push(new r.a("Semantico","El arreglo <<"+e.nombre+">> es de "+e.dimensiones+" dimensiones y se quiere acceder a "+this.hijos[0].hijos[i].hijos.length+".",this.location.last_line,this.location.last_column)),0;let s,a,o=[];for(let e=0;e<this.hijos[0].hijos[i].hijos.length;e++){if(s=this.hijos[0].hijos[i].hijos[e].ejecutar(),!Number.isInteger(s))return window.errores.push(new r.a("Semantico","Solo se puede acceder a posicion por medio de ENTEROS.",this.location.last_line,this.location.last_column)),0;o.push(s)}let l="";for(let t=0;t<o.length-1;t++){if(a=e.valor[o[t]],l+="["+o[t]+"]",null==a||null==a||t<o.length-1&&"Array"!=a.constructor.name)return window.errores.push(new r.a("Semantico","En arreglo <<"+e.nombre+">> se intenta acceder a una dimension que no esta definida ("+l+").",this.location.last_line,this.location.last_column)),0;e=new n.a("let",e.nombre,a,e.tipo,this.getRol(a),e.dimensiones)}return this.comprobarCoincidenciaTipos(e.tipo,t)?(e.valor[o[o.length-1]]=t,e.valor[o[o.length-1]]):void window.errores.push(new r.a("Semantico","No se puede asignar <<"+e.nombre+">> tipos ("+e.tipo+", "+typeof e[o[o.length-1]]+") no son compatibles.",this.location.last_line,this.location.last_column))}}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||null==e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}comprobarCoincidenciaTipos(e,t){if(null==t||null==t)return!0;if("null"==e||"undefined"==e)return!0;if("number"==e&&"number"==typeof t)return!0;if("string"==e&&"string"==typeof t)return!0;if("boolean"==e&&"boolean"==typeof t)return!0;if("object"==typeof t){if("Array"==t.constructor.name){let i=t;for(;"Array"==i.constructor.name;){let e=Array.from(i.keys());if(0==e.length)return!0;i=i[e[0]]}return this.comprobarCoincidenciaTipos(e,i)}if("Objeto"==t.constructor.name)return t.comprobarElTipo(e)}return!1}traducir(){return this.hijos[0].traducir()+" = "+this.hijos[1].traducir()}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){if(0==this.hijos.length)return[];let e,t=this.hijos[0].hijos,i=[],s=t[0].ejecutar();i.push(s);for(let r=0;r<t.length;r++)if(e=t[r].ejecutar(),i.push(e),typeof s!=typeof e)return window.errores.push(new plantillaError("Semantico","En el array todos deben ser del mismo tipo.",decla.location.last_line,decla.location.last_column)),[];return i}traducir(e){return"strc "+e+"["+this.hijos[0].traducir()+"]"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){if(0==this.hijos.length)return[];let e,t=this.hijos[0].hijos,i=[],s=t[0].ejecutar();i.push(s);for(let r=0;r<t.length;r++)if(e=t[r].ejecutar(),i.push(e),typeof s!=typeof e)return window.errores.push(new plantillaError("Semantico","En el array todos deben ser del mismo tipo.",decla.location.last_line,decla.location.last_column)),[];return i}traducir(){if(0==this.hijos.length)return"{}";let e="{";for(let t=0;t<this.hijos[0].hijos.length;t++)e+=this.hijos[0].hijos[t].traducir(),t<this.hijos[0].hijos.length-1&&(e+=", ");return e+="}",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var s=i(54),r=i(55),n=i(74),a=i(70);const o=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e,t=this.hijos[0].texto,i=[],a=[],o=[],l=0;for(let t=0;t<this.hijos[1].hijos.length;t++)e=this.hijos[1].hijos[t].ejecutar(),i.push(e),a.push(this.getTipo(e)),o.push(this.getDimensiones(e));let c=window.tablaSimbolos.buscarFuncionLlamada(t,a,o);if(null==c)return window.errores.push(new r.a("Semantico","No pudo ejecutarse funcion <<"+t+">>. No se encontro.",this.location.last_line,this.location.last_column)),0;window.tablaSimbolos.meterAmbitoDebil();for(let e=0;e<c.params.length;e++)if(this.esTipoNormal(a[e])){let t;t=0==c.params[e].dimensiones?new n.a("DECLA","DECLA",this.location,[new s.a("let","let",this.location,[]),new n.a("LISTADECLA","LISTADECLA",this.location,[new n.a("DECLAVAR1","DECLAVAR1",this.location,[new s.a("ID",c.params[e].nombre,this.location,[]),new s.a("ID",c.params[e].tipo,this.location,[]),this.getTipo2(i[e],this.hijos[1].hijos[e])])])]):new n.a("DECLA","DECLA",this.location,[new s.a("let","let",this.location,[]),new n.a("LISTADECLA","LISTADECLA",this.location,[new n.a("DECLAARR1","DECLAARR1",this.location,[new s.a("ID",c.params[e].nombre,this.location,[]),new s.a("ID",c.params[e].tipo,this.location,[]),new s.a("LISTADIMS","LISTADIMS",this.location,c.params[e].dimensiones),this.hijos[1].hijos[e]])])]),t.ejecutarChafa()}else window.tablaSimbolos.meterVariableChafa("let",c.params[e].nombre,i[e],a[e],"tipo",o[e],1);return window.pilaRetornos.push(0),window.tablaSimbolos.meterAmbitoFuerte(t,c.esAnidada),window.tablaSimbolos.vaciadoEstructura(),c.sentencias.ejecutar2(),c.sentencias.ejecutar(),l=[...window.pilaRetornos],l=l.pop(),window.pilaRetornos.pop(),window.tablaSimbolos.sacarAmbitoFuerte(),l}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}getTipo2(e,t){return"number"==typeof e?new a.a("NUMERICO",e,this.location,[]):"string"==typeof e?new a.a("STRING",e,this.location,[]):"boolean"==typeof e?new a.a("BOOLEAN",e,this.location,[]):void 0===e?new a.a("UNDEFINED","undefined",this.location,[]):t}esTipoNormal(e){return"number"==e||("string"==e||("boolean"==e||"undefined"==e))}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}traducir(){let e=this.hijos[0].texto+"(";for(let t=0;t<this.hijos[1].hijos.length;t++)e+=this.hijos[1].hijos[t].traducir(),t<this.hijos[1].hijos.length-1&&(e+=", ");return e+=")",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e=!1;for(let t=0;t<this.hijos.length;t++){if("IF"==this.hijos[t].token||"IFELSE"==this.hijos[t].token){if(e=this.hijos[t].hijos[0].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en IF.",this.location.last_line,this.location.last_column));if(1==e){window.tablaSimbolos.meterAmbitoDebil();let e=this.hijos[t].hijos[1].ejecutar();return window.tablaSimbolos.sacarAmbitoDebil(),e}}if("else"==this.hijos[t].token){window.tablaSimbolos.meterAmbitoDebil();let e=this.hijos[t].hijos[0].ejecutar();return window.tablaSimbolos.sacarAmbitoDebil(),e}}}traducir(){let e="";for(let t=0;t<this.hijos.length;t++)"IF"==this.hijos[t].token&&(e+="if ("+this.hijos[t].hijos[0].traducir()+"){\n",window.currentTabs++,e+=this.hijos[t].hijos[1].traducir(),window.currentTabs--,e+="}"),"IFELSE"==this.hijos[t].token&&(e+="else if ("+this.hijos[t].hijos[0].traducir()+"){\n",window.currentTabs++,e+=this.hijos[t].hijos[1].traducir(),window.currentTabs--,e+="}"),"else"==this.hijos[t].token&&(e+="else {\n",window.currentTabs++,e+=this.hijos[t].hijos[0].traducir(),window.currentTabs--,e+="}");return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e;for(;;){if(e=this.hijos[0].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en WHILE.",this.location.last_line,this.location.last_column));if(!e)break;window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();let t=this.hijos[1].ejecutar();if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"break"==t.nombre)break;if("object"!=typeof t||"EscapeEstructura"!=t.constructor.name||"continue"!=t.nombre){if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"return"==t.nombre)return t;window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1}}}traducir(){let e="while ("+this.hijos[0].traducir()+"){\n";return window.currentTabs++,e+=this.hijos[1].traducir(),window.currentTabs--,e+="}",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e;for(;;){window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();let t=this.hijos[1].ejecutar();if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"break"==t.nombre)break;if("object"!=typeof t||"EscapeEstructura"!=t.constructor.name||"continue"!=t.nombre){if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"return"==t.nombre)return t;if(window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1,e=this.hijos[0].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en WHILE.",this.location.last_line,this.location.last_column));if(!e)break}}}traducir(){let e="do {\n";return window.currentTabs++,e+=this.hijos[1].traducir(),window.currentTabs--,e+="} while ("+this.hijos[0].traducir()+");",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e,t=this.hijos[0].ejecutar(),i=!1,s=this.hijos[1].hijos[0];window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();for(let r=0;r<s.hijos.length;r++)if(e=s.hijos[r].hijos[0].ejecutar(),t==e&&(i=!0),i){let e=s.hijos[r].hijos[1].ejecutar();if("object"==typeof e&&"EscapeEstructura"==e.constructor.name&&"break"==e.nombre)break;if("object"==typeof e&&"EscapeEstructura"==e.constructor.name&&"return"==e.nombre)return e}if(!i){let e=this.hijos[1].hijos[1].ejecutar();if("object"==typeof e&&"EscapeEstructura"==e.constructor.name&&"return"==e.nombre)return e}window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1}traducir(){let e="switch ("+this.hijos[0].traducir()+"){\n",t=this.hijos[1].hijos[0];for(let i=0;i<t.hijos.length;i++)e+="case "+t.hijos[i].hijos[0].traducir()+":\n",e+=t.hijos[i].hijos[1].traducir();return e+="default: \n",e+=this.hijos[1].hijos[1].traducir(),e+="}",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e;for(window.tablaSimbolos.meterAmbitoDebil(),this.hijos[0].ejecutar();;){if(e=this.hijos[1].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en FOR.",this.location.last_line,this.location.last_column));if(!e)break;window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();let t=this.hijos[3].ejecutar();if(this.hijos[2].ejecutar(),"object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"break"==t.nombre)break;if("object"!=typeof t||"EscapeEstructura"!=t.constructor.name||"continue"!=t.nombre){if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"return"==t.nombre)return t;window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1}}window.tablaSimbolos.sacarAmbitoDebil()}traducir(){let e="";if("FOR"==this.token)e="for("+this.hijos[0].traducirFOR()+" "+this.hijos[1].traducir()+"; "+this.hijos[2].traducir()+"){\n",window.currentTabs++,e+=this.hijos[3].traducir(),window.currentTabs--,e+="}";else{let t=window.forincorrelativo++;e="var arraux"+t+" := "+this.hijos[1].traducir()+";\n",e+="for( integer idx = 0; idx < arraux"+t+".length; idx++){\nvar "+this.hijos[0]+" := arraux"+t+"[idx];\n",window.currentTabs++,e+=this.hijos[2].traducir(),window.currentTabs--,e+="}"}return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(62);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){return window.indiceLoops,new r.a("break")}traducir(){return"break;"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(62);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){return window.indiceLoops,new r.a("continue")}traducir(){return"continue;"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var s=i(54),r=i(62);const n=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){return 1==this.hijos.length&&(window.pilaRetornos[window.pilaRetornos.length-1]=this.hijos[0].ejecutar()),new r.a("return")}traducir(){return 1==this.hijos.length?"return "+this.hijos[0].traducir()+";":"return;"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var s=i(54);const r=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e;return 1==this.hijos[0].ejecutar()?(e=this.hijos[1].ejecutar(),e):(e=this.hijos[2].ejecutar(),e)}traducir(){return this.hijos[0].traducir()+" ? "+this.hijos[1].traducir()+" : "+this.hijos[2].traducir()}}},,,function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var s=i(54),r=i(55),n=i(71);const a=class extends s.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){}ejecutar2(){}ejecutar3(){let e=this.hijos[0].texto,t=[];this.hijos[1].hijos.forEach(e=>{2==e.hijos.length&&t.push(new n.a(e.hijos[0].texto,e.hijos[1].texto,0)),3==e.hijos.length&&t.push(new n.a(e.hijos[0].texto,e.hijos[1].texto,e.hijos[2].hijos))}),window.tablaObjetos.meterObjeto(new class{constructor(e,t){this.nombre=e,this.listaAttrs=t}}(e,t))||window.errores.push(new r.a("Semantico","Tipo <<"+e+">> no se puede declarar, ya existe uno con ese nombre.",this.location.last_line,this.location.last_column))}traducir(){let e="Define "+this.hijos[0].texto+" as [\n";for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t];if(2==i.hijos.length&&(e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto,e+=" "+i.hijos[0].texto),3==i.hijos.length){e+="number"==i.hijos[1].texto.toLowerCase()?"double":i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";e+=" "+i.hijos[0].texto}t<this.hijos[1].hijos.length-1?e+=",\n":e+="\n"}return e+="];\n",window.window.strObjetos+=e,""}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var s=i(73),r=i(55);var n=i(54);const a=class extends n.a{constructor(e,t,i,s){super(e,t,i,s)}ejecutar(){let e=new class{constructor(){this.tabla=new s.a("")}buscarAtributo(e){return this.tabla.buscarVariableSoloNombre(e)}generarObjeto(e,t,i){for(let s=0;s<e.length;s++){let n=e[s][0],a=e[s][1],o=this.getTipo(a),l=this.getRol(a),c=this.getDimensiones(a);if(!this.validarTipo(o))return void window.errores.push(new r.a("Semantico","La variable <<"+n+">> se declara con tipo ("+o+") pero ese tipo no existe.",t,i));this.tabla.meterVariable("let",n,a,o,l,c,1)}}getTipaso(){let e=0,t="objeto",i=window.tablaObjetos.getLista();for(let s=0;s<i.length;s++)this.comprobarElTipo(i[s].nombre)&&(e+=1,t=i[s].nombre);return 1==e?t:"objeto"}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}comprobarCoincidenciaTipos(e,t){if(null==t||null==t)return!0;if("null"==e||"undefined"==e)return!0;if("number"==e&&"number"==typeof t)return!0;if("string"==e&&"string"==typeof t)return!0;if("boolean"==e&&"boolean"==typeof t)return!0;if("object"==typeof t&&"Array"==t.constructor.name){let i=t;for(;"Array"==i.constructor.name;){let e=Array.from(i.keys());if(0==e.length)return!0;i=i[e[0]]}return this.comprobarCoincidenciaTipos(e,i)}return!1}comprobarElTipo(e){let t=window.tablaObjetos.buscarObjeto(e);if(!t)return!1;let i=t.listaAttrs;if(i.length!=this.tabla.getVarLength())return!1;for(let e=0;e<i.length;e++){let t=this.tabla.buscarVariableSoloNombre(i[e].nombre);if(!t)return!1;if(null==t.valor||null==t.valor)return!0;if(t.dimensiones!=i[e].dimensiones)return!1;if("objeto"==t.tipo){if(!t.valor.comprobarElTipo(i[e].tipo))return!1;t.tipo=i[e].tipo}if(t.tipo!=i[e].tipo)return!1}return!0}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||null==e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}validarTipo(e){if("number"==e)return!0;if("string"==e)return!0;if("boolean"==e)return!0;if("undefined"==e)return!0;if("null"==e)return!0;return!!window.tablaObjetos.buscarObjeto(e)}},t=[];return this.hijos.forEach(e=>{t.push([e.hijos[0].texto,e.hijos[1].ejecutar()])}),e.generarObjeto(t,this.location.last_line,this.location.last_column),e}traducir(){let e="[\n";for(let t=0;t<this.hijos.length;t++){let i=this.hijos[t];e+=i.hijos[0].texto+" : "+i.hijos[1].traducir(),t<this.hijos.length-1?e+=",\n":e+="\n"}return e+="]",e}}},,function(e,t,i){"use strict";i.r(t);var s=i(58),r=i(41),n=i(8);const a=n.b`
  a,button {
    font-size: inherit;
    vertical-align: middle;
    background: #fff;
    border: none;
    cursor: pointer;
    outline:none;
    box-shadow: var(--shadow-elevation-4dp_-_box-shadow);
    text-decoration: none;
  }

  button.rounded {
    border-radius:100%;
    width: 44px;
    height: 44px;
  }

  button:hover svg {
    fill: var(--accent-color);
  }

  .md{
    height: 50px;
    margin-top: 25px;
  }

  .primary {
    background-color:var(--dark-primary-color);
    color:white;    
    font-weight: 600;
  }

  .primary span svg{
    fill:white;
  }

  .text {
    border: 1px solid var(--dark-primary-color);
    color: var(--dark-primary-color);
  }

  .text span svg{
    fill: var(--dark-primary-color);
  }

  .centered {
    transform: translateX(-50%);
    margin-left: 50%;
    margin-top: 25px;
  }
  
  @media (max-width: 840px){
    form .centered{
      transform: none;
      margin: auto;
    }

    form .centered.md {
      margin-top: 12.5px;
    }

  }`,o=n.b`
    .styled-button {
        display: inline-block;
    }
    
    .styled-button {
        display: inline-block;
        box-sizing: border-box;
        border: 2px solid var(--dark-primary-color);
        background-color: #FFF;
        font-size: 14px;
        font-weight: 500;
        color: var(--dark-primary-color);
        margin: 0;
        text-align: center;
        text-decoration: none;
        text-transform: uppercase;
        border-radius: 0;
        outline: none;
        -webkit-appearance: none;
        cursor: pointer;
        padding: 0;
    }
    
    .styled-button > * {
        width:100%;
        display:inline-block;
        cursor:pointer;
        font-weight:bolder;
    }
    
    .styled-button:focus, .styled-button > *:focus {
        background-color: #c5cad3;
    }
    
    .styled-button:hover, .styled-button:active, .styled-button  > *:active {
        background-color: var(--dark-primary-color);
        color: #FFF;
    }
    
    @media (max-width: 767px) {
        .styled-button [responsive] {
        position: var(--layout-fixed-bottom_-_position); 
        right: var(--layout-fixed-bottom_-_right); 
        bottom: var(--layout-fixed-bottom_-_bottom); 
        left: var(--layout-fixed-bottom_-_left);
        height: 64px;
        z-index: 1;
    }
    
    .styled-button [responsive] > * {
        background-color: var(--dark-primary-color);
        border: none;
        color: white;
        padding: 20px;
        width: 100%;
        height: 100%;
        font-size: 15px;
    }
    
    .styled-button [responsive] > *:focus {
        background-color: var(--dark-primary-color);
    }
}`;i(75),i(103),i(66),i(55);class l extends n.a{static get properties(){return{optimization:{type:Boolean},errors:{type:Array}}}static get styles(){return[r.f,n.b`
        :host {
            --paper-tabs-selection-bar-color: var(--default-primary-color);
            height: 90%;
            background: white;
            display: block;
            padding: 5px 0 0 0;
            height: 100%;
        }

        div.row {
            width: 100%;
        }

        div.row:nth-child(n){
          background: #e0fdfd;
        }
        div.row:nth-child(2n){
          background: #2285c3;
          color: white;
        }

        div.row > div, div.header > div {
            width: 24%;
            font-size: 14px;
            font-weight: 500;
            display: inline-block;
        }

        main {
            overflow: auto;
            height: 100%;
        }
      `]}constructor(){super(),this.errores=[],window.addEventListener("graficar-errores",e=>{this.errores=e.detail,this.requestUpdate()})}render2(){return n.c`
    
      <main id="main-content">
            ${this.optimization?n.c`<div class="row header">
                  <div>Regla</div><div>Linea</div><div>Antiguo</div><div>Nuevo</div>
                </div>
                ${this.errors.map(e=>n.c`<div class="row">
                  <div>${e.rule}</div><div>${e.line}</div><div>${e.oldval}</div><div>${e.newval}</div>
              </div>`)}`:n.c`
              ${this.errors.map(e=>n.c`<div class="row">
                    ${e}
                </div>`)}`}
      </main>

    `}render(){return n.c`
    <main id="main-content">
        <div class="header">
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Tipo
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Descripcion
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Linea
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Columna
          </div>
        </div>
        ${this.errores.map(e=>n.c`<div class="row">
            <div style="text-align: center;">${e.getTipo()}</div>
            <div>${e.getDescripcion()}</div>
            <div style="text-align: center;">${e.getLinea()}</div>
            <div style="text-align: center;">${e.getColumna()}</div>
          </div>`)}
      </main>`}}window.customElements.define("error-component",l);class c extends n.a{static get properties(){return{E:{type:Number},heap:{type:Array},stack:{type:Array},heapP:{type:Number},stackP:{type:Number},temporaries:{type:Object}}}static get styles(){return[r.f,r.d,n.b`
        :host {
            --paper-tabs-selection-bar-color: var(--default-primary-color);
            background: white;
            display: block;
            padding: 5px 0 0 0;
            height: 100%;
        }

        div.row {
            width: 100%;
        }

        div.row:nth-child(n){
            background: var(--light-primary-color);
        }
        div.row:nth-child(2n){
            background: var(--dark-primary-color);
        }

        div.row > div, div.header > div {
            width: 24%;
            font-size: 14px;
            font-weight: 500;
            display: inline-block;
        }

        main {
            overflow: auto;
            height: 100%;
            display: grid;
            grid-template-columns: repeat(3,1fr);
            grid-gap: 25px;
            background: #021B2B;
            padding: 25px;
        }

        span {
            display: block;
            border: 1px solid gray;
        }

        span:first-child {
            background: var(--default-primary-color);
            text-align: center;
            color: white;
            font-weight: 800;
        }

        .line {
          display: grid;
          grid-template-columns: 1fr 4fr;
          width: 100%;
          margin: 0;
          padding: 0;
        }

        main div {
            width: 50%;
            background: var(--dark-primary-color);
            color: white;
            margin: auto;
            text-align: center;
            margin-bottom: 25px;
        }

        span.occupied {
          background-color: white;
          color: black;
          font-weight: 500;
        }

        .current-info {
          position: -webkit-sticky; /* Safari */
          position: sticky;
          top: 0;
          grid-column: 1 / 4;
          display: grid;
          grid-template-columns: repeat(4,1fr);
          background:#021B2B;
          margin: 0;
          padding: 25px 0;
          width: 100%;
          border-radius: 5px;
        }

        .current-info > div {
          margin: 0 auto;
        }

        #main-content{
          border-radius: 0 0 5px 5px;
        }
      `]}constructor(){super(),this.stack=new Array(5e3).fill(-1),this.heap=new Array(5e3).fill(-1),this.temporaries={},this.tmp="",this.stackP=0,this.heapP=0,window.addEventListener("heap-changed",e=>{this.heap=e.detail,this.requestUpdate()}),window.addEventListener("stack-changed",e=>{this.stack=e.detail,this.requestUpdate()}),window.addEventListener("temporaries-changed",e=>{this.temporaries=e.detail.temporaries,this.tmp=e.detail.tmp,this.requestUpdate()}),window.addEventListener("heap-pointer-changed",e=>this.heapP=e.detail),window.addEventListener("stack-pointer-changed",e=>this.stackP=e.detail)}render(){return n.c`
      <main id="main-content">
            <div class="current-info">
                <div>
                  <span>Heap Pointer</span>
                  <span>${this.heapP}</span>
                </div>
                <div>
                  <span>Stack Pointer</span>
                  <span>${this.stackP}</span>
                </div>
                <div>
                  <span>Last Temporary</span>
                  <span>${this.tmp} : ${this.temporaries[this.tmp]}</span>
                </div>
                <div>
                  <span>E</span>
                  <span>${this.E}</span>
                </div>
            </div>
            <div>
                <span>HEAP</span>
                ${this.heap.map((e,t)=>n.c`<div class="line"><span>${t}:</span><span class="${-1!=e?"occupied":"free"}">${e}</span></div>`)}
            </div>
            <div>
                <span>STACK</span>
                ${this.stack.map((e,t)=>n.c`<div class="line"><span>${t}:</span><span class="${-1!=e?"occupied":"free"}">${e}</span></div>`)}
            </div>
            <div style="margin: 0 auto auto;">
                <span>TEMPORARY</span>
                ${Object.keys(this.temporaries).map(e=>n.c`<div class="line"><span>${e}:</span><span>${this.temporaries[e]}</span></div>`)}
            </div>
      </main>
    `}}window.customElements.define("heap-stack-component",c);var h=i(63);class p extends n.a{static get properties(){return{information:Object,keys:Array}}static get styles(){return[r.d,n.b`
        * {
            box-sizing: border-box;
        }
        :host {
            display:block;
            height: 100%;
        }

        .row,.header {
            display: grid;
            grid-template-columns: repeat(9,1fr);
            text-align:center;
        }

        .header {
            background: var(--accent-color);
            color: white;
            border-radius: 5px 5px 0 0;
            font-size: 1.5em;
            padding: 8px;
        }

        .title{
            background: var(--default-primary-color);
            font-size: 1.5em;
        }

        .row label, .header label {
            display: inline-block;
            width: auto;
        }

        .row:last-child{
            border-radius: 0 0 5px 5px;
        }

        .body{
            overflow: auto;
            height: 87.5%;
            display: block;
        }

        .container {
            height: 100%;
        }
        `]}constructor(){super(),this.keys=["identifier","position","type","aux-type","rol","constant","scope","dimensions","parameters"],this.information={}}render(){return n.c`
        <div class="container">
            <div class="header">
                ${this.keys.map(e=>n.c`<label>${e}</label>`)}
            </div>
            <div class="body" id="main-content">
                ${this.isObjectEmpty(this.information)?"":Object.keys(this.information).map(e=>n.c`
                            <div class ="title">${isNaN(e)?e:h.a.Classes.reverseMap(e)}</div>
                            ${this.information[e].map(e=>n.c`<div class="row">${this.keys.map(t=>n.c`<label>${e[t]}</label>`)}</div>`)}
                    `)}
            </div>
        </div>`}}customElements.define("symbol-table",p);var u=i(77);class d extends n.a{static get properties(){return{src:{type:String,reflect:!0},svg:{type:String}}}static get styles(){return[r.f,r.d,n.b`
        main {
            overflow: auto;
            background: black;
            width: 100%;
            height: 100%;
        }
      `]}constructor(){super(),this.src=""}render(){return n.c`
      <main id="main-content">
          ${""!==this.svg?Object(u.a)(this.svg):""}
      </main>
    `}attributeChangedCallback(e,t,i){"src"===e&&""!==i&&(this.svg=Viz(i,{format:"svg"}))}}window.customElements.define("graph-tree",d);class m extends n.a{static get properties(){return{selected:{type:Number},console:{type:Array},errors:{type:Array},stack:{type:Array},heap:{type:Array},information:{type:Object},graph:{type:String},blockgraph:{type:String}}}constructor(){super(),window.addEventListener("console-changed",e=>{this.console=e.detail,this.requestUpdate()}),window.addEventListener("optimization-done",e=>{this.optimization=e.detail,this.requestUpdate()}),window.addEventListener("graphblock-generated",e=>{this.blockgraph=e.detail,this.requestUpdate()}),window.addEventListener("error-catched",e=>{this.errors=[...e.detail],this.requestUpdate()}),this.console=[],this.queries=[],this.errors=[],this.optimization=[],this.information={}}static get styles(){return[r.d,r.f,a,r.e,r.c,n.b`
                :host {
                    --paper-tabs-selection-bar-color: var(--default-primary-color);
                    margin: 10px 3% 25px;
                    width: 94%;
                    background: white;
                    box-shadow: var(--shadow-box-2dp-custom);
                    display: block;
                    padding: 5px 0 0 0;
                    height: 75vh;
                }

                paper-tab.iron-selected, paper-tab:hover {
                    background: var(--accent-color);
                    color: var(--light-primary-color);
                    border-radius: 5px 5px 0 0;
                }

                #textarea {
                    background: #021B2B;
                    color: cyan;
                    display: block;
                    width: 100%;
                    height: 100%;
                    resize: none;
                    border-radius: 0 0 5px 5px;
                    overflow: auto;
                }

                #textarea span{
                    display: block;
                    width: 100%;
                    height: 14px !important;
                    white-space: pre-wrap;
                }

                div {
                    height: 100%;
                    width:100%;
                }

                iron-pages {
                    display:block;
                    height: 90%;
                }

                graph-tree {
                  height:100%;
                  border-radius: 0 0 10px 10px;
                }

                paper-tab {
                  background: var(--light-primary-color);
                  border-radius: 5px 5px 0 0;
                  color: var(--accent-color);
                }
            `]}render(){return n.c`<paper-tabs .selected="${this.selected}" scrollable >
                        <paper-tab @click="${()=>{this.selected=0}}">Consola</paper-tab>
                        <paper-tab @click="${()=>{this.selected=1}}">Errores</paper-tab>
                        <paper-tab @click="${()=>{this.selected=2}}">Memoria</paper-tab>
                        <paper-tab @click="${()=>{this.selected=3}}">Simbolos</paper-tab>
                        <paper-tab @click="${()=>{this.selected=4}}">Grafo</paper-tab>
                        <paper-tab @click="${()=>{this.selected=5}}">Optimizacion</paper-tab>
                        <paper-tab @click="${()=>{this.selected=6}}">Grafo de bloque</paper-tab>
                    </paper-tabs>
                    <iron-pages .selected="${this.selected}" id="main-content">
                        <div>
                            <div id="textarea" readonly class="overflowable">
                                ${this.console.map(e=>n.c`<span>${e}</span>`)}
                            </div>
                        </div>
                        <div>
                            <error-component .errors=${this.errors} ?optimization=${!1}></error-component>
                        </div>
                        <div>
                            <heap-stack-component ></heap-stack-component>
                        </div>
                        <div>
                            <symbol-table .information="${this.information}"></symbol-table>
                        </div>
                        <div>
                            <graph-tree .src="${this.graph}"></graph-tree>
                        </div>
                        <div>
                            <error-component .errors=${this.optimization} ?optimization=${!0}></error-component>
                        </div>
                        <div>
                            <graph-tree .src="${this.blockgraph}"></graph-tree>
                        </div>
                    </iron-pages>`}}window.customElements.define("console-element",m);const g=n.b`
    .CodeMirror {
    /* Set height, width, borders, and global font properties here */
    font-family: monospace;
    height: 300px;
    color: black;
    direction: ltr;
    }

    /* PADDING */

    .CodeMirror-lines {
    padding: 4px 0; /* Vertical padding around content */
    }
    .CodeMirror pre {
    padding: 0 4px; /* Horizontal padding of content */
    }

    .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
    background-color: white; /* The little square between H and V scrollbars */
    }

    /* GUTTER */

    .CodeMirror-gutters {
    border-right: 1px solid #ddd;
    background-color: #f7f7f7;
    white-space: nowrap;
    }
    .CodeMirror-linenumbers {}
    .CodeMirror-linenumber {
    padding: 0 3px 0 5px;
    min-width: 20px;
    text-align: right;
    color: #999;
    white-space: nowrap;
    }

    .CodeMirror-guttermarker { color: black; }
    .CodeMirror-guttermarker-subtle { color: #999; }

    /* CURSOR */

    .CodeMirror-cursor {
    border-left: 1px solid black;
    border-right: none;
    width: 0;
    }
    /* Shown when moving in bi-directional text */
    .CodeMirror div.CodeMirror-secondarycursor {
    border-left: 1px solid silver;
    }
    .cm-fat-cursor .CodeMirror-cursor {
    width: auto;
    border: 0 !important;
    background: #7e7;
    }
    .cm-fat-cursor div.CodeMirror-cursors {
    z-index: 1;
    }
    .cm-fat-cursor-mark {
    background-color: rgba(20, 255, 20, 0.5);
    -webkit-animation: blink 1.06s steps(1) infinite;
    -moz-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    }
    .cm-animate-fat-cursor {
    width: auto;
    border: 0;
    -webkit-animation: blink 1.06s steps(1) infinite;
    -moz-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    background-color: #7e7;
    }
    @-moz-keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }
    @-webkit-keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }
    @keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }

    /* Can style cursor different in overwrite (non-insert) mode */
    .CodeMirror-overwrite .CodeMirror-cursor {}

    .cm-tab { display: inline-block; text-decoration: inherit; }

    .CodeMirror-rulers {
    position: absolute;
    left: 0; right: 0; top: -50px; bottom: -20px;
    overflow: hidden;
    }
    .CodeMirror-ruler {
    border-left: 1px solid #ccc;
    top: 0; bottom: 0;
    position: absolute;
    }

    /* DEFAULT THEME */

    .cm-s-default .cm-header {color: blue;}
    .cm-s-default .cm-quote {color: #090;}
    .cm-negative {color: #d44;}
    .cm-positive {color: #292;}
    .cm-header, .cm-strong {font-weight: bold;}
    .cm-em {font-style: italic;}
    .cm-link {text-decoration: underline;}
    .cm-strikethrough {text-decoration: line-through;}

    .cm-s-default .cm-keyword {color: #708;}
    .cm-s-default .cm-atom {color: #219;}
    .cm-s-default .cm-number {color: #164;}
    .cm-s-default .cm-def {color: #00f;}
    .cm-s-default .cm-variable,
    .cm-s-default .cm-punctuation,
    .cm-s-default .cm-property,
    .cm-s-default .cm-operator {}
    .cm-s-default .cm-variable-2 {color: #05a;}
    .cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}
    .cm-s-default .cm-comment {color: #a50;}
    .cm-s-default .cm-string {color: #a11;}
    .cm-s-default .cm-string-2 {color: #f50;}
    .cm-s-default .cm-meta {color: #555;}
    .cm-s-default .cm-qualifier {color: #555;}
    .cm-s-default .cm-builtin {color: #30a;}
    .cm-s-default .cm-bracket {color: #997;}
    .cm-s-default .cm-tag {color: #170;}
    .cm-s-default .cm-attribute {color: #00c;}
    .cm-s-default .cm-hr {color: #999;}
    .cm-s-default .cm-link {color: #00c;}

    .cm-s-default .cm-error {color: #f00;}
    .cm-invalidchar {color: #f00;}

    .CodeMirror-composing { border-bottom: 2px solid; }

    /* Default styles for common addons */

    div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}
    div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}
    .CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }
    .CodeMirror-activeline-background {background: #e8f2ff;}

    /* STOP */

    /* The rest of this file contains styles related to the mechanics of
    the editor. You probably shouldn't touch them. */

    .CodeMirror {
    position: relative;
    overflow: hidden;
    background: white;
    }

    .CodeMirror-scroll {
    overflow: scroll !important; /* Things will break if this is overridden */
    /* 30px is the magic margin used to hide the element's real scrollbars */
    /* See overflow: hidden in .CodeMirror */
    margin-bottom: -30px; margin-right: -30px;
    padding-bottom: 30px;
    height: 100%;
    outline: none; /* Prevent dragging from highlighting the element */
    position: relative;
    }
    .CodeMirror-sizer {
    position: relative;
    border-right: 30px solid transparent;
    }

    /* The fake, visible scrollbars. Used to force redraw during scrolling
    before actual scrolling happens, thus preventing shaking and
    flickering artifacts. */
    .CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
    position: absolute;
    z-index: 6;
    display: none;
    }
    .CodeMirror-vscrollbar {
    right: 0; top: 0;
    overflow-x: hidden;
    overflow-y: scroll;
    }
    .CodeMirror-hscrollbar {
    bottom: 0; left: 0;
    overflow-y: hidden;
    overflow-x: scroll;
    }
    .CodeMirror-scrollbar-filler {
    right: 0; bottom: 0;
    }
    .CodeMirror-gutter-filler {
    left: 0; bottom: 0;
    }

    .CodeMirror-gutters {
    position: absolute; left: 0; top: 0;
    min-height: 100%;
    z-index: 3;
    }
    .CodeMirror-gutter {
    white-space: normal;
    height: 100%;
    display: inline-block;
    vertical-align: top;
    margin-bottom: -30px;
    }
    .CodeMirror-gutter-wrapper {
    position: absolute;
    z-index: 4;
    background: none !important;
    border: none !important;
    }
    .CodeMirror-gutter-background {
    position: absolute;
    top: 0; bottom: 0;
    z-index: 4;
    }
    .CodeMirror-gutter-elt {
    position: absolute;
    cursor: default;
    z-index: 4;
    }
    .CodeMirror-gutter-wrapper ::selection { background-color: transparent }
    .CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }

    .CodeMirror-lines {
    cursor: text;
    min-height: 1px; /* prevents collapsing before first draw */
    }
    .CodeMirror pre {
    /* Reset some styles that the rest of the page might have set */
    -moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0;
    border-width: 0;
    background: transparent;
    font-family: inherit;
    font-size: inherit;
    margin: 0;
    white-space: pre;
    word-wrap: normal;
    line-height: inherit;
    color: inherit;
    z-index: 2;
    position: relative;
    overflow: visible;
    -webkit-tap-highlight-color: transparent;
    -webkit-font-variant-ligatures: contextual;
    font-variant-ligatures: contextual;
    }
    .CodeMirror-wrap pre {
    word-wrap: break-word;
    white-space: pre-wrap;
    word-break: normal;
    }

    .CodeMirror-linebackground {
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    z-index: 0;
    }

    .CodeMirror-linewidget {
    position: relative;
    z-index: 2;
    padding: 0.1px; /* Force widget margins to stay inside of the container */
    }

    .CodeMirror-widget {}

    .CodeMirror-rtl pre { direction: rtl; }

    .CodeMirror-code {
    outline: none;
    }

    /* Force content-box sizing for the elements where we expect it */
    .CodeMirror-scroll,
    .CodeMirror-sizer,
    .CodeMirror-gutter,
    .CodeMirror-gutters,
    .CodeMirror-linenumber {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    }

    .CodeMirror-measure {
    position: absolute;
    width: 100%;
    height: 0;
    overflow: hidden;
    visibility: hidden;
    }

    .CodeMirror-cursor {
    position: absolute;
    pointer-events: none;
    }
    .CodeMirror-measure pre { position: static; }

    div.CodeMirror-cursors {
    visibility: hidden;
    position: relative;
    z-index: 3;
    }
    div.CodeMirror-dragcursors {
    visibility: visible;
    }

    .CodeMirror-focused div.CodeMirror-cursors {
    visibility: visible;
    }

    .CodeMirror-selected { background: #d9d9d9; }
    .CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }
    .CodeMirror-crosshair { cursor: crosshair; }
    .CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }
    .CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }

    .cm-searching {
    background-color: #ffa;
    background-color: rgba(255, 255, 0, .4);
    }

    /* Used to force a border model for a node */
    .cm-force-border { padding-right: .1px; }

    @media print {
    /* Hide the cursor when printing */
    .CodeMirror div.CodeMirror-cursors {
    visibility: hidden;
    }
    }

    /* See issue #2901 */
    .cm-tab-wrap-hack:after { content: ''; }

    /* Help users use markselection to safely style text background */
    span.CodeMirror-selectedtext { background: none; }

    .CodeMirror::-webkit-scrollbar {
                    height:4px;
                    width: 4px;
                    background-color: #F5F5F5;
                }

                .CodeMirror::-webkit-scrollbar-thumb {
                    background-color: rgba(10, 10, 10, 0.69);
                }

                .CodeMirror::-webkit-scrollbar-track {
                    -webkit-box-shadow: inset 0 0 4px rgba(0,0,0,0.3);
                    background-color: #F5F5F5;
                }
    `;var f=i(72);window.CodeMirror=f.a;i(78),i(79),i(104);class y extends n.a{constructor(){super(),this.on="true",this.off="false",this.checked=!1}static get styles(){return[n.b`
                :host{
                    display: inline-block;
                    width: 15%;
                    margin: 0 auto 0;
                }

                :host([checked]) .sl{
                    color: var(--default-primary-color);
                }

                .si {
                    display: none;
                }
                .sl {
                    position: relative;
                    display: block;
                    min-width: 112px;
                    cursor: pointer;
                    text-align: left;
                    margin: 0 16px;
                    padding: 8px 0 8px 0px;
                    font-size: 1.125em;
                    font-family: 'Josefin Sans', sans-serif;
                    color: var(--primary-text-color);
                }
                .sl:before, .sl:after {
                    content: "";
                    position: absolute;
                    margin: 0;
                    outline: 0;
                    top: 50%;
                    -ms-transform: translate(0, -50%);
                    -webkit-transform: translate(0, -50%);
                    transform: translate(0, -50%);
                    -webkit-transition: all 0.3s ease;
                    transition: all 0.3s ease;
                }
                .sl:before {
                    right: 8px;
                    width: 34px;
                    height: 14px;
                    background-color: #9E9E9E;
                    border-radius: 8px;
                }
                .sl:after {
                    right: 23px;
                    width: 20px;
                    height: 20px;
                    background-color: #FAFAFA;
                    border-radius: 50%;
                    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
                }
                .sl .ton {
                    display: none;
                }
                
                .sl .toff {
                    display: inline-block;
                }
                .si:checked + .sl:before {
                    background-color: var(--default-primary-color);
                }
                .si:checked + .sl:after {
                    background-color: var(--dark-primary-color);
                    -ms-transform: translate(80%, -50%);
                    -webkit-transform: translate(80%, -50%);
                    transform: translate(80%, -50%);
                }
                .si:checked + .sl .ton {
                    display: inline-block;
                }
                .si:checked + .sl .toff {
                    display: none;
                }
                
                @media (max-width:440px){
                    :host{
                        padding-left:0;
                    }
                }`]}render(){return n.c`
            ${this.message}
            <div>
                <input type="checkbox" id="cb" name="cb" class="si" ?checked=${this.checked}>
                <label for="cb" class="sl" @click="${e=>{e.preventDefault(),this.checked=!this.checked,this.fire("value-changed",this.value)}}">
                    <span class="ton">${this.on}</span>
                    <span class="toff">${this.off}</span>
                </label>
            </div>`}static get properties(){return{on:{type:String},off:{type:String},error:{type:String},checked:{type:Boolean,reflect:!0},message:{type:String}}}value(){return this.checked}}customElements.define("custom-switch",y);n.b`
  .spin {
    -webkit-animation-name: spinner;
    -webkit-animation-timing-function: linear;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-duration: 6s;

    animation-name: spinner;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: 6s;

    -webkit-transform-style: preserve-3d;
    -moz-transform-style: preserve-3d;
    -ms-transform-style: preserve-3d;
    transform-style: preserve-3d;
  }

  .spin:hover {
    -webkit-animation-play-state: paused;
    animation-play-state: paused;
  }`;const b=n.b`
  @keyframes ripple {
    0% {
        box-shadow: 0px 0px 0px 1px rgba(1, 136, 209, 0);
    }
    50% {
        box-shadow: 0px 0px 2.5px 25px rgba(1, 136, 209, 0.20);
    }
    100% {
        box-shadow: 0px 0px 2.5px 50px rgba(1, 136, 209, 0.10);;
    }
  }`;n.b`

  @keyframes fade-in-opacity-transition {
    from { visibility: hidden; opacity: 0; }
    to { opacity: 1; visibility: visible; }
  }

  @keyframes fade-out-opacity-transition {
    from { opacity: 1; visibility: visible; }
    to { visibility: hidden; opacity: 0; }
  }

  :host(.fadein) {
    animation: fade-in-opacity-transition .5s 1 normal linear;
  }

  :host(.fadeout) {
    animation: fade-out-opacity-transition .5s 1 normal linear forwards;
  }

  :host(.hide){
    display: none;
  }
`,n.b`

    @keyframes fade-opacity-forwards{
        from { opacity: 0; visibility: hidden; }
        to { opacity: 1; visibility: visible; }
    }
    
    @keyframes fade-opacity-reverse{
        from { opacity: 1; visibility: visible; }
        to { opacity: 0; visibility: hidden; }
    }

    .fadein {
        animation: fade-opacity-forwards ease-in-out 250ms forwards normal;
    }

    .fadeout {
        animation: fade-opacity-reverse ease-in-out 250ms forwards normal;
    }

    .fadeout-delay {
        animation: fade-opacity-reverse ease-in-out 250ms forwards normal;
        visibility: visible;
        opacity: 1;
        animation-delay: 250ms;
    }

    .fadein-delay {
        animation: fade-opacity-forwards ease-in-out 250ms forwards normal;
        visibility: hidden;
        opacity: 0;
        animation-delay: 250ms;
    }

    .iron-selected label.index::after{
        content: none;
    }
`;class _ extends n.a{constructor(){super(),this.opened=!1,this.optics=[],this.setInitialValues()}setInitialValues(){this._optic="",this.message=""}static get styles(){return[o,b,n.b`
            paper-dropdown-menu{
                margin-left: 50%;
                transform: translateX(-50%);
            }

            :host {
                display: block;
                position: fixed;
                background-color: var(--default-primary-color);
                color: white;
                box-shadow: var(--shadow-box-4dp-custom);
                width: 320px;
                padding: 12px;
                visibility: hidden;
                will-change: transform;
                top: 225px;
                right: 16px;
                -webkit-transform: translate3d(calc(100% + 16px), 0, 0);
                transform: translate3d(calc(100% + 16px), 0, 0);
                transition-property: visibility, -webkit-transform, background-color;
                transition-property: visibility, transform, background-color;
                transition-duration: 0.25s;
                transition-delay: 0.1s;
                z-index : 300;
            }

            :host(.error){
                color: #fff;
                background-color: var(--error-color);
                box-shadow: var(--shadow-box-4dp-custom-error);
            }

            :host([opened]) {
                visibility: visible;
                -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0);
            }

            @media (min-width:840px){

                :host(.alert[opened]){
                    animation: ripple 5 .5s forwards linear;
                }
            }

            .layout-horizontal {
                display: var(--layout-horizontal_-_display); -ms-flex-direction: var(--layout-horizontal_-_-ms-flex-direction); -webkit-flex-direction: var(--layout-horizontal_-_-webkit-flex-direction); flex-direction: var(--layout-horizontal_-_flex-direction);
            }

            .label {
                -ms-flex: var(--layout-flex_-_-ms-flex); -webkit-flex: var(--layout-flex_-_-webkit-flex); flex: var(--layout-flex_-_flex); -webkit-flex-basis: var(--layout-flex_-_-webkit-flex-basis); flex-basis: var(--layout-flex_-_flex-basis);
                line-height: 24px;
                margin: 8px;
                font-size: 1.25em;
            }

            .modal-button {
                -ms-flex: var(--layout-flex_-_-ms-flex);
                -webkit-flex: var(--layout-flex_-_-webkit-flex);
                flex: var(--layout-flex_-_flex);
                -webkit-flex-basis: var(--layout-flex_-_-webkit-flex-basis);
                flex-basis: var(--layout-flex_-_flex-basis);
            }

            .modal-button > label {
                box-sizing: border-box;
                width: 100%;
                padding: 8px 24px;
            }

            #closeBtn {
                position: absolute;
                right: 5px;
                top: 5px;
            }

            @media (max-width: 770px) {
                :host {
                    top: auto;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    width: auto;
                    -webkit-transform: translate3d(0, 100%, 0);
                    transform: translate3d(0, 100%, 0);
                }
            }`]}render(){return n.c`
            <div class="layout-horizontal">
                <div class="label">${this.message}</div>
            </div>
            <paper-input label="Valor a ingresar" always-float-label id="sysin"></paper-input>
            <div class="layout-horizontal">
                <button class="styled-button modal-button" @click="${this.resolveVal}">
                    <label>Aceptar</label>
                </button>
            </div>`}static get properties(){return{message:{type:String},position:{type:String},opened:{type:Boolean,reflect:!0}}}resolveVal(){this.onResolve(this._("sysin").value),this.closeModal()}closeModal(){this.opened=!1}openModal(e){return this.opened=!0,this.message=e,new Promise((e,t)=>{this.onResolve=e,this.onReject=t})}reset(){this.setInitialValues(),this.classList.remove("error")}animate(){this.classList.toggle("alert"),setTimeout(()=>this.classList.toggle("alert"),2500)}}customElements.define("custom-simple-modal",_);i(80),i(73);var w=i(47);const T=new class{constructor(){this.reset()}changeHeapPointer(e){this.heap_pointer=e}changeStackPointer(e){this.stack_pointer=e}insertTemporary(e,t){if(!this.tKeys.includes(e))throw Error(e+" is not defined");this.data[e]=t}setError(e){this.error=e}getError(e){return this.error}getTemporary(e){return this.data[e]}getStackPointer(){return this.stack_pointer}addToStackPointer(e){this.stack_pointer+=e}substractToStackPointer(e){this.stack_pointer-=e}getHeapPointer(){return this.heap_pointer}getFromStack(e){return this.stack[e]}getFromHeap(e){return this.heap[e]}insertInHeap(e,t){this.heap[e]=t,window.dispatchEvent(new CustomEvent("heap-changed",{detail:this.heap}))}insertInStack(e,t){this.stack[e]=t,window.dispatchEvent(new CustomEvent("stack-changed",{detail:this.stack}))}createTemporary(e){this.data[e.toLowerCase()]=0,this.tKeys.push(e.toLowerCase())}reset(){this.consola=[""],this.data={},this.tKeys=[],this.labels=new Map,this.methods=new Map,this.stack_pointer=0,this.heap_pointer=0,this.error=0,this.stack=new Array(5e3).fill(-1),this.heap=new Array(5e3).fill(-1),this.callStack=[],window.dispatchEvent(new CustomEvent("console-changed",{detail:this.consola})),window.dispatchEvent(new CustomEvent("stack-changed",{detail:this.stack})),window.dispatchEvent(new CustomEvent("heap-changed",{detail:this.heap})),window.dispatchEvent(new CustomEvent("heap-pointer-changed",{detail:this.heap_pointer})),window.dispatchEvent(new CustomEvent("stack-pointer-changed",{detail:this.stack_pointer}))}insertInCallStack(e){this.callStack.push(e)}lastNode(){return this.callStack.pop()}mapLabels(e){let t=e;for(;null!=t;)10===t.type?this.labels.set(t.value,t):7==t.type&&this.mapLabels(t.getChild(0)),t=t.next}mapMethods(e){this.methods.clear();let t=e;for(;null!=t;)7==t.type&&this.methods.set(t.value,t),t=t.next}getNode(e){return this.labels.get(e)}insertInConsole(e,t=!1){t?this.consola.push(e):this.consola[this.consola.length-1]=this.consola[this.consola.length-1]+e,window.dispatchEvent(new CustomEvent("console-changed",{detail:this.consola}))}};window.Structures=T;var E=i(69),A=i(56);const S=new class{constructor(){this.breakpoints=[],this.onReject=null,this.onResolve=null,this.stop=!0,this.lineByLine=!1,window.addEventListener("debugger-mode",e=>{e.detail?this.lineByLine=!0:(this.lineByLine=!1,this.stop=!0)})}heapAccess(e){const t=this.leftHandAccess(e.getChild(0));return-1!==t&&0!==t||(T.insertInConsole("null pointer exception...",!0),console.log(e.line,e.column),executeLine.next(new E.a("exit",null,-1,-1))),T.heap[t]}stackAccess(e){const t=this.leftHandAccess(e.getChild(0));return T.stack[t]}assignment(e){const t=this.leftHandAccess(e.getChild(1));switch(e.getChild(0).type){case A.a.types.tmp:T.data[e.getChild(0).value]=t,window.dispatchEvent(new CustomEvent("temporaries-changed",{detail:{temporaries:T.data,tmp:e.getChild(0).value}}));break;case A.a.types.sp:T.stack_pointer=parseInt(t),window.dispatchEvent(new CustomEvent("stack-pointer-changed",{detail:T.stack_pointer}));break;case A.a.types.hp:T.heap_pointer=parseInt(t),window.dispatchEvent(new CustomEvent("heap-pointer-changed",{detail:T.heap_pointer}));break;case A.a.types.stack:const i=this.leftHandAccess(e.getChild(0).getChild(0));T.insertInStack(i,t);break;case A.a.types.heap:const s=this.leftHandAccess(e.getChild(0).getChild(0));-1!=s&&0!=s||(T.insertInConsole("null pointer exception...",!0),executeLine.next(new E.a("exit",null,-1,-1))),T.insertInHeap(s,t)}}leftHandAccess(e){switch(e.type){case A.a.types["+"]:case A.a.types["-"]:case A.a.types["*"]:case A.a.types["%"]:case A.a.types["/"]:return this.aritmethicStmt(e);case A.a.types.number:return e.value;case A.a.types.tmp:return T.getTemporary(e.value.toString().toLowerCase());case A.a.types.heap:return this.heapAccess(e);case A.a.types.stack:return this.stackAccess(e);case A.a.types.hp:return T.heap_pointer;case A.a.types.sp:return T.stack_pointer}}aritmethicStmt(e){const t=this.leftHandAccess(e.getChild(0)),i=this.leftHandAccess(e.getChild(1));switch(e.type){case A.a.types["+"]:return t+i;case A.a.types["-"]:return t-i;case A.a.types["*"]:return t*i;case A.a.types["%"]:return Math.fmod(t,i);case A.a.types["/"]:return parseFloat(t/i).toPrecision(2)}return-1}printStmt(e){const t=e.value,i=this.leftHandAccess(e.getChild(0));switch(t){case'"%c"':10===i?T.insertInConsole("",!0):13!=i&&T.insertInConsole(String.fromCharCode(i));break;case'"%i"':T.insertInConsole(i);break;case'"%d"':T.insertInConsole(Number(i).toFixed(2))}}jmpInconditionalStmt(e){const t=e.value.toString(),i=T.getNode(t);executeLine.next(i.last).value}jmpConditionalStmt(e){const t=this.leftHandAccess(e.getChild(0)),i=this.leftHandAccess(e.getChild(1)),s=e.value,r=T.getNode(s);switch(e.type){case A.a.types["=="]:t===i&&executeLine.next(r).value;break;case A.a.types["<>"]:t!==i&&executeLine.next(r).value;break;case A.a.types[">"]:t>i&&executeLine.next(r).value;break;case A.a.types["<"]:t<i&&executeLine.next(r).value;break;case A.a.types[">="]:t>=i&&executeLine.next(r).value;break;case A.a.types["<="]:t<=i&&executeLine.next(r).value}}async executeProgram(e){console.log("STARTING EXECUTION...");let t=null,i=!0,s=!1;for(T.reset();t=executeLine.next().value;)switch(i&&(T.labels.clear(),T.mapLabels(t),T.mapMethods(t),i=!1),this.lineByLine&&this.breakpoints.length>0?(s||(s=this.breakpoints[0]===t.getLine()))&&await this.stopLine(t.getLine()):this.stop&&!this.lineByLine&&(this.breakpoints.includes(t.getLine())&&await this.stopLine(t.getLine()),this.stop=this.breakpoints.length>0),t.type){case A.a.types.var:this.declarationStmt(t);break;case A.a.types.goto:this.jmpInconditionalStmt(t);break;case A.a.types["<"]:case A.a.types[">"]:case A.a.types["<="]:case A.a.types[">="]:case A.a.types["<>"]:case A.a.types["=="]:this.jmpConditionalStmt(t);break;case A.a.types["="]:this.assignment(t);break;case A.a.types.print:this.printStmt(t);break;case A.a.types.end:executeLine.next(T.lastNode());break;case A.a.types.call:T.insertInCallStack(t);const e=T.methods.get(t.value);executeLine.next(e.getChild(0))}console.log("EXECUTION FINISHED..."),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"interpreter has finished"})),window.dispatchEvent(new CustomEvent("finished"))}declarationStmt(e){for(let t=0;t<e.children.length;t++)11===e.getChild(t).type&&(T.createTemporary[e.getChild(t).value]=-1)}setBreakPoint(e){this.breakpoints=e}stopLine(e){return window.dispatchEvent(new CustomEvent("stopped",{detail:e})),new Promise((e,t)=>{this.onResolve=e,this.onReject=t})}};var C=i(67),k=i(81);const L=new class{constructor(){this.lineSize=15,this.optimization=[]}reset(){this.optimization=[]}performOptimization(e){let t=e;for(;null!=t;){switch(t.getType()){case A.a.types["="]:this.optimizationEq(t);break;case A.a.types.method:this.performOptimization(t.getChild(0));break;case A.a.types["<"]:case A.a.types["<="]:case A.a.types[">"]:case A.a.types[">="]:case A.a.types["<>"]:case A.a.types["=="]:case A.a.types.goto:this.optimizationJump(t)}t=t.next}}optimizationEq(e){let t=null,i=-1;switch((t=e.getChild(1)).getType()){case A.a.types["+"]:-1!==(i=t.hasZero())&&this.inspectByRule812(e,0!==i);break;case A.a.types["-"]:1===(i=t.hasZero())&&this.inspectByRule913(e);break;case A.a.types["*"]:if(-1!==(i=t.hasOne())){this.inspectByRule1014(e,0!==i);break}if(-1!==(i=t.hasZero())){this.inspectByRule17(e,0!==i);break}if(-1!==(i=t.hasTwo())){this.inspectByRule16(e,i);break}break;case A.a.types["/"]:if(1===(i=t.hasOne())){this.inspectByRule1115(e);break}if(0===(i=t.hasZero())){this.inspectByRule18(e);break}}}optimizationJump(e){switch(e.getType()){case A.a.types["<"]:case A.a.types["<="]:case A.a.types[">"]:case A.a.types[">="]:case A.a.types["<>"]:case A.a.types["=="]:if(this.inspectByRule45(e),e.mark)break;this.inspectByRule3(e)}}optimizationMessage(e,t,i,s){this.optimization.push({rule:e,line:t,oldval:i,newval:s})}inspectByRule45(e){if(!e.isConstantOperation())return;const t=e.next.getType()===A.a.types.goto,i=e.toString()+(t?e.next.toString():""),s=this.evalOperation(e);e.isFalse||(s?(e.children=[],e.next=e.next.next,e.changeType("goto"),this.optimizationMessage(4,e.line,i,e.toString())):t?(e.last.next=e.next,this.optimizationMessage(5,e.line,i,e.next.toString()),e.mark=!0):(e.last=e.next,e.mark=!0,this.optimizationMessage(4,e.line,i,"")))}inspectByRule1(e){if(e.getChild(1).children.length>1||e.getChild(1).getChild(0).getType()!==A.a.types.tmp)return;const t=e.getChild(1).getValue(),i=e.getChild(0).getValue();let s=e.next;const r=[];for(;null!=s&&(s.getType()!==A.a.types["="]||this.rule1Helper(s,r,t,i));)s=s.next;for(const e of r)this.optimizationMessage(1,e.line,e.toString(),""),e.last.next=e.next}rule1Helper(e,t,i,s){return e.getChild(0).getType()!==A.a.types.tmp||(e.getChild(1).getType()!==A.a.types.tmp||(e.getChild(0).getValue()!==i||e.getChild(1).getType()===A.a.types.tmp)&&((e.getChild(0).getValue()!==i||e.getChild(1).getValue()===s)&&(t.push(e),!0)))}inspectByRule3(e){const t=e,i=e.next,s=i.next;if(i.getType()!==A.a.types.goto)return;if(s.getType()!==A.a.types.label)return;const r=t.toString()+i.toString()+s.toString();t.getValue()===s.getValue()&&(t.converToFalse(),t.setValue(i.getValue()),t.next=s.next,this.optimizationMessage(3,e.line,r,t.toString()))}inspectByRule16(e,t){const i=0===t?e.getChild(1).getChild(1).copy():e.getChild(1).getChild(0).copy(),s=e.toString();e.getChild(1).deleteAt(t),e.getChild(1).addChild(i),e.getChild(1).changeType("+"),this.optimizationMessage(16,e.line,s,e.toString())}inspectByRule1115(e){const t=e.getChild(0).getValue(),i=e.getChild(1).getChild(0).getValue();this.moveByRule(e,!0,t===i?11:15)}inspectByRule17(e,t){this.moveByRule(e,0===t,17)}inspectByRule18(e,t){this.moveByRule(e,!0,18)}inspectByRule913(e){const t=e.getChild(0).getValue(),i=e.getChild(1).getChild(0).getValue();this.moveByRule(e,!0,t===i?9:13)}inspectByRule67(e){const t=e.getValue();let i=e.next;for(;null!==i&&i.getValue()!==t;)i=i.next;if(null!==i&&i.next.getType()===A.a.types.goto){const t=`${e.toString()} ... ${i.toString()}${i.next.toString()}`;e.setValue(i.next.getValue()),this.optimizationMessage(e.getType()===A.a.types.goto?6:7,e.line,t,`${e.toString()} ... ${i.toString()}${i.next.toString()}`)}}inspectByRule1014(e,t=!0){const i=e.getChild(0).getValue(),s=e.getChild(1).getChild(t?0:1).getValue();this.moveByRule(e,t,i===s?10:14)}inspectByRule812(e,t=!0){const i=e.getChild(0).getValue(),s=e.getChild(1).getChild(t?0:1).getValue();this.moveByRule(e,t,s===i?8:12)}moveByRule(e,t=!0,i){const s=e.toString(),r=e.deleteAt(1)[0];e.addChild(r.deleteAt(t?0:1)[0]),this.optimizationMessage(i,e.line,s,e.toString())}programOptimization(e){console.log("Starting optimization..."),this.reset(),this.performOptimization(e),console.log("Optimization finished..."),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"optimization by peephole done"})),window.dispatchEvent(new CustomEvent("optimization-done",{detail:this.optimization}))}evalOperation(e){const t=e.getChild(0).getValue(),i=e.getChild(1).getValue();switch(e.getType()){case A.a.types["<"]:return t<i;case A.a.types[">"]:return t>i;case A.a.types["<="]:return t<=i;case A.a.types[">="]:return t>=i;case A.a.types["<>"]:return t!==i;default:return t===i}}};const v=new class{isTemporal(e){return e.getType()===A.a.types.tmp}isPointer(e){return e.getType()===A.a.types.hp||e.getType()===A.a.types.sp}optimizationMessage(e,t,i,s,r){r.push({rule:e,line:t,oldval:i,newval:s})}subExpressionDeletion(e,t){let i=e.ast;for(;null!=i;){if(!this.isTemporal(i)){i=i.next;continue}let s=i.next;const r=i.getValue(),n=this.getChild(1).getNonNumericTypes();for(;null!=s;)if(s.getType()===A.a.types["="]){if(this.isPointer(s.getChild(0))){if(s.getChild(0).getType()===A.a.types.hp&&n.includes("H"))break;if(s.getChild(0).getType()===A.a.types.sp&&n.includes("P"))break}if(this.isTemporal(s.getChild(0))&&s.getChild(0).getValue()===r)break;if(this.isTemporal(s.getChild(0))&&s.getChild(1).typeEquality(i.getChild(1))){const r=s.toString();s.deleteAt(1),s.addChild(i.getChild(0).copy()),this.optimizationMessage(21,"B"+e.key,r,s.toString(),t)}s=s.next}else s=s.next;i=i.next}}copyCatPropagation(e,t){let i=e.ast;for(;null!=i;){if(!this.isTemporal(i)){i=i.next;continue}let s=i.next;const r=i.getValue(),n=this.getChild(1).getNonNumericTypes();for(;null!=s;)if(s.getType()===A.a.types["="]){if(this.isPointer(s.getChild(0))){if(s.getChild(0).getType()===A.a.types.hp&&n.includes("H"))break;if(s.getChild(0).getType()===A.a.types.sp&&n.includes("P"))break}if(this.isTemporal(s.getChild(0))&&s.getChild(0).getValue()===r)break;if(this.isTemporal(s.getChild(0))&&s.getChild(1).typeEquality(i.getChild(1))){const r=s.toString();s.deleteAt(1),s.addChild(i.getChild(0).copy()),this.optimizationMessage(21,"B"+e.key,r,s.toString(),t)}s=s.next}else s=s.next;i=i.next}}unusedVariable(e,t){let i=e.ast;const s=[];for(;null!=i;){if(i.getType()!==A.a.types["="]){i=i.next;continue}if(!this.isTemporal(i.getChild(0))){i=i.next;continue}let e=i.next;const t=i.getChild(0).getValue();let r=!1;for(;null!=e;)if(e.getType()===A.a.types["="]){if(e.usesTmp(t)){r=!0;break}e=e.next}else e=e.next;r||s.push(i),i=i.next}for(const i of s)this.optimizationMessage(23,"B"+e.key,i.toString(),"",t),null!==i.last&&(i.last.next=i.next),null!==i.next&&(i.next.last=i.last)}};let O=0;class N{constructor(e){this.links=[],this.tLinks=[],this.ast=e,this.key=O++,this.visited=!1,this.optimization=[]}setLink(e){this.links.push(e)}isJump(e){switch(e){case A.a.types["<="]:case A.a.types[">="]:case A.a.types["<"]:case A.a.types[">"]:case A.a.types["<>"]:case A.a.types["=="]:case A.a.types.goto:return!0;default:return!1}}toString(){return`B${this.key}[label=<\n        <table border='1' cellborder='0' >\n          <tr><td bgcolor="lightblue"><font color="#0000ff">B${this.key}</font></td></tr>\n          ${this.nodeInfo()}\n        </table>\n      >]\n\n      ${this.links.map(e=>`B${this.key}->B${e.key}`).join("\n")}`}isTmpVar(e){return e.getType()===A.a.types.var&&e.getChild(0).getType()===A.a.types.tmp}nodeInfo(){let e=this.ast,t="";for(;null!=e;)this.isJump(e.getType())||this.isTmpVar(e)?t+=`<tr><td>  ${e.toStringSpecial()}  </td></tr>\n`:t+=`<tr><td>${e.toString()}</td></tr>\n`,e=e.next;return t}}const R=new class{constructor(){this.ast=null,this.methodStack=[["global",[]]],this.blockStack=this.methodStack[this.methodStack.length-1][1],this.Helpers=[]}isJump(e){switch(e){case A.a.types["<="]:case A.a.types[">="]:case A.a.types["<"]:case A.a.types[">"]:case A.a.types["<>"]:case A.a.types["=="]:case A.a.types.goto:return!0;default:return!1}}findNextBlock(e){const t=e;t.isLeader||window.alert("el ini no es lider!!!!");let i=e.next;for(;null!==i&&!i.isLeader;)i=i.next;if(null==i)return this.createBlock(t),null;const s=this.findJumpNode(i.last.getValue()),r=this.createBlock(t);return null!==i&&r.tLinks.push(i),null!=s&&r.tLinks.push(s),i}findJumpNode(e){let t=this.ast;for(;null!=t;){if(t.getType()===A.a.types.label&&t.getValue()===e)return t;t=t.next}return null}createBlock(e,t){const i=e.copy();if(0===t)return this.blockStack.push(new N(i)),this.blockStack[this.blockStack.length-1];for(;null!=e.next&&!e.next.isLeader;)e=e.next,i.setNext(e.copy());return i.setNext(null),this.blockStack.push(new N(i)),this.blockStack[this.blockStack.length-1]}markLeadersJump(e){let t=this.ast;for(;null!=t;){if(t.getType()===A.a.types.label&&t.getValue()===e)return t.markLeader(),t;t=t.next}return null}markAllLeadersInBlock(){let e=this.ast;for(;null!=e;)this.isJump(e.getType())&&(this.markLeadersJump(e.getValue()),e.next&&e.next.markLeader()),e=e.next}makeLinks(){for(const e of this.blockStack)for(const t of e.tLinks){const i=this.getBlockByLeading(e,t);null!==i&&e.links.push(i)}}getBlockByLeading(e,t){for(const i of this.blockStack)if(i!==e&&i.ast.equals(t))return i;return null}divideByBlocks(e){O=0,this.methodStack=[],this.Helpers=[],this.blockStack=null;let t=e,i=!1;for(this.Helpers.push(e);null!=t.next;)t.getType()===A.a.types.method?(this.Helpers.push(t),i||(t.last.next=null),i=!0):i&&(e.setNext(t),i=!1),t=t.next;for(const e of this.Helpers)e.last=null,e.setNext(null);for(const e of this.Helpers)this.blockCreation(e);window.dispatchEvent(new CustomEvent("graphblock-generated",{detail:this.graphBlocks()}))}blockCreation(e){if(e.getType()===A.a.types.method){this.methodStack.push([e.getValue(),[]]),this.blockStack=this.methodStack[this.methodStack.length-1][1],e.trimMethodList(),this.ast=e.getChild(0),this.ast.markLeader();let t=this.ast;for(this.markAllLeadersInBlock();null!==t;)t=this.findNextBlock(t);this.makeLinks()}else{this.methodStack.push(["global",[]]),this.blockStack=this.methodStack[this.methodStack.length-1][1],this.ast=e,this.ast.markLeader();let t=this.ast;for(this.markAllLeadersInBlock();null!==t;)t=this.findNextBlock(t);this.makeLinks()}}graphBlocks(){let e='Digraph G {\n\trankdir="RL";';for(const t of this.methodStack)e+=`subgraph cluster_${t[0]} {\n          label = "${t[0]}";\n          node [shape=plaintext fontname="Sans serif" fontsize="8"];\n          ${t[1].reverse().map(e=>e.toString()).join("\n")}\n      }`;return e+="\n}",e}performOptimization(){this.optimization=[];for(const e of this.methodStack)for(const t of e[1])v(t,this.optimization);window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"optimization by block done"})),window.dispatchEvent(new CustomEvent("optimization-done",{detail:this.optimization}))}};var I=i(82);class x extends n.a{constructor(){super(),this.files={},window.addEventListener("stopped",e=>{this.started=1,this.highLight(e.detail)}),window.addEventListener("finished",()=>{this.started=0,this.debugged_line=-1}),window.addEventListener("run",()=>{0!==this.started&&this.debugg()}),this.breakPoints=[],this.started=0,this.debugged_line=0,this.parsed=!1,this.name="MainClass.j",this.src=""}static get styles(){return[r.d,r.f,g,n.b`
      .CodeMirror {
          border-top: 1px solid black;
      }

      .upload-btn-wrapper{
          grid-column: 1 / 3;
          border-bottom: 1px solid black;
          padding: 5px;
      }

      custom-accordion {
        margin: 20px;
        grid-column: 1 / 3;
      }

      :host{
          display:block;
          width: 95%;
          height:100%;
          margin-left: 2.5%;
          transition: transform 250ms;
          box-shadow: var(--shadow-box-2dp-custom);
          background: white;
          border-radius: 5px;
          display: grid;
          grid-template-columns: minmax(0,1fr) minmax(0,1fr);
      }


      :host(:hover) {
          box-shadow: var(--shadow-box-8dp-custom);
      }

      textarea{ height: 95%; width:100%;}

      .upload-btn-wrapper {
          position: relative;
          overflow: hidden;
          display: inline-block;
      }

      .btn {
          border: 2px solid gray;
          color: gray;
          background-color: white;
          padding: 8px 20px;
          border-radius: 5px;
          font-size: 20px;
          font-weight: bold;
          cursor: pointer;
      }

      .upload-btn-wrapper input[type=file] {
          font-size: 100px;
          position: absolute;
          width: 60px;
          height: 40px;
          top: 12px;
          left: 9px;
          opacity: 0;
          cursor: pointer;
      }

      paper-button{
          fill: black;
          border-radius: 5px;
          border: 2px solid grey;
      }

      .CodeMirror.cm-s-default {
          background: lightcyan;
          border-radius: 0 0 5px 5px;
          cursor: text;
      }

      .CodeMirror-gutter-elt{
          left: 0 !important;
      }

      .highlight-class{
          background: #00fff2 !important;
      }

      custom-switch {
          margin-left: 15%;
      }

      .overflowable {
        with: 100%;
      }

      .icon{
        width: 36px;
        height: 36px;
        display: block;
        padding: 5px;
        margin-left: 90%;
        border-radius: 100%;
        background: white;
        cursor: pointer;
        transition: 250ms all;
      }

      .icon:hover{
        fill: white;
        background: var(--dark-primary-color);
        box-shadow: var(--shadow-elevation-4dp);
      }

      pre {
        display: inline-block;
        width: calc(100% - 30px);
      }

      .lines{
        width: 25px;
      }`]}static get properties(){return{src:{type:String},code3D:{type:String},name:{type:String},breakPoints:{type:Array},started:{type:Number},debugged_line:{type:Number},temporary:{type:String},index:{type:Number},files:{type:Object},optCode:{type:String}}}firstUpdated(){this.editor=this._("pascaltext"),this.editor3D=this._("code3D"),window.Modal=this._("modal"),this.code_editor=f.a.fromTextArea(this.editor,{lineNumbers:!0,gutters:["CodeMirror-linenumbers","breakpoints"],matchBrackets:!0,mode:"text/x-java"}),this.code_editor_3D=f.a.fromTextArea(this.editor3D,{lineNumbers:!0,gutters:["CodeMirror-linenumbers","breakpoints"],matchBrackets:!0,mode:"javascript"}),this.code_editor_3D.on("gutterClick",(e,t)=>{const i=e.lineInfo(t);this.setBreakPoint(i.line,void 0===i.gutterMarkers),e.setGutterMarker(t,"breakpoints",i.gutterMarkers?null:this.makeMarker())}),this.code_editor.on("change",e=>{this.src=e.getValue(),""!==this.name&&void 0!==this.files[this.name]&&(this.files[this.name].src=this.src),this.dispatchEvent(new CustomEvent("editor-valor-cambio",{detail:e.getValue()}))}),this.code_editor_3D.on("change",e=>{this.codigo3D=e.getValue()}),this._("real-input").addEventListener("change",e=>{e.preventDefault();const t=new FileReader;t.addEventListener("load",e=>{const t=e.target.result;this.code_editor.setValue(t)}),t.readAsText(this._("real-input").files[0]),this.name=this._("real-input").files[0].name,this.dispatchEvent(new CustomEvent("name-changed",{detail:this.name})),h.a.CurrentFile=[this.name]})}render(){return n.c`
            <div class="upload-btn-wrapper" style="grid-column: 1 / 3;">
                <button class="btn"><span>${w.d}</span></button>
                <input type="file" name="myfile" id="real-input"/>
                <paper-button @click="${this.translate}">${w.n}</paper-button>
                ${0===this.started?n.c`<paper-button @click="${this.interpret}">${w.i}</paper-button>`:""}
                ${0!==this.started?n.c`<paper-button @click="${this.debugg}">
                    ${1==this.started?w.e:w.m}</paper-button>`:""}
                <paper-button @click="${this.save}">${w.l}</paper-button>
                <paper-button @click="${this.refresh}">${w.k}</paper-button>
                <paper-button @click="${this.optimization}" title="Optimización por mirilla">${w.a}</paper-button>
                <paper-button @click="${this.blockOptimization}" title="Optimización por bloques">${w.c}</paper-button>
            </div>
            <div style="grid-column:1 / 3; border-bottom: 1px solid black;">${this.debugged_line>0?"Current Line: "+this.debugged_line:""}</div>
            <div>
                <h3>MATRIOSHTS</h3>
                <textarea id="pascaltext"></textarea>
            </div>
            <div id="container-3D">
                <h3>3D CODE</h3>
                <textarea id="code3D"></textarea>
            </div>
            <custom-accordion id="optimization">
              <label style="line-height: 1.75;" slot="title-box">Codigo optimizado</label>
              <div slot="panel-box" style="max-height:50vh; overflow:auto; width:100%;" class="overflowable">
                <span class="icon" @click=${this.copyToClipboard} title="Copiar contenido">${w.h}</span>
                <pre class="lines">${this.optCode?this.optCode.split("\n").map((e,t)=>t+1).slice(0,-1).join(".\n"):""}</pre>
                <pre>${this.optCode?this.optCode:""}</pre>
              </div>
            </custom-accordion>
            <custom-simple-modal id="modal"></custom-simple-modal>
        `}async translate(){let e;window.limpiarTodo();try{e=I.a.parse(this.src)}catch(e){window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores}))}if(!e)return;let t=e.declasGlobales();window.primeraPasada=!1;let i=e.traducir();e.graficarArbol2(),window.dispatchEvent(new CustomEvent("graficar-tree",{detail:window.strArbol})),this.translate2(t+window.strObjetos+window.strFunciones+"void main() {\n"+i+"}"),window.errores.length>0&&window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores}))}async translate2(e){if(""!==e)try{if(C.b.parse(e)){window.index=0,C.a.setIndex(window.index);try{this.graphViz(C.a),this.code3D=h.a.process(C.a,this.files),this.code_editor_3D.setValue(this.code3D);let e={};for(const t of h.a.ClassTemplates.keys())e={...e,...h.a.ClassTemplates.get(t).jsonify(t)};e={...h.a.SymbolTable.jsonify("globales")},h.a.Root.setIndex(window.index),this.fire("info-setted",{symtab:e,errors:h.a.Errores}),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"Parsed succesfully"}))}catch(e){if(window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"Parse failed"})),this.isObject(e)&&e.message)return this.code_editor_3D.setValue(e.message),void this.fire("info-setted",{symtab:{},errors:0===h.a.Errores.length?[e.message]:h.a.Errores.map(e=>`[SEMANTICO: ${e} ]`)});this.code_editor_3D.setValue("OCURRIO UN ERROR, VEA LA CONSOLA DE ERRORES"),null!=h.a.Root&&(h.a.Root.setIndex(window.index),this.graphViz(h.a.Root)),this.fire("info-setted",{symtab:{},errors:h.a.Errores.map(e=>`[SEMANTICO: ${e} ]`)})}}}catch(e){if(console.log(e),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"parsing failed"})),this.isObject(e)&&e.hash){let t=`[${"INVALID"===e.hash.token?"LEXICO":"SINTACTICO"} AT LINE ${e.hash.loc.first_line}`;t+=` COLUMN ${e.hash.loc.first_column} FOUND ${e.hash.text} EXPECTED: ${e.hash.expected.join(",")} IN FILE ${h.a.CurrentFile}]`,window.dispatchEvent(new CustomEvent("error-catched",{detail:[t]}))}else window.dispatchEvent(new CustomEvent("error-catched",{detail:[e]}))}}debuggMode(e){window.dispatchEvent(new CustomEvent("debugger-mode",{detail:e.currentTarget.value()}))}async interpret(){""!==this.codigo3D&&(k.b.parse(this.codigo3D)&&(S.setBreakPoint(this.breakPoints),S.lineByLine=this.$$("custom-switch").value(),window.executeLine=function*(e){for(var t=e;t&&26!==t.type;){var i=yield t;t=t.next,i&&(t=i)}}(k.a),this.parsed=!0),S.executeProgram(this.temporary))}save(){void 0!==this.files[this.name]&&(this.files[this.name].src=this.code_editor.getValue());var e=new Blob([this.code_editor.getValue()],{type:"txt"});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(e,filename);else{var t=document.createElement("a"),i=URL.createObjectURL(e);t.href=i,t.download=this.name,document.body.appendChild(t),t.click(),setTimeout((function(){document.body.removeChild(t),window.URL.revokeObjectURL(i)}),0)}}sleep(e){return new Promise(t=>setTimeout(t,e))}setBreakPoint(e,t){if(t)this.breakPoints.push(e+1),this.breakPoints.sort();else{const t=this.breakPoints.indexOf(e+1);this.breakPoints.splice(t,1),this.breakPoints.sort(),S.setBreakPoint(this.breakPoints)}}makeMarker(){const e=document.createElement("div");return e.style.color="#822",e.innerHTML="●",e}set3D(e){this.codigo3D=e,this.code_editor_3D.setValue(e)}refresh(){this.breakPoints=[],S.setBreakPoint(this.breakPoints),Array.from(this.$$$(".highlight-class")).forEach(e=>e.classList.remove("highlight-class"))}highLight(e){const t=Array.from(this.$$$("#container-3D .CodeMirror-linenumber.CodeMirror-gutter-elt")).find(t=>Number(t.textContent)==e);t&&t.parentNode.parentNode.classList.add("highlight-class"),this.debugged_line=e}debugg(){this.started=1,Array.from(this.$$$(".highlight-class")).forEach(e=>e.classList.remove("highlight-class")),S.onResolve(!0)}graphViz(e){this.graph=`Digraph G {\n            ${e.writeNode()}\n        }`,this.fire("graphviz-generated",this.graph)}blockOptimization(){""!==this.codigo3D&&(k.b.parse(this.codigo3D)&&R.divideByBlocks(k.a),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"optimization by blocks done"})))}openFile(e){this.name=e,this.src=this.files[e].src,this.code_editor.setValue(this.src),h.a.CurrentFile=[e],this.requestUpdate()}optimization(){if(""===this.codigo3D)return;k.b.parse(this.codigo3D)&&L.programOptimization(k.a);let e=k.a.next;for(this.optCode=k.a.toString();null!=e;)this.optCode+=e.toString(),e=e.next}setVarGlobal(){h.a.VarFlag=this._("varglobal").value()}copyToClipboard(){const e=document.createElement("textarea");e.value=this.optCode,document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e)}}customElements.define("editor-cql",x);const P=class extends n.a{_animation(e,t=null){if(this.disabled)return;let i=null!=e&&e.currentTarget.parentNode.parentNode||t;i.classList.toggle("active"),this.classList.toggle("active");let s=i.nextElementSibling;null!==s&&(s.classList.contains("hide")?s.classList.toggle("hide"):setTimeout(()=>s.classList.toggle("hide"),500),s.classList.toggle("chosen"))}close(e=null){let t=null!==e?e.currentTarget:this.$$(".accordion");this._animation(null,t)}open(){let e=this.disabled;this.disabled=!1,this.close(),this.disabled=e}};customElements.define("custom-accordion",class extends P{static get properties(){return{disabled:{type:Boolean}}}static get styles(){return[r.a,n.b`
                div:first-child {
                    width: 100%;
                    display: grid;
                    grid-template-columns: minmax(0,0.9fr) minmax(0,0.1fr);
                }

                div.panel{
                    background: var(--secondary-background-color);
                    width: 100%;
                    display: flex;
                    flex-direction: row;
                    flex-wrap: wrap;
                    align-items: center;
                    align-content: center;
                    justify-content: space-between;
                }

                button {
                    background: transparent;
                    border: none;
                    outline: none;
                    fill: var(--disabled-color);
                }

                .active span:first-child, span:nth-child(2){
                    display:none
                }

                .active span:nth-child(2), span:first-child{
                    display: block;
                }

                slot[name="title-box"]::slotted(label){ 
                    margin-left: 16px; 
                }

                @media (max-width:440px){
                    div:first-child {
                        grid-template-columns: minmax(0,0.75fr) minmax(0,0.25fr);
                    }
                }

                @media (max-width:840px){
                    div.panel {
                        flex-direction: column;
                        flex-wrap: initial;
                    }
                    
                    ::slotted(:last-child){
                        margin-bottom:12.5px;
                    }
                }

                :host([no-header]) div.panel{
                    border-radius: 5px;
                }
                
                :host([no-hover]) .accordion:hover, :host([no-hover]) .panel, :host([no-hover]) .accordion.active{
                    border-radius: 0;
                }
                
                :host([no-options]) .accordion{
                    display: none;
                }
                
                :host([no-shadow]) div.panel{
                    box-shadow: none;
                    background: transparent;
                    padding: 0;
                }`]}render(){return n.c`
            <div class="accordion">
                <slot name="title-box">
                </slot>
                <slot name="icons-box">
                    <button @click="${this._animation}">
                        <span>${w.j}</span>
                        <span>${w.g}</span>
                    </button>
                </slot>
            </div>
            <div class="panel chosen hide">
                <slot name="panel-box">
                <div style="text-align: center;">Nada que mostrar!</div>
                </slot>
            </div>
        `}constructor(){super(),this.disabled=!1}});class j extends n.a{constructor(){super(),window.File&&window.FileReader&&window.FileList&&window.Blob||alert("The File APIs are not fully supported in this browser."),this.output={}}static get styles(){return[n.b`
        :host {
          height: fit-content;
          display: block;
          padding: 25px;
          width: 100%;
        }

        input {
          margin: auto;
          display: block;
          outline: none;
        }

        .objects{
          cursor: pointer;
          margin-top: 10px;
        }

        .objects > div{
            background: var(--default-primary-color);
            padding: 5px;
            color: white;
        }

        .objects > div:first-child{
          border-top-left-radius: 5px;
          border-top-right-radius: 5px;
        }

        .objects > div:last-child{
          border-bottom-left-radius: 5px;
          border-bottom-right-radius: 5px;
        }

        .objects > div:hover{
          background: var(--accent-color);
          transition: 250 ease-in;
          font-size: 2em;
          height: 36px;
        }

        span{
          float: right;
          display:block;
          padding: 1px 8px;
          box-sizing: border-box;
        }

        span:hover{
          color: var(--accent-color);
          background: white;
          border-radius:5px;
          transition: 250 ease-in;
          font-weight: bolder;
        }
      `]}static get properties(){return{output:{type:Object}}}render(){return n.c`<input type="file" webkitdirectory="" directory="" @change=${this.handleFileSelect}>
                <div class="objects"> ${this.isObjectEmpty(this.output)?"":Object.keys(this.output).map(e=>n.c`
                    <div @dblclick=${this.openFile} key="${e}">
                      ${e}
                      <span @click=${this.deleteFile} key="${e}">X</span>
                    </div>`)}
                </div>`}deleteFile(e){delete this.output[e.currentTarget.getAttribute("key")],this.requestUpdate(),this.fire("update-import",this.output)}openFile(e){this.fire("open-file",e.currentTarget.getAttribute("key"))}handleFileSelect(e){const t=[],i=this;for(const s of Array.from(e.target.files))s.webkitRelativePath.includes(".j")&&(t.push(new FileReader),t[t.length-1].addEventListener("load",(function(e){const t=s.webkitRelativePath.split("/")[0];i.output[s.name.toLowerCase()]={src:e.target.result,relative:s.webkitRelativePath.split(t).join("."),name:s.name.toLowerCase().split(".")[0],parsed:!1},i.requestUpdate(),i.fire("update-import",i.output)})),t[t.length-1].readAsText(s))}}customElements.define("import-component",j);class $ extends s.a{static get styles(){return[r.f,r.d,a,...super.styles,n.b`
        :host {
          --paper-tabs-selection-bar-color: var(--light-primary-color);
          --iron-icon-fill-color: var(--dark-primary-color);
        }

        custom-accordion{
          width: 95%;
          margin: auto;
          background: white;
          box-shadow: var(--shadow-box-2dp-custom);
          border-radius: 5px;
          margin: 5px auto;
        }

        textarea {
          background: blue;
          color: white;
          width: 100%;
          height: 1000px;
          outline: none;
          border: 0;
        }

        paper-tab.iron-selected{
          background: var(--accent-color);
          color: var(--light-primary-color);
          fill: var(--light-primary-color);
        }

        paper-tab {
          width: 30%;
          max-width: 30%;
          min-width: 30%;
          background: var(--dark-primary-color);
          color: white;
          fill: white;
          border-radius: 5px 5px 0 0;
        }

        paper-tab:not(:last-child){
          margin: 2px;
        }

        #plus-paper-tab {
          width: 50px;
          min-width: 50px;
          max-width: 50px;
        }

        paper-tab:hover {
          background: var(--accent-color);
          color: var(--light-primary-color);
          fill: var(--light-primary-color);
        }

        paper-tabs{
          width: 90% !important;
          margin: auto;
        }

        paper-tab span {
          position: absolute;
          right: 0;
          top: 11px;
        }
      `]}static get properties(){return{information:{type:Object},errors:{type:Array},graph:{type:String},blockgraph:{type:String},files:{type:Object},selected:{type:Number},windows:{type:Array},current:{type:Number}}}render(){return n.c`
      <custom-accordion id="import">
        <label style="line-height: 1.75;" slot="title-box">Carpeta para importar</label>
        <import-component slot="panel-box" @update-import=${this.updateData} @open-file="${this.open}"></import-component>
      </custom-accordion>
      <paper-tabs scrollable fit-container .selected="${this.selected}">
      ${this.windows.map((e,t)=>n.c`<paper-tab idx="${t}" @click="${this.selectTab}">${e}${0===t?"":n.c`<span idx="${t}" @click=${this.close}>${w.b}</span>`}</paper-tab>`)}
        <paper-tab @click="${this.newTab}" id="plus-paper-tab">${w.j}</paper-tab>
      </paper-tabs>
      <iron-pages .selected="${this.selected}">
        ${this.windows.map(e=>n.c`<editor-cql
          @info-setted="${this.setInfo}"
          @graphviz-generated="${this.changeGraph}"
          .files=${this.files}
          @blockgraph-generated="${this.changeBlockGraph}"></editor-cql>`)}
      </iron-pages>
      <console-element .information=${this.information} .errors="${this.errors}" .graph="${this.graph}" .blockgraph="${this.blockgraph}"></console-element>
    `}updateData(e){this.files=e.detail,this.requestUpdate()}open(e){this.$$$("editor-cql")[this.selected].openFile(e.detail)}setInfo(e){this.information=e.detail.symtab,this.errors=e.detail.errors,this.requestUpdate()}selectTab(e){this.selected=Number(e.currentTarget.getAttribute("idx"))}newTab(){this.windows.push(`New${this.current++}.j`),this.requestUpdate()}constructor(){super(),this.information={},this.files={},this.errors=[],this.graph="",this.selected=0,this.windows=["New0.j"],this.current=1}changeGraph(e){this.graph=e.detail}changeBlockGraph(e){this.blockgraph=e.detail}close(e){e.preventDefault(),this.windows.splice(Number(e.currentTarget.getAttribute("idx")),1),setTimeout(()=>{this.selected=this.windows.length-1},250)}}window.customElements.define("primary-view",$)}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,