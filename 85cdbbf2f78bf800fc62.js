(window.webpackJsonp=window.webpackJsonp||[]).push([[1],Array(53).concat([function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));const r=class{constructor(e,t,i,r){this.token=e,this.texto=t,this.location=i,this.hijos=r,this.indice=0}generarIndices(e){window.indices=window.indices+1,e instanceof r&&(e.indice=window.indices);for(let t=0;t<e.hijos.length;t++)e.hijos[t]instanceof r&&this.generarIndices(e.hijos[t])}graficarArbol2(){window.indices=0,this.generarIndices(this),window.strArbol="",window.strArbol+="Digraph G{\n",window.strArbol+="graph [ranksep=2]\n node[shape=record,height=.1,style=filled];\n",null!=this&&this.grafNodos2(),window.strArbol+="}"}traducir(){return""}graficarArbol(){window.indices=0,this.generarIndices(this),window.strArbol="",window.strArbol+="Digraph G{\n",window.strArbol+="graph [ranksep=2]\n node[shape=record,height=.1,style=filled];\n",null!=this&&this.grafNodos(),window.strArbol+="}"}traducir(){return""}grafNodos2(){if(this instanceof r){window.strArbol+="node"+this.indice+'[label = "'+this.texto.replaceAll(">","\\>").replaceAll("<","\\<")+'",fillcolor="lightcyan2"];\n';for(let e=0;e<this.hijos.length;e++)this.hijos[e]instanceof r&&(this.hijos[e].grafNodos2(),window.strArbol+="node"+this.indice+"->node"+this.hijos[e].indice+";\n")}}grafNodos(){if(this instanceof r){window.strArbol+="node"+this.indice+'[label = "'+this.texto.replaceAll(">","\\>").replaceAll("<","\\<")+'",fillcolor="green"];\n';for(let e=0;e<this.hijos.length;e++)this.hijos[e]instanceof r&&(this.hijos[e].grafNodos(),window.strArbol+="node"+this.indice+"->node"+this.hijos[e].indice+";\n")}}getToken(){return this.token}ejecutar(){}ejecutar2(){}ejecutar3(){}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));const r=class{constructor(e,t,i,r){this.descripcion=t,this.fila=i,this.columna=r,this.tipo=e}getDescripcion(){return this.descripcion}getLinea(){return this.fila}getColumna(){return this.columna}getTipo(){return this.tipo}}},,function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(8);class o extends r.a{shouldUpdate(){return this.active}static get styles(){return[r.b`
        :host {
          height: fit-content;
          display: block;
          padding: 25px;
          background: var(--light-secondary-color);
        }
      `]}static get properties(){return{active:{type:Boolean}}}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));const r=class{constructor(e,t,i,r,o,s,a){this.cambio=e,this.nombre=t,this.valor=i,this.tipo=r,this.rol=o,this.dimensiones=s,this.asigIndice=a}buscarVariable(e,t,i,r,o){return this.nombre==e&&this.tipo==i&&this.dimensiones==o&&this.rol==r?this:null}buscarVariableSoloNombre(e){return this.nombre==e?this:null}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));const r=class{constructor(e){this.nombre=e}}},,,,,function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(54);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){switch(this.token){case"MAS":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar(),i=this.comprobarOperacion(e,t,"MAS");return i}case"MENOS":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"MENOS")}case"POR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"POR")}case"DIV":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"DIV")}case"POTENCIA":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"POTENCIA")}case"MODULO":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"MODULO")}case"NEGADO":{let e=this.hijos[0].ejecutar();return this.comprobarOperacion(e,e,"NEGADO")}case"NUMERICO":return Number(this.texto);case"STRING":return String(this.texto);case"BOOLEAN":return"true"==this.texto.toLowerCase();case"NULL":return null;case"UNDEFINED":return;default:return 0}}traducir(){switch(this.token){case"MAS":return this.hijos[0].traducir()+" + "+this.hijos[1].traducir();case"MENOS":return this.hijos[0].traducir()+" - "+this.hijos[1].traducir();case"POR":return this.hijos[0].traducir()+" * "+this.hijos[1].traducir();case"DIV":return this.hijos[0].traducir()+" / "+this.hijos[1].traducir();case"POTENCIA":return this.hijos[0].traducir()+" ** "+this.hijos[1].traducir();case"MODULO":return this.hijos[0].traducir()+" % "+this.hijos[1].traducir();case"NEGADO":return"-"+this.hijos[0].traducir();case"NUMERICO":return this.texto;case"STRING":return'"'+this.texto+'"';case"BOOLEAN":return"true"==this.texto.toLowerCase()?"true":"false";case"NULL":return"null";case"UNDEFINED":return"undefined";default:return""}}comprobarOperacion(e,t,i){switch(i){case"MAS":if("number"==typeof e&&"number"==typeof t)return Number(e+t);if("number"==typeof e&&"string"==typeof t)return String(e+t);if("string"==typeof e&&"number"==typeof t)return String(e+t);if("string"==typeof e&&"string"==typeof t)return String(e+t);if("string"==typeof e&&"boolean"==typeof t)return String(e+t);if("boolean"==typeof e&&"string"==typeof t)return String(e+t);break;case"MENOS":return"number"==typeof e&&"number"==typeof t?Number(e-t):null;case"POR":if("number"==typeof e&&"number"==typeof t)return Number(e*t);break;case"DIV":if("number"==typeof e&&"number"==typeof t)return Number(e/t);break;case"POTENCIA":if("number"==typeof e&&"number"==typeof t)return Number(e**t);break;case"MODULO":if("number"==typeof e&&"number"==typeof t)return Number(e%t);break;case"NEGADO":if("number"==typeof e&&"number"==typeof t)return-1*Number(e);break;default:return 0}return window.errores.push(new o.a("Semantico","No se pude operar ("+this.texto+") con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),0}copyWithChildren(){const e=new s(this.token,this.texto,this.location,[]);return this.hijos.forEach(t=>e.addChild(t.copyWithChildren())),e}addChild(...e){e.forEach(e=>{this.hijos.push(e)})}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));const r=class{constructor(e,t,i){this.nombre=e,this.tipo=t,this.dimensiones=i}esIgual(e,t){return this.nombre==e&&this.tipo==t}}},,function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(57);const o=class{constructor(e){this.listaFunciones=[],this.listaVariables=[],this.listaVariables.push([]),this.nombre=e,this.esAnidada=!1}setAnidada(e){this.esAnidada=e}buscarFuncionDecla(e,t,i,r){for(let o=0;o<this.listaFunciones.length;o++)if(this.listaFunciones[o].igualdadDecla(e,t,i,r))return this.listaFunciones[o];return null}buscarFuncionLlamada(e,t,i){for(let r=0;r<this.listaFunciones.length;r++)if(this.listaFunciones[r].igualdadLlamada(e,t,i))return this.listaFunciones[r];return null}meterFuncion(e,t,i,r,o){this.listaFunciones.push(new class{constructor(e,t,i,r,o){this.nombre=e,this.params=t,this.tipo=i,this.sentencias=r,this.dims=o,this.esAnidada=window.esAnidada}igualdadDecla(e,t,i,r){if(this.nombre!=e)return!1;if(this.tipo!=i)return!1;if(this.dims!=r)return!1;if(this.params.length!=t.length)return!1;for(let e=0;e<this.params.length;e++)if(this.params[e].nombre!=t[e].nombre||this.params[e].tipo!=t[e].tipo||this.params[e].dimensiones!=t[e].dims)return!1}igualdadLlamada(e,t,i){return this.nombre==e&&this.params.length==t.length}igualdadLlamadaSeria(e,t,i){if(this.nombre!=e)return!1;if(this.params.length!=t.length)return!1;for(let e=0;e<this.params.length;e++)if(this.params[e].tipo!=t[e]||this.params[e].dimensiones!=i[e])return!1;return!0}}(e,t,i,r,o))}getVarLength(){let e=0;for(let t=this.listaVariables.length-1;t>=0;t--)e+=this.listaVariables[t].length;return e}buscarVariable(e,t,i,r){let o;for(let s=this.listaVariables.length-1;s>=0;s--)for(let a=this.listaVariables[s].length-1;a>=0;a--)if(o=this.listaVariables[s][a].buscarVariable(e,t,i,r),null!=o)return o;return null}buscarVariableSoloNombre(e){let t;for(let i=this.listaVariables.length-1;i>=0;i--)for(let r=this.listaVariables[i].length-1;r>=0;r--)if(t=this.listaVariables[i][r].buscarVariableSoloNombre(e),null!=t)return t;return null}meterVariable(e,t,i,o,s,a,n){this.listaVariables[this.listaVariables.length-1].push(new r.a(e,t,i,o,s,a,n))}meterAmbitoSuave(){this.listaVariables.push([])}sacarAmbitoSuave(){this.listaVariables.pop()}graficarTabla(){let e="";for(let t=0;t<=this.listaVariables.length-1;t++)for(let i=0;i<=this.listaVariables[t].length-1;i++)e+="|  "+this.anadirEspacios(this.listaVariables[t][i].cambio)+"  |  "+this.anadirEspacios(this.listaVariables[t][i].nombre)+"  |  "+this.anadirEspacios(this.nombre)+"  |  "+this.anadirEspacios(this.listaVariables[t][i].tipo)+"  |  "+this.anadirEspacios(this.listaVariables[t][i].dimensiones+"")+"  |  "+this.anadirEspacios(this.listaVariables[t][i].rol)+"  |\n";return e}anadirEspacios(e){if(e.length>11)return e.substring(0,8)+"...";let t=e.substring(0,11),i=11-t.length;for(let e=0;e<i;e++)t+=" ";return t}graficarTabla2(){let e=[];for(let t=0;t<=this.listaVariables.length-1;t++)for(let i=0;i<=this.listaVariables[t].length-1;i++)e.push({cambio:this.anadirEspacios(this.listaVariables[t][i].cambio),nombre:this.anadirEspacios(this.listaVariables[t][i].nombre),ambito:this.anadirEspacios(this.nombre),tipo:this.anadirEspacios(this.listaVariables[t][i].tipo),dimensiones:this.anadirEspacios(this.listaVariables[t][i].dimensiones+""),rol:this.anadirEspacios(this.listaVariables[t][i].rol)});return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(54);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e,t=this.hijos[0].texto,i="",r="",s="",a=0;this.hijos[1].hijos.forEach(n=>{switch(n.token){case"DECLAARR1":if(i=n.hijos[0].texto,r=n.hijos[1].texto,!this.validarTipo(r))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero ese tipo no existe.",n.location.last_line,n.location.last_column));if(e=n.hijos[3].ejecutar(),a=n.hijos[2].hijos,e.length>0&&!this.comprobarCoincidenciaTipos(r,e))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero se le esta asignando un tipo ("+typeof e+"). No se declaro.",n.location.last_line,n.location.last_column));if(s="array",!window.tablaSimbolos.meterVariable(t,i,e,r,s,a,1))return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">>.",n.location.last_line,n.location.last_column));break;case"DECLAARR2":if(i=n.hijos[0].texto,"const"==t)return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",n.location.last_line,n.location.last_column));if(r=n.hijos[1].texto,e=void 0,s="array",a=n.hijos[2].hijos,!this.validarTipo(r))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero ese tipo no existe.",n.location.last_line,n.location.last_column));if(!window.tablaSimbolos.meterVariable(t,i,e,r,s,a,2))return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">>.",n.location.last_line,n.location.last_column));break;case"DECLAVAR1":if(i=n.hijos[0].texto,r=n.hijos[1].texto,!this.validarTipo(r))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero ese tipo no existe.",n.location.last_line,n.location.last_column));if(e=n.hijos[2].ejecutar(),a=this.getDimensiones(e),!this.comprobarCoincidenciaTipos(r,e))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero se le esta asignando un tipo ("+typeof e+"). No se declaro.",n.location.last_line,n.location.last_column));if(s=this.getRol(e),!window.tablaSimbolos.meterVariable(t,i,e,r,s,a,1))return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">>.",n.location.last_line,n.location.last_column));break;case"DECLAVAR2":if(i=n.hijos[0].texto,e=n.hijos[1].ejecutar(),r=this.getTipo(e),s=this.getRol(e),a=this.getDimensiones(e),!this.validarTipo(r))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero ese tipo no existe.",n.location.last_line,n.location.last_column));if(!window.tablaSimbolos.meterVariable(t,i,e,r,s,a,1))return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">>.",n.location.last_line,n.location.last_column));break;case"DECLAVAR3":if(i=n.hijos[0].texto,"const"==t)return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",n.location.last_line,n.location.last_column));if(r=n.hijos[1].texto,e=void 0,s="undefined",a=0,!this.validarTipo(r))return void window.errores.push(new o.a("Semantico","La variable <<"+i+">> se declara con tipo ("+r+") pero ese tipo no existe.",n.location.last_line,n.location.last_column));if(!window.tablaSimbolos.meterVariable(t,i,e,r,s,a,2))return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">>.",n.location.last_line,n.location.last_column));break;case"DECLAVAR4":if(i=n.hijos[0].texto,"const"==t)return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">> ya que es const y no se definio.",n.location.last_line,n.location.last_column));if(e=void 0,r="undefined",s="undefined",a=0,!window.tablaSimbolos.meterVariable(t,i,e,r,s,a,3))return void window.errores.push(new o.a("Semantico","No pudo declararse variable <<"+i+">>.",n.location.last_line,n.location.last_column))}})}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}comprobarCoincidenciaTipos(e,t){if(null==t||null==t)return!0;if("null"==e||"undefined"==e)return!0;if("number"==e&&"number"==typeof t)return!0;if("string"==e&&"string"==typeof t)return!0;if("boolean"==e&&"boolean"==typeof t)return!0;if("object"==typeof t){if("Array"==t.constructor.name){let i=t;for(;"Array"==i.constructor.name;){let e=Array.from(i.keys());if(0==e.length)return!0;i=i[e[0]]}return this.comprobarCoincidenciaTipos(e,i)}if("Objeto"==t.constructor.name)return t.comprobarElTipo(e)}return!1}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||null==e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}validarTipo(e){if("number"==e)return!0;if("string"==e)return!0;if("boolean"==e)return!0;if("undefined"==e)return!0;if("null"==e)return!0;return!!window.tablaObjetos.buscarObjeto(e)}traducir(){let e=this.hijos[0].texto+" ";for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t];switch(i.token){case"DECLAARR1":e+=i.hijos[0].texto+" : "+i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";e+=" = "+i.hijos[3].traducir();break;case"DECLAARR2":e+=i.hijos[0].texto+" : "+i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]";break;case"DECLAVAR1":e+=i.hijos[0].texto+" : "+i.hijos[1].texto,e+=" = "+i.hijos[2].traducir();break;case"DECLAVAR2":e+=i.hijos[0].texto,e+=" = "+i.hijos[1].traducir();break;case"DECLAVAR3":e+=i.hijos[0].texto+" : "+i.hijos[1].texto;break;case"DECLAVAR4":e+=i.hijos[0].texto}t<this.hijos[1].hijos.length-1&&(e+=", ")}return e}}},,,,,function(e,t){window.indices=0,window.strArbol="",window.textoConsola=[],window.indiceLoops=0,window.strFunciones="",window.coorelativoFunciones=0,window.currentTabs=0,window.esAnidada=!1,window.tablaSimbolos=null,window.errores=[],window.tablaObjetos=null,window.pilaRetornos=[],window.limpiarTodo=function(){window.esAnidada=!1,window.currentTabs=0,window.strFunciones="",window.coorelativoFunciones=0,window.pilaRetornos=[],window.indiceLoops=0,window.tablaSimbolos=null,window.tablaObjetos=null,window.indices=0,window.strArbol="",window.errores=[],window.textoConsola=[],window.dispatchEvent(new CustomEvent("console-changed",{detail:[]})),window.dispatchEvent(new CustomEvent("graficar-errores",{detail:[]}))}},function(e,t,i){"use strict";(function(e,r){i.d(t,"a",(function(){return T}));var o=i(53),s=i(63),a=i(76),n=i(77),l=i(78),c=i(79),h=i(80),u=i(67),d=i(81),p=i(82),b=i(83),m=i(84),f=i(85),g=i(97),w=i(98),y=i(86),v=i(87),j=i(88),_=i(89),x=i(90),k=i(91),A=i(92),E=i(93),S=i(94),C=i(54),T=function(){var e=function(e,t,i,r){for(i=i||{},r=e.length;r--;i[e[r]]=t);return i},t=[1,31],i=[1,32],r=[1,33],T=[1,20],L=[1,34],I=[1,30],N=[1,28],$=[1,29],D=[1,38],O=[1,35],M=[1,36],R=[1,26],F=[1,21],V=[1,22],P=[1,37],U=[5,27,29,30,31,33,45,51,53,54,57,61,62,66,79,81,107],z=[5,27,29,30,31,33,45,48,50,51,53,54,57,61,62,66,79,81,107],G=[1,44],B=[1,46],H=[1,47],q=[1,48],X=[12,37],W=[12,27,37,38,40,44,59,65,71,72,75,82,83,87,88,89,90,91,92,93,94,95,96,97,98],Y=[2,82],J=[1,58],Q=[1,63],K=[1,88],Z=[1,81],ee=[1,87],te=[1,69],ie=[1,75],re=[1,73],oe=[1,74],se=[1,76],ae=[1,77],ne=[1,78],le=[1,79],ce=[1,80],he=[12,27,37,38,40,44,59,82,83,87,88,89,90,91,92,93,94,95,96,97,98],ue=[12,40],de=[1,102],pe=[1,123],be=[1,121],me=[1,122],fe=[12,27,37,38,40,44,59,82,83],ge=[1,131],we=[1,132],ye=[1,133],ve=[1,134],je=[1,135],_e=[1,136],xe=[1,159],ke=[37,40,59],Ae=[5,27,29,30,31,33,45,48,50,51,53,54,56,57,61,62,66,79,81,107],Ee=[27,29,30,31,45,48,50,51,53,54,57,61,62,66,79,81,107],Se=[1,196],Ce=[37,40],Te=[1,201],Le=[12,27,37,38,40,44,58,59,65,71,72,75,82,83,87,88,89,90,91,92,93,94,95,96,97,98],Ie=[12,27,37,38,40,44,59,82,83,87,88,89,90,91,92,93,94],Ne=[12,27,37,38,40,44,59,82,83,87,88,89,90,91,92,93,94,95,97],$e=[1,225],De=[27,40],Oe=[1,238],Me=[12,26,27,37,40,58,65],Re=[48,50],Fe={trace:function(){},yy:{},symbols_:{error:2,INICIO:3,SENTENCIASF:4,EOF:5,SENTENCIAF:6,SENTENCIAS:7,SENTENCIA:8,DECLAFUNCION:9,IMPRIMIR:10,DECLARACION:11,puntoycoma:12,ASIGNACION:13,LISTARECURSIVA:14,DEFOBJETO:15,SENTIF:16,SENTWHILE:17,SENTDO:18,SENTFOR:19,SENTBREAK:20,SENTCONTINUE:21,SENTRETURN:22,SENTSWITCH:23,LLAMADAFUNCION:24,BLOQUESENT:25,llaveabre:26,llavecierra:27,BLOQUESENTF:28,break:29,continue:30,return:31,COND:32,function:33,ID:34,parentesisabre:35,LISTAPARAMS:36,parentesiscierra:37,dospuntos:38,LISTADIMS:39,coma:40,PARAM:41,LISTAEXP:42,TERNARIO:43,pregunta:44,switch:45,BLOQUESWITCH:46,LISTACASE:47,default:48,CASE:49,case:50,for:51,FORINIT:52,while:53,do:54,IF_LIST:55,else:56,if:57,corcheteabre:58,corchetecierra:59,TIPOCAMBIO:60,const:61,let:62,LISTADECLA:63,DECLAELEMENT:64,igual:65,type:66,LISTAATRIBUTOS:67,EXPOBJ:68,LISTAATRIBUTOSDEF:69,INCREMENTOS:70,masmas:71,menosmenos:72,ELEMENTRECURSIVO:73,LISTAACCESODIMS:74,punto:75,length:76,pop:77,push:78,console:79,log:80,graficar_ts:81,and:82,or:83,not:84,REL:85,EXP:86,mayor:87,menor:88,menoroigual:89,mayoroigual:90,igualigual:91,diferente:92,"+":93,"-":94,"*":95,potencia:96,"/":97,"%":98,ENTERO:99,DECIMAL:100,CADENA:101,verdadero:102,falso:103,null:104,undefined:105,EXPARRAY:106,IDENTIFICADOR:107,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",12:"puntoycoma",26:"llaveabre",27:"llavecierra",29:"break",30:"continue",31:"return",33:"function",35:"parentesisabre",37:"parentesiscierra",38:"dospuntos",40:"coma",44:"pregunta",45:"switch",48:"default",50:"case",51:"for",53:"while",54:"do",56:"else",57:"if",58:"corcheteabre",59:"corchetecierra",61:"const",62:"let",65:"igual",66:"type",71:"masmas",72:"menosmenos",75:"punto",76:"length",77:"pop",78:"push",79:"console",80:"log",81:"graficar_ts",82:"and",83:"or",84:"not",87:"mayor",88:"menor",89:"menoroigual",90:"mayoroigual",91:"igualigual",92:"diferente",93:"+",94:"-",95:"*",96:"potencia",97:"/",98:"%",99:"ENTERO",100:"DECIMAL",101:"CADENA",102:"verdadero",103:"falso",104:"null",105:"undefined",107:"IDENTIFICADOR"},productions_:[0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[25,3],[25,2],[28,3],[20,2],[21,2],[22,2],[22,3],[9,9],[9,8],[9,6],[9,8],[9,7],[9,5],[36,3],[36,1],[41,3],[41,4],[24,4],[24,3],[43,5],[23,5],[46,6],[47,2],[47,1],[49,4],[19,9],[52,1],[52,1],[17,5],[18,7],[16,3],[16,1],[55,7],[55,5],[39,3],[39,2],[60,1],[60,1],[11,2],[63,3],[63,1],[64,6],[64,4],[64,5],[64,3],[64,3],[64,1],[15,7],[67,6],[67,5],[67,4],[67,3],[68,3],[69,5],[69,3],[13,3],[13,1],[70,2],[70,2],[14,2],[14,1],[14,2],[73,2],[73,3],[73,2],[73,4],[73,5],[74,4],[74,3],[10,7],[10,4],[32,3],[32,3],[32,2],[32,1],[32,1],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,1],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,1],[86,1],[86,2],[86,1],[86,1],[86,1],[86,1],[86,1],[86,3],[86,1],[86,1],[86,1],[86,1],[86,1],[106,3],[106,2],[42,3],[42,1],[34,1]],performAction:function(e,t,i,r,C,T,L){var I=T.length-1;switch(C){case 1:return T[I-1];case 2:T[I-1].hijos.push(T[I]);break;case 3:this.$=new h.a("SENTENCIAS","SENTENCIAS",L[I],[T[I]]);break;case 4:case 44:T[I-1].hijos.push(T[I]),this.$=T[I-1];break;case 5:this.$=new h.a("SENTENCIAS","SENTENCIAS",L[I],[T[I]]);break;case 6:case 7:case 8:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 48:case 49:case 53:case 78:case 96:case 97:case 104:case 120:case 121:case 122:case 123:case 124:this.$=T[I];break;case 9:case 10:case 11:case 21:case 22:case 24:case 74:case 119:this.$=T[I-1];break;case 23:this.$=new h.a("SENTENCIAS","SENTENCIAS",[0,0],[]);break;case 25:this.$=new k.a("BREAK","BREAK",L[I-1],[]);break;case 26:this.$=new A.a("CONTINUE","CONTINUE",L[I-1],[]);break;case 27:this.$=new E.a("RETURN","RETURN",L[I-1],[]);break;case 28:this.$=new E.a("RETURN","RETURN",L[I-2],[T[I-1]]);break;case 29:this.$=new d.a("DECLAFUNCION","DECLAFUNCION",L[I-7],[T[I-7],T[I-5],T[I-2],T[I-1],T[I]]);break;case 30:this.$=new d.a("DECLAFUNCION","DECLAFUNCION",L[I-6],[T[I-6],T[I-4],T[I-1],new o.a("LISTADIMS","LISTADIMS",L[I-7],0),T[I]]);break;case 31:this.$=new d.a("DECLAFUNCION","DECLAFUNCION",L[I-4],[T[I-4],T[I-2],new o.a("ID","void",L[I-5],[]),new o.a("LISTADIMS","LISTADIMS",L[I-5],0),T[I]]);break;case 32:this.$=new d.a("DECLAFUNCION","DECLAFUNCION",L[I-6],[T[I-6],new o.a("LISTAPARAMS","LISTAPARAMS",L[I-7],[]),T[I-2],T[I-1],T[I]]);break;case 33:this.$=new d.a("DECLAFUNCION","DECLAFUNCION",L[I-5],[T[I-5],new o.a("LISTAPARAMS","LISTAPARAMS",L[I-6],[]),T[I-1],new o.a("LISTADIMS","LISTADIMS",L[I-6],0),T[I]]);break;case 34:this.$=new d.a("DECLAFUNCION","DECLAFUNCION",L[I-3],[T[I-3],new o.a("LISTAPARAMS","LISTAPARAMS",L[I-4],[]),new o.a("ID","void",L[I-4],[]),new o.a("LISTADIMS","LISTADIMS",L[I-4],0),T[I]]);break;case 35:case 61:case 127:T[I-2].hijos.push(T[I]),this.$=T[I-2];break;case 36:this.$=new o.a("LISTAPARAMS","LISTAPARAMS",L[I],[T[I]]);break;case 37:this.$=new o.a("PARAM","PARAM",L[I-1],[T[I-2],T[I],new o.a("LISTADIMS","LISTADIMS",L[I-2],0)]);break;case 38:this.$=new o.a("PARAM","PARAM",L[I-2],[T[I-3],T[I-1],T[I]]);break;case 39:this.$=new f.a("LLAMADAFUNCION","LLAMADAFUNCION",L[I-3],[T[I-3],T[I-1]]);break;case 40:this.$=new f.a("LLAMADAFUNCION","LLAMADAFUNCION",L[I-2],[T[I-2],new o.a("LISTAEXP","LISTAEXP",L[I-2],[])]);break;case 41:this.$=new S.a("TERNARIO","TERNARIO",L[I-4],[T[I-4],T[I-2],T[I]]);break;case 42:this.$=new _.a("SWITCH","SWITCH",L[I-2],[T[I-2],T[I]]);break;case 43:this.$=new _.a("SWITCH","BLOQUESWITCH",L[I-5],[T[I-4],T[I-1]]);break;case 45:let t=new _.a("LISTACASE","LISTACASE",L[I],[T[I]]);this.$=t;break;case 46:this.$=new _.a("CASE","CASE",L[I-3],[T[I-2],T[I]]);break;case 47:this.$=new x.a("FOR","FOR",L[I-8],[T[I-6],T[I-4],T[I-2],T[I]]);break;case 50:this.$=new v.a("WHILE","WHILE",L[I-4],[T[I-2],T[I]]);break;case 51:this.$=new j.a("DO","DO",L[I-6],[T[I-2],T[I-5]]);break;case 52:let i=new y.a("else","ELSE",L[I-1],[T[I]]);T[I-2].hijos.push(i),this.$=T[I-2];break;case 54:let r=new y.a("IFELSE","IFELSE",L[I-6],[T[I-2],T[I]]);T[I-6].hijos.push(r),this.$=T[I-6];break;case 55:let C=new y.a("IF","IF",L[I-4],[T[I-2],T[I]]);this.$=new y.a("IFMAESTRO","IFMAESTRO",L[I-4],[C]);break;case 56:T[I-2].hijos=T[I-2].hijos+1,this.$=T[I-2];break;case 57:this.$=new o.a("LISTADIMS","LISTADIMS",L[I-1],1);break;case 58:this.$=new o.a("const","const",L[I],[]);break;case 59:this.$=new o.a("let","let",L[I],[]);break;case 60:this.$=new u.a("DECLA","DECLA",L[I-1],[T[I-1],T[I]]);break;case 62:this.$=new u.a("LISTADECLA","LISTADECLA",L[I],[T[I]]);break;case 63:this.$=new u.a("DECLAARR1","DECLAELEMENT",L[I-5],[T[I-5],T[I-3],T[I-2],T[I]]);break;case 64:this.$=new u.a("DECLAARR2","DECLAELEMENT",L[I-3],[T[I-3],T[I-1],T[I]]);break;case 65:this.$=new u.a("DECLAVAR1","DECLAELEMENT",L[I-4],[T[I-4],T[I-2],T[I]]);break;case 66:this.$=new u.a("DECLAVAR2","DECLAELEMENT",L[I-2],[T[I-2],T[I]]);break;case 67:this.$=new u.a("DECLAVAR3","DECLAELEMENT",L[I-2],[T[I-2],T[I]]);break;case 68:this.$=new u.a("DECLAVAR4","DECLAELEMENT",L[I],[T[I]]);break;case 69:this.$=new g.a("DEFOBJ","DEFOBJ",L[I-5],[T[I-5],T[I-2]]);break;case 70:T[I-5].hijos.push(new o.a("ATTR","ATTR",L[I-5],[T[I-3],T[I-1],T[I]])),this.$=T[I-5];break;case 71:T[I-4].hijos.push(new o.a("ATTR","ATTR",L[I-4],[T[I-2],T[I]])),this.$=T[I-4];break;case 72:this.$=new o.a("LATTR","LATTR",L[I-3],[new o.a("ATTR","ATTR",L[I-3],[T[I-3],T[I-1],T[I]])]);break;case 73:this.$=new o.a("LATTR","LATTR",L[I-2],[new o.a("ATTR","ATTR",L[I-2],[T[I-2],T[I]])]);break;case 75:T[I-4].hijos.push(new o.a("ATTRDEF","ATTRDEF",L[I-4],[T[I-2],T[I]])),this.$=T[I-4];break;case 76:this.$=new w.a("EXPOBJ","EXPOBJ",L[I-2],[new o.a("ATTR","ATTR",L[I-2],[T[I-2],T[I]])]);break;case 77:this.$=new b.a("ASIGNACION","ASIGNACION",L[I-2],[T[I-2],T[I]]);break;case 79:this.$=new b.a("ASIGNACION","ASIGNACION",L[I-1],[T[I-1],new s.a("MAS","+",L[I-1],[T[I-1],new s.a("NUMERICO","1",L[I-1],[])])]);break;case 80:this.$=new b.a("ASIGNACION","ASIGNACION",L[I-1],[T[I-1],new s.a("MENOS","-",L[I-1],[T[I-1],new s.a("NUMERICO","1",L[I-1],[])])]);break;case 81:T[I-1].hijos=T[I-1].hijos.concat(T[I]),this.$=T[I-1];break;case 82:this.$=new p.a("LLAMADARECURSIVA","LLAMADARECURSIVA",L[I],[T[I]]);break;case 83:this.$=new p.a("LLAMADARECURSIVA","LLAMADARECURSIVA",L[I-1],[T[I-1],T[I]]);break;case 84:this.$=[T[I]];break;case 85:this.$=[T[I-1],T[I]];break;case 86:this.$=[new o.a("LENGTH","LENGTH",L[I-1],[])];break;case 87:this.$=[new o.a("POP","POP",L[I-3],[])];break;case 88:this.$=[new o.a("PUSH","PUSH",L[I-4],[T[I-1]])];break;case 89:T[I-3].hijos.push(T[I-1]),this.$=T[I-3];break;case 90:this.$=new o.a("LISTAACCESODIMS","LISTAACCESODIMS",L[I-1],[T[I-1]]);break;case 91:this.$=new l.a("imprimir","PRINT",L[I-6],[T[I-2]]);break;case 92:this.$=new c.a("imprimir","PRINT",L[I-3],[]);break;case 93:this.$=new n.a("AND","&&",L[I-2],[T[I-2],T[I]]);break;case 94:this.$=new n.a("OR","||",L[I-2],[T[I-2],T[I]]);break;case 95:this.$=new n.a("NOT","!",L[I-1],[T[I]]);break;case 98:this.$=new a.a("MAYOR",">",L[I-2],[T[I-2],T[I]]);break;case 99:this.$=new a.a("MENOR","<",L[I-2],[T[I-2],T[I]]);break;case 100:this.$=new a.a("MENOROIGUAL","<=",L[I-2],[T[I-2],T[I]]);break;case 101:this.$=new a.a("MAYOROIGUAL",">=",L[I-2],[T[I-2],T[I]]);break;case 102:this.$=new a.a("IGUALIGUAL","==",L[I-2],[T[I-2],T[I]]);break;case 103:this.$=new a.a("DIFERENTE","!=",L[I-2],[T[I-2],T[I]]);break;case 105:this.$=new s.a("MAS","+",L[I-2],[T[I-2],T[I]]);break;case 106:this.$=new s.a("MENOS","-",L[I-2],[T[I-2],T[I]]);break;case 107:this.$=new s.a("POR","*",L[I-2],[T[I-2],T[I]]);break;case 108:this.$=new s.a("POTENCIA","**",L[I-2],[T[I-2],T[I]]);break;case 109:this.$=new s.a("DIV","/",L[I-2],[T[I-2],T[I]]);break;case 110:this.$=new s.a("MODULO","%",L[I-2],[T[I-2],T[I]]);break;case 111:case 112:this.$=new s.a("NUMERICO",e,L[I],[]);break;case 113:this.$=new s.a("NEGADO","-",L[I-1],[T[I]]);break;case 114:this.$=new s.a("STRING",e.split('\\"').join('"').split("\\t").join("\t").split("\\n").join("\n").split("\\\\").join("\\").split("\\r").join("\r"),L[I],[]);break;case 115:this.$=new s.a("BOOLEAN","true",L[I],[]);break;case 116:this.$=new s.a("BOOLEAN","false",L[I],[]);break;case 117:this.$=new s.a("NULL","null",L[I],[]);break;case 118:this.$=new s.a("UNDEFINED","undefined",L[I],[]);break;case 125:this.$=new m.a("EXPARRAY","EXPARRAY",L[I-1],[T[I-1]]);break;case 126:this.$=new m.a("EXPARRAY","EXPARRAY",L[I],[]);break;case 128:this.$=new o.a("LISTAEXP","LISTAEXP",L[I],[T[I]]);break;case 129:this.$=new o.a("ID",e,L[I],[])}},table:[{3:1,4:2,6:3,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:r,33:T,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},{1:[3]},{5:[1,39],6:40,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:r,33:T,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},e(U,[2,3]),e(U,[2,6]),e(U,[2,7]),e(z,[2,8]),{12:[1,41]},{12:[1,42]},{12:[1,43],65:G,71:B,72:H,73:45,75:q},e(z,[2,12]),e(z,[2,13]),e(z,[2,14]),e(z,[2,15]),e(z,[2,16]),e(z,[2,17]),e(z,[2,18]),e(z,[2,19]),e(z,[2,20]),{12:[1,49]},{34:50,107:P},{75:[1,51]},{35:[1,52]},{34:55,63:53,64:54,107:P},e(X,[2,78]),e(W,Y,{74:56,35:[1,57],58:J}),{34:59,107:P},e(z,[2,53],{56:[1,60]}),{35:[1,61]},{25:62,26:Q},{35:[1,64]},{12:[1,65]},{12:[1,66]},{12:[1,67],14:82,24:86,26:K,32:68,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{35:[1,89]},{107:[2,58]},{107:[2,59]},e([12,26,27,35,37,38,40,44,58,59,65,71,72,75,82,83,87,88,89,90,91,92,93,94,95,96,97,98],[2,129]),{35:[1,90]},{1:[2,1]},e(U,[2,2]),e(z,[2,9]),e(z,[2,10]),e(z,[2,11]),{14:82,24:86,26:K,32:91,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(W,[2,81]),e(he,[2,79]),e(he,[2,80]),{34:92,76:[1,93],77:[1,94],78:[1,95],107:P},e(z,[2,21]),{35:[1,96]},{80:[1,97]},{37:[1,98]},{12:[2,60],40:[1,99]},e(ue,[2,62]),e(ue,[2,68],{38:[1,100],65:[1,101]}),e(W,[2,83],{58:de}),{14:82,24:86,26:K,32:105,34:25,35:Z,37:[1,104],42:103,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,32:106,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{65:[1,107]},{25:108,26:Q,57:[1,109]},{14:82,24:86,26:K,32:110,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{53:[1,111]},{7:112,8:114,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,113],29:t,30:i,31:r,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},{11:116,13:117,14:118,34:119,52:115,60:23,61:O,62:M,70:24,107:P},e(z,[2,25]),e(z,[2,26]),e(z,[2,27]),{12:[1,120],44:pe,82:be,83:me},{14:82,24:86,26:K,32:124,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(fe,[2,96]),e(fe,[2,97]),e(fe,[2,104],{87:[1,125],88:[1,126],89:[1,127],90:[1,128],91:[1,129],92:[1,130],93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(he,[2,111]),e(he,[2,112]),{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:137,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(he,[2,114]),e(he,[2,115]),e(he,[2,116]),e(he,[2,117]),e(he,[2,118]),{14:82,24:86,26:K,32:138,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(he,[2,120],{73:45,71:B,72:H,75:q}),e(he,[2,121]),e(he,[2,122]),e(he,[2,123]),e(he,[2,124]),{14:82,24:86,26:K,32:105,34:25,35:Z,42:139,43:71,58:ee,59:[1,140],68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{34:142,69:141,107:P},{14:82,24:86,26:K,32:143,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,32:144,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(X,[2,77],{44:pe,82:be,83:me}),e(W,[2,84],{74:145,58:J}),e(W,[2,86]),{35:[1,146]},{35:[1,147]},{34:151,36:148,37:[1,149],41:150,107:P},{35:[1,152]},{12:[1,153]},{34:55,64:154,107:P},{34:155,107:P},{14:82,24:86,26:K,32:156,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,32:157,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{37:[1,158],40:xe},e(he,[2,40]),e(ke,[2,128],{44:pe,82:be,83:me}),{44:pe,59:[1,160],82:be,83:me},{26:[1,161]},e(z,[2,52]),{35:[1,162]},{37:[1,163],44:pe,82:be,83:me},{35:[1,164]},{8:166,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,165],29:t,30:i,31:r,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},e(Ae,[2,23]),e(Ee,[2,5]),{12:[1,167]},{12:[2,48]},{12:[2,49]},{65:G,71:B,72:H,73:45,75:q},e([65,71,72,75],Y,{74:56,58:J}),e(z,[2,28]),{14:82,24:86,26:K,32:168,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,32:169,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,32:170,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(fe,[2,95]),{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:171,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:172,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:173,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:174,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:175,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:176,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:177,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:178,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:179,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:180,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:181,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{14:82,24:86,26:K,34:25,35:Z,58:ee,68:84,70:85,86:182,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(he,[2,113]),{37:[1,183],44:pe,82:be,83:me},{40:xe,59:[1,184]},e(he,[2,126]),{27:[1,185],40:[1,186]},{38:[1,187]},{37:[1,188],44:pe,82:be,83:me},{37:[1,189],44:pe,82:be,83:me},e(W,[2,85],{58:de}),{37:[1,190]},{14:82,24:86,26:K,32:191,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{37:[1,192],40:[1,193]},{26:Se,28:195,38:[1,194]},e(Ce,[2,36]),{38:[1,197]},{14:82,24:86,26:K,32:105,34:25,35:Z,42:198,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(z,[2,92]),e(ue,[2,61]),e(ue,[2,67],{39:199,58:Te,65:[1,200]}),e(ue,[2,66],{44:pe,82:be,83:me}),{44:pe,59:[1,202],82:be,83:me},e(he,[2,39]),{14:82,24:86,26:K,32:203,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(Le,[2,90]),{34:205,67:204,107:P},{14:82,24:86,26:K,32:206,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{25:207,26:Q},{14:82,24:86,26:K,32:208,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(Ae,[2,22]),e(Ee,[2,4]),{14:82,24:86,26:K,32:209,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},e(fe,[2,93]),e([12,27,37,38,40,44,59,83],[2,94],{82:be}),{38:[1,210],44:pe,82:be,83:me},e(fe,[2,98],{93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(fe,[2,99],{93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(fe,[2,100],{93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(fe,[2,101],{93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(fe,[2,102],{93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(fe,[2,103],{93:ge,94:we,95:ye,96:ve,97:je,98:_e}),e(Ie,[2,105],{95:ye,96:ve,97:je,98:_e}),e(Ie,[2,106],{95:ye,96:ve,97:je,98:_e}),e(Ne,[2,107],{96:ve,98:_e}),e(he,[2,108]),e(Ne,[2,109],{96:ve,98:_e}),e(he,[2,110]),e(he,[2,119]),e(he,[2,125]),e(he,[2,74]),{34:211,107:P},{14:82,24:86,26:K,32:212,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{26:[1,214],46:213},{25:215,26:Q},e(W,[2,87]),{37:[1,216],44:pe,82:be,83:me},{26:Se,28:218,38:[1,217]},{34:151,41:219,107:P},{34:220,107:P},e(U,[2,34]),{4:221,6:3,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:r,33:T,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},{34:222,107:P},{37:[1,223],40:xe},e(ue,[2,64],{58:$e,65:[1,224]}),{14:82,24:86,26:K,32:226,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{59:[1,227]},e(Le,[2,89]),e(ke,[2,127],{44:pe,82:be,83:me}),{27:[1,228],40:[1,229]},{38:[1,230]},{37:[1,231],44:pe,82:be,83:me},e(z,[2,50]),{37:[1,232],44:pe,82:be,83:me},{12:[1,233],44:pe,82:be,83:me},{14:82,24:86,26:K,32:234,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{38:[1,235]},e(De,[2,76],{44:pe,82:be,83:me}),e(z,[2,42]),{47:236,49:237,50:Oe},e(Ae,[2,55]),e(W,[2,88]),{34:239,107:P},e(U,[2,31]),e(Ce,[2,35]),{26:Se,28:241,39:240,58:Te},{6:40,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,242],29:t,30:i,31:r,33:T,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},e(Ce,[2,37],{39:243,58:Te}),{12:[1,244]},{14:82,24:86,26:K,32:245,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{59:[1,246]},e(ue,[2,65],{44:pe,82:be,83:me}),e(Me,[2,57]),{12:[1,247]},{34:248,107:P},{34:249,107:P},{25:250,26:Q},{12:[1,251]},{13:252,14:118,34:119,70:24,107:P},e([12,27,37,38,40,59],[2,41],{44:pe,82:be,83:me}),{14:82,24:86,26:K,32:253,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{48:[1,254],49:255,50:Oe},e(Re,[2,45]),{14:82,24:86,26:K,32:256,34:25,35:Z,43:71,58:ee,68:84,70:85,84:te,85:70,86:72,94:ie,99:re,100:oe,101:se,102:ae,103:ne,104:le,105:ce,106:83,107:P},{26:Se,28:258,39:257,58:Te},{26:Se,28:259,58:$e},e(U,[2,33]),e(U,[2,24]),e(Ce,[2,38],{58:$e}),e(z,[2,91]),e(ue,[2,63],{44:pe,82:be,83:me}),e(Me,[2,56]),e(z,[2,69]),{38:[1,260]},e(De,[2,73],{39:261,58:Te}),e(Ae,[2,54]),e(z,[2,51]),{37:[1,262]},e(De,[2,75],{44:pe,82:be,83:me}),{38:[1,263]},e(Re,[2,44]),{38:[1,264],44:pe,82:be,83:me},{26:Se,28:265,58:$e},e(U,[2,30]),e(U,[2,32]),{34:266,107:P},e(De,[2,72],{58:$e}),{25:267,26:Q},{7:268,8:114,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:r,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},{7:269,8:114,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:t,30:i,31:r,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},e(U,[2,29]),e(De,[2,71],{39:270,58:Te}),e(z,[2,47]),{8:166,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,271],29:t,30:i,31:r,34:25,45:L,51:I,53:N,54:$,55:27,57:D,60:23,61:O,62:M,66:R,70:24,79:F,81:V,107:P},e(Re,[2,46],{10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,60:23,70:24,34:25,55:27,8:166,29:t,30:i,31:r,45:L,51:I,53:N,54:$,57:D,61:O,62:M,66:R,79:F,81:V,107:P}),e(De,[2,70],{58:$e}),e(z,[2,43])],defaultActions:{35:[2,58],36:[2,59],39:[2,1],116:[2,48],117:[2,49]},parseError:function(e,t){if(!t.recoverable){var i=new Error(e);throw i.hash=t,"INVALID"==t.token?window.errores.push(new C.a("Lexico","Lexema: "+t.text+", no reconocido.",t.loc.last_line,t.loc.last_column)):window.errores.push(new C.a("Sintactico","Error en: "+t.text+", se esperaba "+t.expected+".",t.loc.last_line,t.loc.last_column)),i}this.trace(e)},parse:function(e){var t=this,i=[0],r=[null],o=[],s=this.table,a="",n=0,l=0,c=0,h=2,u=1,d=o.slice.call(arguments,1),p=Object.create(this.lexer),b={yy:{}};for(var m in this.yy)Object.prototype.hasOwnProperty.call(this.yy,m)&&(b.yy[m]=this.yy[m]);p.setInput(e,b.yy),b.yy.lexer=p,b.yy.parser=this,void 0===p.yylloc&&(p.yylloc={});var f=p.yylloc;o.push(f);var g=p.options&&p.options.ranges;"function"==typeof b.yy.parseError?this.parseError=b.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var w,y,v,j,_,x,k,A,E,S=function(){var e;return"number"!=typeof(e=p.lex()||u)&&(e=t.symbols_[e]||e),e},C={};;){if(v=i[i.length-1],this.defaultActions[v]?j=this.defaultActions[v]:(null==w&&(w=S()),j=s[v]&&s[v][w]),void 0===j||!j.length||!j[0]){var T="";for(x in E=[],s[v])this.terminals_[x]&&x>h&&E.push("'"+this.terminals_[x]+"'");T=p.showPosition?"Parse error on line "+(n+1)+":\n"+p.showPosition()+"\nExpecting "+E.join(", ")+", got '"+(this.terminals_[w]||w)+"'":"Parse error on line "+(n+1)+": Unexpected "+(w==u?"end of input":"'"+(this.terminals_[w]||w)+"'"),this.parseError(T,{text:p.match,token:this.terminals_[w]||w,line:p.yylineno,loc:f,expected:E})}if(j[0]instanceof Array&&j.length>1)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+w);switch(j[0]){case 1:i.push(w),r.push(p.yytext),o.push(p.yylloc),i.push(j[1]),w=null,y?(w=y,y=null):(l=p.yyleng,a=p.yytext,n=p.yylineno,f=p.yylloc,c>0&&c--);break;case 2:if(k=this.productions_[j[1]][1],C.$=r[r.length-k],C._$={first_line:o[o.length-(k||1)].first_line,last_line:o[o.length-1].last_line,first_column:o[o.length-(k||1)].first_column,last_column:o[o.length-1].last_column},g&&(C._$.range=[o[o.length-(k||1)].range[0],o[o.length-1].range[1]]),void 0!==(_=this.performAction.apply(C,[a,l,n,b.yy,j[1],r,o].concat(d))))return _;k&&(i=i.slice(0,-1*k*2),r=r.slice(0,-1*k),o=o.slice(0,-1*k)),i.push(this.productions_[j[1]][0]),r.push(C.$),o.push(C._$),A=s[i[i.length-2]][i[i.length-1]],i.push(A);break;case 3:return!0}}return!0},treeparser:{raiz:null},error:{error:[]}},Ve={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,i=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),i.length-1&&(this.yylineno-=i.length-1);var o=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:i?(i.length===r.length?this.yylloc.first_column:0)+r[r.length-i.length].length-i[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[o[0],o[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var i,r,o;if(this.options.backtrack_lexer&&(o={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(o.yylloc.range=this.yylloc.range.slice(0))),(r=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=r.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:r?r[r.length-1].length-r[r.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],i=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),i)return i;if(this._backtrack){for(var s in o)this[s]=o[s];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,i,r;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var o=this._currentRules(),s=0;s<o.length;s++)if((i=this._input.match(this.rules[o[s]]))&&(!t||i[0].length>t[0].length)){if(t=i,r=s,this.options.backtrack_lexer){if(!1!==(e=this.test_match(i,o[s])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,o[r]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return e||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{ranges:!0},performAction:function(e,t,i,r){switch(i){case 0:case 1:break;case 2:this.begin("comment");break;case 3:this.popState();break;case 4:case 5:break;case 6:return 100;case 7:return 99;case 8:return 98;case 9:return 71;case 10:return 96;case 11:return 72;case 12:return 91;case 13:return 92;case 14:return 90;case 15:return 89;case 16:return 87;case 17:return 88;case 18:return 44;case 19:return 38;case 20:return 82;case 21:return 83;case 22:return 65;case 23:return 84;case 24:return 94;case 25:return 93;case 26:return 98;case 27:return 95;case 28:return 97;case 29:return 35;case 30:return 37;case 31:return 26;case 32:return 27;case 33:return 58;case 34:return 59;case 35:return 12;case 36:return 40;case 37:return 75;case 38:return 66;case 39:return 57;case 40:return 56;case 41:return 79;case 42:return 80;case 43:return 53;case 44:return 54;case 45:return 31;case 46:return 30;case 47:return 29;case 48:return 48;case 49:return 50;case 50:return 45;case 51:return 102;case 52:return 103;case 53:return"double";case 54:return 62;case 55:return 61;case 56:return 81;case 57:return 51;case 58:return 76;case 59:return 104;case 60:return 105;case 61:return 78;case 62:return 77;case 63:return 33;case 64:case 65:return t.yytext=t.yytext.substr(1,t.yyleng-2),101;case 66:return 107;case 67:return 5;case 68:return"INVALID"}},rules:[/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:(0|[0-9]+))/,/^(?:%)/,/^(?:\+\+)/,/^(?:\*\*)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\?)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:!)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:type\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:double\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:length\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:"((\\")|[^"])*")/,/^(?:'((\\')|[^'])*')/,/^(?:(ñ|Ñ|_|[a-zA-Z])(ñ|Ñ|[a-zA-Z]|[0-9]|_)*)/,/^(?:$)/,/^(?:.)/],conditions:{comment:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],inclusive:!0},INITIAL:{rules:[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],inclusive:!0}}};function Pe(){this.yy={}}return Fe.lexer=Ve,Pe.prototype=Fe,Fe.Parser=Pe,new Pe}();"undefined"!=typeof exports&&(exports.parser=T,exports.Parser=T.Parser,exports.parse=function(){return T.parse.apply(T,arguments)},exports.main=function(t){t[1]||(console.log("Usage: "+t[0]+" FILE"),e.exit(1))},i.c[i.s]===r&&exports.main(e.argv.slice(1)))}).call(this,i(74),i(75)(e))},,,function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(54);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){switch(this.token){case"MAYOR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e>t}case"MENOR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e<t}case"MAYOROIGUAL":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e>=t}case"MENOROIGUAL":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e<=t}case"IGUALIGUAL":return this.hijos[0].ejecutar()==this.hijos[1].ejecutar();case"DIFERENTE":return this.hijos[0].ejecutar()!=this.hijos[1].ejecutar();default:return!1}}traducir(){switch(this.token){case"MAYOR":return this.hijos[0].traducir()+" > "+this.hijos[1].traducir();case"MENOR":return this.hijos[0].traducir()+" < "+this.hijos[1].traducir();case"MAYOROIGUAL":return this.hijos[0].traducir()+" >= "+this.hijos[1].traducir();case"MENOROIGUAL":return this.hijos[0].traducir()+" <= "+this.hijos[1].traducir();case"IGUALIGUAL":return this.hijos[0].traducir()+" == "+this.hijos[1].traducir();case"DIFERENTE":return this.hijos[0].traducir()+" != "+this.hijos[1].traducir();default:return""}}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(54);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){switch(this.token){case"AND":{let e=this.hijos[0].ejecutar();if("boolean"!=typeof e)return window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+".",this.location.last_line,this.location.last_column)),!1;if(0==e)return!1;let t=this.hijos[1].ejecutar();return"boolean"!=typeof t?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof t+".",this.location.last_line,this.location.last_column)),!1):t}case"OR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"boolean"!=typeof e||"boolean"!=typeof t?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e||t}case"NOT":{let e=this.hijos[0].ejecutar();return"boolean"!=typeof e?(window.errores.push(new o.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+".",this.location.last_line,this.location.last_column)),!1):!e}default:return!1}}traducir(){switch(this.token){case"AND":return this.hijos[0].traducir()+" && "+this.hijos[1].traducir();case"OR":return this.hijos[0].traducir()+" || "+this.hijos[1].traducir();case"NOT":return"!"+this.hijos[0].traducir();default:return""}}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e,t="";for(let i=0;i<this.hijos[0].hijos.length;i++)e=this.hijos[0].hijos[i].ejecutar(),"number"==typeof e&&(t+=String(e)),"string"==typeof e&&(t+=e),"boolean"==typeof e&&(t+=String(e)),"Array"==e.constructor.name&&(t+="["+e.toString()+"]");window.textoConsola=window.textoConsola.concat(t.split("\n")),window.dispatchEvent(new CustomEvent("console-changed",{detail:window.textoConsola}))}traducir(){let e="console.log(";for(let t=0;t<this.hijos[0].hijos.length;t++)e+=this.hijos[0].hijos[t].traducir(),t<this.hijos[0].hijos.length-1&&(e+=", ");return e+=");",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e=window.tablaSimbolos.graficarTabla().split("\n");window.textoConsola=window.textoConsola.concat(e),window.dispatchEvent(new CustomEvent("console-changed",{detail:window.textoConsola}))}traducir(){return"graficar_ts();"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);i(54);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){for(let e=0;e<this.hijos.length;e++){let t=this.hijos[e].ejecutar();if("object"==typeof t&&null!=t&&"EscapeEstructura"==t.constructor.name)return t}}ejecutar2(){for(let e=0;e<this.hijos.length;e++)this.hijos[e].ejecutar2()}ejecutar3(){for(let e=0;e<this.hijos.length;e++)this.hijos[e].ejecutar3()}traducir(){let e="";for(let t=0;t<this.hijos.length;t++){for(let t=0;t<window.currentTabs;t++)e+="\t";e+=this.hijos[t].traducir(),"DECLA"==this.hijos[t].token||"ASIGNACION"==this.hijos[t].token||"LLAMADARECURSIVA"==this.hijos[t].token||"LLAMADAFUNCION"==this.hijos[t].token?e+=";\n":e+="\n"}return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var r=i(53),o=i(54),s=i(64);const a=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){}ejecutar2(){let e=this.hijos[0].texto,t=this.hijos[2].texto,i=this.hijos[3].hijos,r=this.hijos[4];if(!this.validarTipo(t))return void window.errores.push(new o.a("Semantico","No pudo declararse funcion<<"+e+">>. El tipo ("+t+") no existe.",this.location.last_line,this.location.last_column));let a=[];for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t].hijos[1].texto,r=this.hijos[1].hijos[t].hijos[0].texto,n=this.hijos[1].hijos[t].hijos[2].hijos;if(!this.validarTipo(i))return void window.errores.push(new o.a("Semantico","No pudo declararse funcion<<"+e+">>. El tipo ("+i+") no existe.",this.location.last_line,this.location.last_column));a.push(new s.a(r,i,n))}window.tablaSimbolos.meterFuncion(e,a,t,r,i)||window.errores.push(new o.a("Semantico","Funcion <<"+e+">> no se pude insertar ya que existe una con la misma firma.",this.location.last_line,this.location.last_column))}validarTipo(e){if("number"==e)return!0;if("string"==e)return!0;if("boolean"==e)return!0;if("undefined"==e)return!0;if("null"==e)return!0;if("void"==e)return!0;return!!window.tablaObjetos.buscarObjeto(e)}traducir(){let e="function "+this.hijos[0].texto+"_"+window.coorelativoFunciones+++" (";for(let t=0;t<this.hijos[1].hijos.length;t++){e+=this.hijos[1].hijos[t].hijos[0].texto+" : "+this.hijos[1].hijos[t].hijos[1].texto;for(let i=0;i<this.hijos[1].hijos[t].hijos[2].hijos;i++)e+="[]";t<this.hijos[1].hijos.length-1&&(e+=", ")}e+=") : "+this.hijos[2].texto;for(let t=0;t<this.hijos[3].hijos;t++)e+="[]";return e+="{\n"+this.hijos[4].traducir()+"}\n",window.strFunciones+=e,""}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var r=i(53),o=i(54),s=i(57);const a=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e;for(let t=0;t<=this.hijos.length-1;t++)switch(this.hijos[t].token){case"ID":if(0==t){if(e=window.tablaSimbolos.buscarVariableSoloNombre(this.hijos[t].texto),!e)return window.errores.push(new o.a("Semantico","Variable <<"+this.hijos[t].texto+">> no econtrada. Se retorno 0 para recuperar.",this.location.last_line,this.location.last_column)),0;if(e.asigIndice>1)return window.errores.push(new o.a("Semantico","Variable <<"+this.hijos[t].texto+">> no se puede acceder ya que no se definio.",this.location.last_line,this.location.last_column)),0;e=e}else{if("tipo"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a atributo en <<"+e.nombre+">> pero no es un tipo.",this.location.last_line,this.location.last_column)),0;if(null==e||null==e)return window.errores.push(new o.a("Semantico","Tipo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let i=e.valor.buscarAtributo(this.hijos[t].texto);if(!i)return window.errores.push(new o.a("Semantico","Atributo <<"+this.hijos[t].texto+">> no existe.",this.location.last_line,this.location.last_column)),0;e=i}break;case"LENGTH":if("array"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new o.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;e=new s.a("let",e.nombre,e.valor.length,"number","variable",0,1);break;case"POP":if("array"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new o.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;e=new s.a("let",e.nombre,e.valor.pop(),"number","variable",0,1);break;case"PUSH":if("array"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new o.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let i=this.hijos[t].hijos[0].ejecutar();if(this.getTipo(e.valor)!=this.getTipo(i))return window.errores.push(new o.a("Semantico","No se puede hacer push a <<"+e.nombre+">> tipos ("+e.tipo+", "+this.getTipo(i)+") no compatibles.",this.location.last_line,this.location.last_column)),0;e.valor.push(i),e=new s.a("let","auxtmp",0,"number","variable",0,1);break;case"LISTAACCESODIMS":if("array"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(null==e.valor||null==e.valor)return window.errores.push(new o.a("Semantico","Imposible acceder a arreglo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;if(e.dimensiones<this.hijos[t].hijos.length)return window.errores.push(new o.a("Semantico","El arreglo <<"+e.nombre+">> es de "+e.dimensiones+" dimensiones y se quiere acceder a "+this.hijos[t].hijos.length+".",this.location.last_line,this.location.last_column)),0;let r,a,n=[];for(let e=0;e<this.hijos[t].hijos.length;e++){if(r=this.hijos[t].hijos[e].ejecutar(),!Number.isInteger(r))return window.errores.push(new o.a("Semantico","Solo se puede acceder a posicion por medio de ENTEROS.",this.location.last_line,this.location.last_column)),0;n.push(r)}let l="";for(let t=0;t<n.length;t++){if(a=e.valor[n[t]],l+="["+n[t]+"]",null==a||null==a||t<n.length-1&&"Array"!=a.constructor.name)return window.errores.push(new o.a("Semantico","En arreglo <<"+e.nombre+">> se intenta acceder a una dimension que no esta definida ("+l+").",this.location.last_line,this.location.last_column)),0;e=new s.a("let",e.nombre,a,e._tipo,this.getRol(a),e.dimensiones)}}return e.valor}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||"null"==typeof e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if("null"==typeof e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}traducir(){let e="";for(let t=0;t<this.hijos.length;t++)switch(this.hijos[t].token){case"ID":e+=0==t?this.hijos[t].texto:"."+this.hijos[t].texto;break;case"LISTAACCESODIMS":for(let i=0;i<this.hijos[t].hijos.length;i++)e+="["+this.hijos[t].hijos[i].traducir()+"]";break;case"LENGTH":e+=".length";break;case"POP":e+=".pop()";break;case"PUSH":e+=".push("+this.hijos[t].hijos[0].traducir()+")"}return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var r=i(53),o=i(54),s=i(57);const a=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e,t=this.hijos[1].ejecutar();for(let t=0;t<this.hijos[0].hijos.length-1;t++)switch(this.hijos[0].hijos[t].token){case"ID":if(0==t){if(e=window.tablaSimbolos.buscarVariableSoloNombre(this.hijos[0].hijos[t].texto),!e)return window.errores.push(new o.a("Semantico","Variable <<"+this.hijos[0].hijos[t].texto+">> no econtrada. Se retorno 0 para recuperar.",this.location.last_line,this.location.last_column)),0;if(e.asigIndice>1)return window.errores.push(new o.a("Semantico","Variable <<"+this.hijos[0].hijos[t].texto+">> no se puede acceder ya que no se definio.",this.location.last_line,this.location.last_column)),0;e=e}else{if("tipo"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a atributo en <<"+e.nombre+">> pero no es un tipo.",this.location.last_line,this.location.last_column)),0;if(null==e||null==e)return window.errores.push(new o.a("Semantico","Tipo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let i=e.valor.buscarAtributo(this.hijos[0].hijos[t].texto);if(!i)return window.errores.push(new o.a("Semantico","Atributo <<"+this.hijos[0].hijos[t].texto+">> no existe.",this.location.last_line,this.location.last_column)),0;e=i}break;case"LISTAACCESODIMS":if("array"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(e.dimensiones<this.hijos[0].hijos[t].hijos.length)return window.errores.push(new o.a("Semantico","El arreglo <<"+e.nombre+">> es de "+e.dimensiones+" dimensiones y se quiere acceder a "+this.hijos[0].hijos[t].hijos.length+".",this.location.last_line,this.location.last_column)),0;let i,r,a=[];for(let e=0;e<this.hijos[0].hijos[t].hijos.length;e++){if(i=this.hijos[0].hijos[t].hijos[e].ejecutar(),!Number.isInteger(i))return window.errores.push(new o.a("Semantico","Solo se puede acceder a posicion por medio de ENTEROS.",this.location.last_line,this.location.last_column)),0;a.push(i)}let n="";for(let t=0;t<a.length;t++){if(r=e.valor[a[t]],n+="["+a[t]+"]",null==r||null==r||t<a.length-1&&"Array"!=r.constructor.name)return window.errores.push(new o.a("Semantico","En arreglo <<"+e.nombre+">> se intenta acceder a una dimension que no esta definida ("+n+").",this.location.last_line,this.location.last_column)),0;e=new s.a("let",e.nombre,r,e._tipo,this.getRol(r),e.dimensiones)}}let i=this.hijos[0].hijos.length-1;switch(this.hijos[0].hijos[i].token){case"ID":if(0!=i){if("tipo"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a atributo en <<"+e.nombre+">> pero no es un tipo.",this.location.last_line,this.location.last_column)),0;if(null==e||null==e)return window.errores.push(new o.a("Semantico","Tipo <<"+e.nombre+">> no esta definido.",this.location.last_line,this.location.last_column)),0;let r=e.valor.buscarAtributo(this.hijos[0].hijos[i].texto);return r?this.comprobarCoincidenciaTipos(r.tipo,t)?(r.valor=t,r.tipo=this.getTipo(t),r.rol=this.getRol(t),r.dimensiones=this.getDimensiones(t),r.valor):(window.errores.push(new o.a("Semantico","No se puede asignar valor a atributo <<"+this.hijos[0].hijos[i].texto+">> tipos ("+r.tipo+", "+typeof t+") no son compatibles.",this.location.last_line,this.location.last_column)),0):(window.errores.push(new o.a("Semantico","Atributo <<"+this.hijos[0].hijos[i].texto+">> no existe.",this.location.last_line,this.location.last_column)),0)}if(e=window.tablaSimbolos.buscarVariableSoloNombre(this.hijos[0].hijos[i].texto),!e)return window.errores.push(new o.a("Semantico","Variable <<"+this.hijos[0].hijos[i].texto+">> no econtrada. Se retorno 0 para recuperar.",this.location.last_line,this.location.last_column)),0;if(e.asigIndice<=2)return this.comprobarCoincidenciaTipos(e.tipo,t)?(e.valor=t,e.tipo=this.getTipo(t),e.rol=this.getRol(t),e.dimensiones=this.getDimensiones(t),e.valor):void window.errores.push(new o.a("Semantico","No se puede asignar variable <<"+this.hijos[0].hijos[i].texto+">> los tipos ("+e.tipo+", "+typeof t+") no son compatibles.",this.location.last_line,this.location.last_column));if(3==e.asigIndice){let i=this.getTipo(t),r=this.getRol(t),o=this.getDimensiones(t);return e.valor=t,e.tipo=i,e.rol=r,e.dimensiones=o,void(e.asigIndice=1)}break;case"LISTAACCESODIMS":if("array"!=e.rol)return window.errores.push(new o.a("Semantico","Desea acceder a posiciones en <<"+e.nombre+">> pero no es un arreglo.",this.location.last_line,this.location.last_column)),0;if(e.dimensiones<this.hijos[0].hijos[i].hijos.length)return window.errores.push(new o.a("Semantico","El arreglo <<"+e.nombre+">> es de "+e.dimensiones+" dimensiones y se quiere acceder a "+this.hijos[0].hijos[i].hijos.length+".",this.location.last_line,this.location.last_column)),0;let r,a,n=[];for(let e=0;e<this.hijos[0].hijos[i].hijos.length;e++){if(r=this.hijos[0].hijos[i].hijos[e].ejecutar(),!Number.isInteger(r))return window.errores.push(new o.a("Semantico","Solo se puede acceder a posicion por medio de ENTEROS.",this.location.last_line,this.location.last_column)),0;n.push(r)}let l="";for(let t=0;t<n.length-1;t++){if(a=e.valor[n[t]],l+="["+n[t]+"]",null==a||null==a||t<n.length-1&&"Array"!=a.constructor.name)return window.errores.push(new o.a("Semantico","En arreglo <<"+e.nombre+">> se intenta acceder a una dimension que no esta definida ("+l+").",this.location.last_line,this.location.last_column)),0;e=new s.a("let",e.nombre,a,e.tipo,this.getRol(a),e.dimensiones)}return this.comprobarCoincidenciaTipos(e.tipo,t)?(e.valor[n[n.length-1]]=t,e.valor[n[n.length-1]]):void window.errores.push(new o.a("Semantico","No se puede asignar <<"+e.nombre+">> tipos ("+e.tipo+", "+typeof e[n[n.length-1]]+") no son compatibles.",this.location.last_line,this.location.last_column))}}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||null==e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}comprobarCoincidenciaTipos(e,t){if(null==t||null==t)return!0;if("null"==e||"undefined"==e)return!0;if("number"==e&&"number"==typeof t)return!0;if("string"==e&&"string"==typeof t)return!0;if("boolean"==e&&"boolean"==typeof t)return!0;if("object"==typeof t){if("Array"==t.constructor.name){let i=t;for(;"Array"==i.constructor.name;){let e=Array.from(i.keys());if(0==e.length)return!0;i=i[e[0]]}return this.comprobarCoincidenciaTipos(e,i)}if("Objeto"==t.constructor.name)return t.comprobarElTipo(e)}return!1}traducir(){return this.hijos[0].traducir()+" = "+this.hijos[1].traducir()}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){if(0==this.hijos.length)return[];let e,t=this.hijos[0].hijos,i=[],r=t[0].ejecutar();i.push(r);for(let o=0;o<t.length;o++)if(e=t[o].ejecutar(),i.push(e),typeof r!=typeof e)return window.errores.push(new plantillaError("Semantico","En el array todos deben ser del mismo tipo.",decla.location.last_line,decla.location.last_column)),[];return i}traducir(){if(0==this.hijos.length)return"[]";let e="[";for(let t=0;t<this.hijos[0].hijos.length;t++)e+=this.hijos[0].hijos[t].traducir(),t<this.hijos[0].hijos.length-1&&(e+=", ");return e+="]",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));var r=i(53),o=i(54),s=i(67),a=i(63);const n=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e,t=this.hijos[0].texto,i=[],a=[],n=[],l=0;for(let t=0;t<this.hijos[1].hijos.length;t++)e=this.hijos[1].hijos[t].ejecutar(),i.push(e),a.push(this.getTipo(e)),n.push(this.getDimensiones(e));let c=window.tablaSimbolos.buscarFuncionLlamada(t,a,n);if(null==c)return window.errores.push(new o.a("Semantico","No pudo ejecutarse funcion <<"+t+">>. No se encontro.",this.location.last_line,this.location.last_column)),0;window.pilaRetornos.push(0),window.tablaSimbolos.meterAmbitoFuerte(t,c.esAnidad);for(let e=0;e<c.params.length;e++)if(this.esTipoNormal(a[e])){let t;t=0==c.params[e].dimensiones?new s.a("DECLA","DECLA",this.location,[new r.a("let","let",this.location,[]),new s.a("LISTADECLA","LISTADECLA",this.location,[new s.a("DECLAVAR1","DECLAVAR1",this.location,[new r.a("ID",c.params[e].nombre,this.location,[]),new r.a("ID",c.params[e].tipo,this.location,[]),this.getTipo2(i[e],this.hijos[1].hijos[e])])])]):new s.a("DECLA","DECLA",this.location,[new r.a("let","let",this.location,[]),new s.a("LISTADECLA","LISTADECLA",this.location,[new s.a("DECLAARR1","DECLAARR1",this.location,[new r.a("ID",c.params[e].nombre,this.location,[]),new r.a("ID",c.params[e].tipo,this.location,[]),new r.a("LISTADIMS","LISTADIMS",this.location,c.params[e].dimensiones),this.hijos[1].hijos[e]])])]),t.ejecutar()}else window.tablaSimbolos.meterVariable("let",c.params[e].nombre,i[e],a[e],"tipo",n[e],1);return c.sentencias.ejecutar2(),c.sentencias.ejecutar(),l=[...window.pilaRetornos],l=l.pop(),window.pilaRetornos.pop(),window.tablaSimbolos.sacarAmbitoFuerte(),l}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}getTipo2(e,t){return"number"==typeof e?new a.a("NUMERICO",e,this.location,[]):"string"==typeof e?new a.a("STRING",e,this.location,[]):"boolean"==typeof e?new a.a("BOOLEAN",e,this.location,[]):void 0===e?new a.a("UNDEFINED","undefined",this.location,[]):t}esTipoNormal(e){return"number"==e||("string"==e||("boolean"==e||"undefined"==e))}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}traducir(){let e=this.hijos[0].texto+"(";for(let t=0;t<this.hijos[1].hijos.length;t++)e+=this.hijos[1].hijos[t].traducir(),t<this.hijos[1].hijos.length-1&&(e+=", ");return e+=")",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e=!1;for(let t=0;t<this.hijos.length;t++){if("IF"==this.hijos[t].token||"IFELSE"==this.hijos[t].token){if(e=this.hijos[t].hijos[0].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en IF.",this.location.last_line,this.location.last_column));if(1==e){window.tablaSimbolos.meterAmbitoDebil();let e=this.hijos[t].hijos[1].ejecutar();return window.tablaSimbolos.sacarAmbitoDebil(),e}}if("else"==this.hijos[t].token){window.tablaSimbolos.meterAmbitoDebil();let e=this.hijos[t].hijos[0].ejecutar();return window.tablaSimbolos.sacarAmbitoDebil(),e}}}traducir(){let e="";for(let t=0;t<this.hijos.length;t++)"IF"==this.hijos[t].token&&(e+="if ("+this.hijos[t].hijos[0].traducir()+"){\n",window.currentTabs++,e+=this.hijos[t].hijos[1].traducir(),window.currentTabs--,e+="}"),"IFELSE"==this.hijos[t].token&&(e+="else if ("+this.hijos[t].hijos[0].traducir()+"){\n",window.currentTabs++,e+=this.hijos[t].hijos[1].traducir(),window.currentTabs--,e+="}"),"else"==this.hijos[t].token&&(e+="else {\n",window.currentTabs++,e+=this.hijos[t].hijos[0].traducir(),window.currentTabs--,e+="}");return e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e;for(;;){if(e=this.hijos[0].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en WHILE.",this.location.last_line,this.location.last_column));if(!e)break;window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();let t=this.hijos[1].ejecutar();if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"break"==t.nombre)break;if("object"!=typeof t||"EscapeEstructura"!=t.constructor.name||"continue"!=t.nombre){if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"return"==t.nombre)return t;window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1}}}traducir(){let e="while ("+this.hijos[0].traducir()+"){\n";return window.currentTabs++,e+=this.hijos[1].traducir(),window.currentTabs--,e+="}",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e;for(;;){window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();let t=this.hijos[1].ejecutar();if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"break"==t.nombre)break;if("object"!=typeof t||"EscapeEstructura"!=t.constructor.name||"continue"!=t.nombre){if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"return"==t.nombre)return t;if(window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1,e=this.hijos[0].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en WHILE.",this.location.last_line,this.location.last_column));if(!e)break}}}traducir(){let e="do {\n";return window.currentTabs++,e+=this.hijos[1].traducir(),window.currentTabs--,e+="} while ("+this.hijos[0].traducir()+");",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e,t=this.hijos[0].ejecutar(),i=!1,r=this.hijos[1].hijos[0];window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();for(let o=0;o<r.hijos.length;o++)if(e=r.hijos[o].hijos[0].ejecutar(),t==e&&(i=!0),i){let e=r.hijos[o].hijos[1].ejecutar();if("object"==typeof e&&"EscapeEstructura"==e.constructor.name&&"break"==e.nombre)break;if("object"==typeof e&&"EscapeEstructura"==e.constructor.name&&"return"==e.nombre)return e}if(!i){let e=this.hijos[1].hijos[1].ejecutar();if("object"==typeof e&&"EscapeEstructura"==e.constructor.name&&"return"==e.nombre)return e}window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1}traducir(){let e="switch ("+this.hijos[0].traducir()+"){\n",t=this.hijos[1].hijos[0];for(let i=0;i<t.hijos.length;i++)e+="case "+t.hijos[i].hijos[0].traducir()+":\n",e+=t.hijos[i].hijos[1].traducir();return e+="default: \n",e+=this.hijos[1].hijos[1].traducir(),e+="}",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e;for(window.tablaSimbolos.meterAmbitoDebil(),this.hijos[0].ejecutar();;){if(e=this.hijos[1].ejecutar(),"boolean"!=typeof e)return void window.errores.push(new plantillaError("Semantico","Solo se aceptan valores de falso o verdadero en FOR.",this.location.last_line,this.location.last_column));if(!e)break;window.indiceLoops=window.indiceLoops+1,window.tablaSimbolos.meterAmbitoDebil();let t=this.hijos[3].ejecutar();if(this.hijos[2].ejecutar(),"object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"break"==t.nombre)break;if("object"!=typeof t||"EscapeEstructura"!=t.constructor.name||"continue"!=t.nombre){if("object"==typeof t&&"EscapeEstructura"==t.constructor.name&&"return"==t.nombre)return t;window.tablaSimbolos.sacarAmbitoDebil(),window.indiceLoops=window.indiceLoops-1}}window.tablaSimbolos.sacarAmbitoDebil()}traducir(){let e="for("+this.hijos[0].traducir()+"; "+this.hijos[1].traducir()+"; "+this.hijos[2].traducir()+"){\n";return window.currentTabs++,e+=this.hijos[3].traducir(),window.currentTabs--,e+="}",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(58);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){return window.indiceLoops,new o.a("break")}traducir(){return"break;"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(58);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){return window.indiceLoops,new o.a("continue")}traducir(){return"continue;"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var r=i(53),o=i(58);const s=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){return 1==this.hijos.length&&(window.pilaRetornos[window.pilaRetornos.length-1]=this.hijos[0].ejecutar()),new o.a("return")}traducir(){return 1==this.hijos.length?"return "+this.hijos[0].traducir()+";":"return;"}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var r=i(53);const o=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e;return 1==this.hijos[0].ejecutar()?(e=this.hijos[1].ejecutar(),e):(e=this.hijos[2].ejecutar(),e)}traducir(){return this.hijos[0].traducir()+" ? "+this.hijos[1].traducir()+" : "+this.hijos[2].traducir()}}},,,function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var r=i(53),o=i(54),s=i(64);const a=class extends r.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){}ejecutar2(){}ejecutar3(){let e=this.hijos[0].texto,t=[];this.hijos[1].hijos.forEach(e=>{2==e.hijos.length&&t.push(new s.a(e.hijos[0].texto,e.hijos[1].texto,0)),3==e.hijos.length&&t.push(new s.a(e.hijos[0].texto,e.hijos[1].texto,e.hijos[2].hijos))}),window.tablaObjetos.meterObjeto(new class{constructor(e,t){this.nombre=e,this.listaAttrs=t}}(e,t))||window.errores.push(new o.a("Semantico","Tipo <<"+e+">> no se puede declarar, ya existe uno con ese nombre.",this.location.last_line,this.location.last_column))}traducir(){let e="type "+this.hijos[0].texto+" = {\n";for(let t=0;t<this.hijos[1].hijos.length;t++){let i=this.hijos[1].hijos[t];if(2==i.hijos.length&&(e+=i.hijos[0].texto+" : "+i.hijos[1].texto),3==i.hijos.length){e+=i.hijos[0].texto+" : "+i.hijos[1].texto;for(let t=0;t<i.hijos[2].hijos;t++)e+="[]"}t<this.hijos[1].hijos.length-1?e+=",\n":e+="\n"}return e+="};\n",e}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var r=i(66),o=i(54);var s=i(53);const a=class extends s.a{constructor(e,t,i,r){super(e,t,i,r)}ejecutar(){let e=new class{constructor(){this.tabla=new r.a("")}buscarAtributo(e){return this.tabla.buscarVariableSoloNombre(e)}generarObjeto(e,t,i){for(let r=0;r<e.length;r++){let s=e[r][0],a=e[r][1],n=this.getTipo(a),l=this.getRol(a),c=this.getDimensiones(a);if(!this.validarTipo(n))return void window.errores.push(new o.a("Semantico","La variable <<"+s+">> se declara con tipo ("+n+") pero ese tipo no existe.",t,i));this.tabla.meterVariable("let",s,a,n,l,c,1)}}getTipaso(){let e=0,t="objeto",i=window.tablaObjetos.getLista();for(let r=0;r<i.length;r++)this.comprobarElTipo(i[r].nombre)&&(e+=1,t=i[r].nombre);return 1==e?t:"objeto"}getDimensiones(e){let t=0,i=e;for(;Array.isArray(i);)i=i[0],t+=1;return t}comprobarCoincidenciaTipos(e,t){if(null==t||null==t)return!0;if("null"==e||"undefined"==e)return!0;if("number"==e&&"number"==typeof t)return!0;if("string"==e&&"string"==typeof t)return!0;if("boolean"==e&&"boolean"==typeof t)return!0;if("object"==typeof t&&"Array"==t.constructor.name){let i=t;for(;"Array"==i.constructor.name;){let e=Array.from(i.keys());if(0==e.length)return!0;i=i[e[0]]}return this.comprobarCoincidenciaTipos(e,i)}return!1}comprobarElTipo(e){let t=window.tablaObjetos.buscarObjeto(e);if(!t)return!1;let i=t.listaAttrs;if(i.length!=this.tabla.getVarLength())return!1;for(let e=0;e<i.length;e++){let t=this.tabla.buscarVariableSoloNombre(i[e].nombre);if(!t)return!1;if(null==t.valor||null==t.valor)return!0;if(t.dimensiones!=i[e].dimensiones)return!1;if("objeto"==t.tipo){if(!t.valor.comprobarElTipo(i[e].tipo))return!1;t.tipo=i[e].tipo}if(t.tipo!=i[e].tipo)return!1}return!0}getTipo(e){if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("boolean"==typeof e)return"boolean";if(void 0===e)return"undefined";if(null==e)return"null";if("void"==typeof e)return"void";if("Objeto"==e.constructor.name)return e.getTipaso();if("Array"==e.constructor.name){let t=e;for(;Array.isArray(t);)t=t[0];return typeof t}return"undefined"}getRol(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e||void 0===e||null==e?"variable":"object"==typeof e?"Array"==e.constructor.name?"array":"tipo":"variable"}validarTipo(e){if("number"==e)return!0;if("string"==e)return!0;if("boolean"==e)return!0;if("undefined"==e)return!0;if("null"==e)return!0;return!!window.tablaObjetos.buscarObjeto(e)}},t=[];return this.hijos.forEach(e=>{t.push([e.hijos[0].texto,e.hijos[1].ejecutar()])}),e.generarObjeto(t,this.location.last_line,this.location.last_column),e}traducir(){let e="{\n";for(let t=0;t<this.hijos.length;t++){let i=this.hijos[t];e+=i.hijos[0].texto+" : "+i.hijos[1].traducir(),t<this.hijos.length-1?e+=",\n":e+="\n"}return e+="}",e}}},,function(e,t,i){"use strict";i.r(t);var r=i(56),o=i(41),s=i(8);const a=s.b`
  a,button {
    font-size: inherit;
    vertical-align: middle;
    background: #fff;
    border: none;
    cursor: pointer;
    outline:none;
    box-shadow: var(--shadow-elevation-4dp_-_box-shadow);
    text-decoration: none;
  }

  button.rounded {
    border-radius:100%;
    width: 44px;
    height: 44px;
  }

  button:hover svg {
    fill: var(--accent-color);
  }

  .md{
    height: 50px;
    margin-top: 25px;
  }

  .primary {
    background-color:var(--dark-primary-color);
    color:white;    
    font-weight: 600;
  }

  .primary span svg{
    fill:white;
  }

  .text {
    border: 1px solid var(--dark-primary-color);
    color: var(--dark-primary-color);
  }

  .text span svg{
    fill: var(--dark-primary-color);
  }

  .centered {
    transform: translateX(-50%);
    margin-left: 50%;
    margin-top: 25px;
  }
  
  @media (max-width: 840px){
    form .centered{
      transform: none;
      margin: auto;
    }

    form .centered.md {
      margin-top: 12.5px;
    }

  }`,n=s.b`
    .styled-button {
        display: inline-block;
    }
    
    .styled-button {
        display: inline-block;
        box-sizing: border-box;
        border: 2px solid var(--dark-primary-color);
        background-color: #FFF;
        font-size: 14px;
        font-weight: 500;
        color: var(--dark-primary-color);
        margin: 0;
        text-align: center;
        text-decoration: none;
        text-transform: uppercase;
        border-radius: 0;
        outline: none;
        -webkit-appearance: none;
        cursor: pointer;
        padding: 0;
    }
    
    .styled-button > * {
        width:100%;
        display:inline-block;
        cursor:pointer;
        font-weight:bolder;
    }
    
    .styled-button:focus, .styled-button > *:focus {
        background-color: #c5cad3;
    }
    
    .styled-button:hover, .styled-button:active, .styled-button  > *:active {
        background-color: var(--dark-primary-color);
        color: #FFF;
    }
    
    @media (max-width: 767px) {
        .styled-button [responsive] {
        position: var(--layout-fixed-bottom_-_position); 
        right: var(--layout-fixed-bottom_-_right); 
        bottom: var(--layout-fixed-bottom_-_bottom); 
        left: var(--layout-fixed-bottom_-_left);
        height: 64px;
        z-index: 1;
    }
    
    .styled-button [responsive] > * {
        background-color: var(--dark-primary-color);
        border: none;
        color: white;
        padding: 20px;
        width: 100%;
        height: 100%;
        font-size: 15px;
    }
    
    .styled-button [responsive] > *:focus {
        background-color: var(--dark-primary-color);
    }
}`;i(68),i(95),i(61),i(54);class l extends s.a{static get properties(){return{optimization:{type:Boolean},erores:{type:Array}}}static get styles(){return[o.f,s.b`
        :host {
          --paper-tabs-selection-bar-color: var(--default-primary-color);
          height: 90%;
          background: white;
          display: block;
          padding: 5px 0 0 0;
          height: 100%;
        }

        .header {
          background: var(--accent-color);
          color: white;
          border-radius: 5px 5px 0 0;
          font-size: 1.5em;
          padding: 8px;
        }

        div.row {
          width: 100%;
        }

        div.row:nth-child(n) {
          background: #f6faee;
        }
        div.row:nth-child(2n) {
          background: #a9c4d4;
          color: white;
        }

        div.header > div {
          width: 25%;
          font-size: 14px;
          display: inline-block;
          font-weight: bolder;
          text-align: center;
          background: var(--accent-color);
        }

        div.row > div {
          width: 24%;
          font-size: 14px;
          font-weight: 500;
          display: inline-block;
          text-align: justify;
        }

        main {
          overflow: auto;
          height: 100%;
        }
      `]}constructor(){super(),this.errores=[],window.addEventListener("graficar-errores",e=>{this.errores=e.detail,this.requestUpdate()})}render(){return s.c`
      <main id="main-content">
        <div class="header">
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Tipo
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Descripcion
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Linea
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Columna
          </div>
        </div>
        ${this.errores.map(e=>s.c`<div class="row">
            <div style="text-align: center;">${e.getTipo()}</div>
            <div>${e.getDescripcion()}</div>
            <div style="text-align: center;">${e.getLinea()}</div>
            <div style="text-align: center;">${e.getColumna()}</div>
          </div>`)}
      </main>
    `}}window.customElements.define("error-component",l);class c extends s.a{static get properties(){return{information:Object,keys:Array}}static get styles(){return[o.d,s.b`
        * {
          box-sizing: border-box;
        }
        :host {
          display: block;
          height: 100%;
        }

        .row,
        .header {
          display: grid;
          grid-template-columns: repeat(6, 1fr);
          text-align: center;
        }

        .header {
          background: var(--accent-color);
          color: white;
          border-radius: 5px 5px 0 0;
          font-size: 1.5em;
          padding: 8px;
        }

        .title {
          background: var(--default-primary-color);
          font-size: 1.5em;
        }

        .row label,
        .header label {
          display: inline-block;
          width: auto;
        }

        .row:last-child {
          border-radius: 0 0 5px 5px;
        }

        .body {
          overflow: auto;
          height: 87.5%;
          display: block;
        }

        .container {
          height: 100%;
        }
      `]}constructor(){super(),this.keys=["CAMBIO","ID","AMBITO","TIPO","DIMENSIONES","ROL"],this.information={},this.simbolos=[],window.addEventListener("graficar-tabla",e=>{this.simbolos=e.detail,this.requestUpdate()})}render(){return s.c` <div class="container">
      <div class="header">
        ${this.keys.map(e=>s.c`<label>${e}</label>`)}
      </div>
      <div class="body" id="main-content">
        ${this.simbolos.map(e=>s.c`<div class="row">
            <label>${e.cambio}</label>
            <label>${e.nombre}</label>
            <label>${e.ambito}</label>
            <label>${e.tipo}</label>
            <label>${e.dimensiones}</label>
            <label>${e.rol}</label>
          </div>`)}
      </div>
    </div>`}}customElements.define("symbol-table",c);var h=i(69);class u extends s.a{static get properties(){return{src:{type:String,reflect:!0},svg:{type:String}}}static get styles(){return[o.f,o.d,s.b`
        main {
          overflow: auto;
          background: black;
          width: 100%;
          height: 100%;
        }
      `]}constructor(){super(),this.src="",window.addEventListener("graficar-tree",e=>{this.src=e.detail,this.requestUpdate()})}render(){return s.c`
      <main id="main-content">
        ${""!==this.svg?Object(h.a)(this.svg):""}
      </main>
    `}attributeChangedCallback(e,t,i){"src"===e&&""!==i&&(this.svg=Viz(i,{format:"svg"}))}}window.customElements.define("graph-tree",u);class d extends s.a{static get properties(){return{selected:{type:Number},console:{type:Array},errors:{type:Array},information:{type:Object},graph:{type:String},blockgraph:{type:String}}}constructor(){super(),window.addEventListener("console-changed",e=>{this.console=e.detail,this.requestUpdate()}),window.addEventListener("graphblock-generated",e=>{this.blockgraph=e.detail,this.requestUpdate()}),window.addEventListener("error-catched",e=>{this.errors=[...e.detail],this.requestUpdate()}),this.console=[],this.queries=[],this.errors=[],this.information={}}static get styles(){return[o.d,o.f,a,o.e,o.c,s.b`
        :host {
          --paper-tabs-selection-bar-color: var(--default-primary-color);
          margin: 10px 3% 25px;
          width: 94%;
          background: white;
          box-shadow: var(--shadow-box-2dp-custom);
          display: block;
          padding: 5px 0 0 0;
          height: 75vh;
        }

        paper-tab.iron-selected,
        paper-tab:hover {
          background: var(--accent-color);
          color: var(--light-primary-color);
          border-radius: 5px 5px 0 0;
        }

        #textarea {
          background: #021b2b;
          color: cyan;
          display: block;
          width: 100%;
          height: 100%;
          resize: none;
          border-radius: 0 0 5px 5px;
          overflow: auto;
          font-family: monospace;
        }

        #textarea span {
          display: block;
          width: 100%;
          height: 14px !important;
          white-space: pre-wrap;
        }

        div {
          height: 100%;
          width: 100%;
        }

        iron-pages {
          display: block;
          height: 90%;
        }

        graph-tree {
          height: 100%;
          border-radius: 0 0 10px 10px;
        }

        paper-tab {
          background: var(--light-primary-color);
          border-radius: 5px 5px 0 0;
          color: var(--accent-color);
        }
      `]}render(){return s.c`<paper-tabs .selected="${this.selected}" scrollable>
        <paper-tab
          @click="${()=>{this.selected=0}}"
          >Consola</paper-tab
        >
        <paper-tab
          @click="${()=>{this.selected=1}}"
          >Errores</paper-tab
        >
        <paper-tab
          @click="${()=>{this.selected=2}}"
          >Simbolos</paper-tab
        >
        <paper-tab
          @click="${()=>{this.selected=3}}"
          >Grafo</paper-tab
        >
      </paper-tabs>
      <iron-pages .selected="${this.selected}" id="main-content">
        <div>
          <div id="textarea" readonly class="overflowable">
            ${this.console.map(e=>s.c`<span>${e}</span>`)}
          </div>
        </div>
        <div>
          <error-component
            .errors=${this.errors}
            ?optimization=${!1}
          ></error-component>
        </div>

        <div>
          <symbol-table .information="${this.information}"></symbol-table>
        </div>
        <div>
          <graph-tree .src="${this.graph}"></graph-tree>
        </div>
      </iron-pages>`}}window.customElements.define("console-element",d);const p=s.b`
    .CodeMirror {
    /* Set height, width, borders, and global font properties here */
    font-family: monospace;
    height: 300px;
    color: black;
    direction: ltr;
    }

    /* PADDING */

    .CodeMirror-lines {
    padding: 4px 0; /* Vertical padding around content */
    }
    .CodeMirror pre {
    padding: 0 4px; /* Horizontal padding of content */
    }

    .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
    background-color: white; /* The little square between H and V scrollbars */
    }

    /* GUTTER */

    .CodeMirror-gutters {
    border-right: 1px solid #ddd;
    background-color: #f7f7f7;
    white-space: nowrap;
    }
    .CodeMirror-linenumbers {}
    .CodeMirror-linenumber {
    padding: 0 3px 0 5px;
    min-width: 20px;
    text-align: right;
    color: #999;
    white-space: nowrap;
    }

    .CodeMirror-guttermarker { color: black; }
    .CodeMirror-guttermarker-subtle { color: #999; }

    /* CURSOR */

    .CodeMirror-cursor {
    border-left: 1px solid black;
    border-right: none;
    width: 0;
    }
    /* Shown when moving in bi-directional text */
    .CodeMirror div.CodeMirror-secondarycursor {
    border-left: 1px solid silver;
    }
    .cm-fat-cursor .CodeMirror-cursor {
    width: auto;
    border: 0 !important;
    background: #7e7;
    }
    .cm-fat-cursor div.CodeMirror-cursors {
    z-index: 1;
    }
    .cm-fat-cursor-mark {
    background-color: rgba(20, 255, 20, 0.5);
    -webkit-animation: blink 1.06s steps(1) infinite;
    -moz-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    }
    .cm-animate-fat-cursor {
    width: auto;
    border: 0;
    -webkit-animation: blink 1.06s steps(1) infinite;
    -moz-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    background-color: #7e7;
    }
    @-moz-keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }
    @-webkit-keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }
    @keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }

    /* Can style cursor different in overwrite (non-insert) mode */
    .CodeMirror-overwrite .CodeMirror-cursor {}

    .cm-tab { display: inline-block; text-decoration: inherit; }

    .CodeMirror-rulers {
    position: absolute;
    left: 0; right: 0; top: -50px; bottom: -20px;
    overflow: hidden;
    }
    .CodeMirror-ruler {
    border-left: 1px solid #ccc;
    top: 0; bottom: 0;
    position: absolute;
    }

    /* DEFAULT THEME */

    .cm-s-default .cm-header {color: blue;}
    .cm-s-default .cm-quote {color: #090;}
    .cm-negative {color: #d44;}
    .cm-positive {color: #292;}
    .cm-header, .cm-strong {font-weight: bold;}
    .cm-em {font-style: italic;}
    .cm-link {text-decoration: underline;}
    .cm-strikethrough {text-decoration: line-through;}

    .cm-s-default .cm-keyword {color: #708;}
    .cm-s-default .cm-atom {color: #219;}
    .cm-s-default .cm-number {color: #164;}
    .cm-s-default .cm-def {color: #00f;}
    .cm-s-default .cm-variable,
    .cm-s-default .cm-punctuation,
    .cm-s-default .cm-property,
    .cm-s-default .cm-operator {}
    .cm-s-default .cm-variable-2 {color: #05a;}
    .cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}
    .cm-s-default .cm-comment {color: #a50;}
    .cm-s-default .cm-string {color: #a11;}
    .cm-s-default .cm-string-2 {color: #f50;}
    .cm-s-default .cm-meta {color: #555;}
    .cm-s-default .cm-qualifier {color: #555;}
    .cm-s-default .cm-builtin {color: #30a;}
    .cm-s-default .cm-bracket {color: #997;}
    .cm-s-default .cm-tag {color: #170;}
    .cm-s-default .cm-attribute {color: #00c;}
    .cm-s-default .cm-hr {color: #999;}
    .cm-s-default .cm-link {color: #00c;}

    .cm-s-default .cm-error {color: #f00;}
    .cm-invalidchar {color: #f00;}

    .CodeMirror-composing { border-bottom: 2px solid; }

    /* Default styles for common addons */

    div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}
    div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}
    .CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }
    .CodeMirror-activeline-background {background: #e8f2ff;}

    /* STOP */

    /* The rest of this file contains styles related to the mechanics of
    the editor. You probably shouldn't touch them. */

    .CodeMirror {
    position: relative;
    overflow: hidden;
    background: white;
    }

    .CodeMirror-scroll {
    overflow: scroll !important; /* Things will break if this is overridden */
    /* 30px is the magic margin used to hide the element's real scrollbars */
    /* See overflow: hidden in .CodeMirror */
    margin-bottom: -30px; margin-right: -30px;
    padding-bottom: 30px;
    height: 100%;
    outline: none; /* Prevent dragging from highlighting the element */
    position: relative;
    }
    .CodeMirror-sizer {
    position: relative;
    border-right: 30px solid transparent;
    }

    /* The fake, visible scrollbars. Used to force redraw during scrolling
    before actual scrolling happens, thus preventing shaking and
    flickering artifacts. */
    .CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
    position: absolute;
    z-index: 6;
    display: none;
    }
    .CodeMirror-vscrollbar {
    right: 0; top: 0;
    overflow-x: hidden;
    overflow-y: scroll;
    }
    .CodeMirror-hscrollbar {
    bottom: 0; left: 0;
    overflow-y: hidden;
    overflow-x: scroll;
    }
    .CodeMirror-scrollbar-filler {
    right: 0; bottom: 0;
    }
    .CodeMirror-gutter-filler {
    left: 0; bottom: 0;
    }

    .CodeMirror-gutters {
    position: absolute; left: 0; top: 0;
    min-height: 100%;
    z-index: 3;
    }
    .CodeMirror-gutter {
    white-space: normal;
    height: 100%;
    display: inline-block;
    vertical-align: top;
    margin-bottom: -30px;
    }
    .CodeMirror-gutter-wrapper {
    position: absolute;
    z-index: 4;
    background: none !important;
    border: none !important;
    }
    .CodeMirror-gutter-background {
    position: absolute;
    top: 0; bottom: 0;
    z-index: 4;
    }
    .CodeMirror-gutter-elt {
    position: absolute;
    cursor: default;
    z-index: 4;
    }
    .CodeMirror-gutter-wrapper ::selection { background-color: transparent }
    .CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }

    .CodeMirror-lines {
    cursor: text;
    min-height: 1px; /* prevents collapsing before first draw */
    }
    .CodeMirror pre {
    /* Reset some styles that the rest of the page might have set */
    -moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0;
    border-width: 0;
    background: transparent;
    font-family: inherit;
    font-size: inherit;
    margin: 0;
    white-space: pre;
    word-wrap: normal;
    line-height: inherit;
    color: inherit;
    z-index: 2;
    position: relative;
    overflow: visible;
    -webkit-tap-highlight-color: transparent;
    -webkit-font-variant-ligatures: contextual;
    font-variant-ligatures: contextual;
    }
    .CodeMirror-wrap pre {
    word-wrap: break-word;
    white-space: pre-wrap;
    word-break: normal;
    }

    .CodeMirror-linebackground {
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    z-index: 0;
    }

    .CodeMirror-linewidget {
    position: relative;
    z-index: 2;
    padding: 0.1px; /* Force widget margins to stay inside of the container */
    }

    .CodeMirror-widget {}

    .CodeMirror-rtl pre { direction: rtl; }

    .CodeMirror-code {
    outline: none;
    }

    /* Force content-box sizing for the elements where we expect it */
    .CodeMirror-scroll,
    .CodeMirror-sizer,
    .CodeMirror-gutter,
    .CodeMirror-gutters,
    .CodeMirror-linenumber {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    }

    .CodeMirror-measure {
    position: absolute;
    width: 100%;
    height: 0;
    overflow: hidden;
    visibility: hidden;
    }

    .CodeMirror-cursor {
    position: absolute;
    pointer-events: none;
    }
    .CodeMirror-measure pre { position: static; }

    div.CodeMirror-cursors {
    visibility: hidden;
    position: relative;
    z-index: 3;
    }
    div.CodeMirror-dragcursors {
    visibility: visible;
    }

    .CodeMirror-focused div.CodeMirror-cursors {
    visibility: visible;
    }

    .CodeMirror-selected { background: #d9d9d9; }
    .CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }
    .CodeMirror-crosshair { cursor: crosshair; }
    .CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }
    .CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }

    .cm-searching {
    background-color: #ffa;
    background-color: rgba(255, 255, 0, .4);
    }

    /* Used to force a border model for a node */
    .cm-force-border { padding-right: .1px; }

    @media print {
    /* Hide the cursor when printing */
    .CodeMirror div.CodeMirror-cursors {
    visibility: hidden;
    }
    }

    /* See issue #2901 */
    .cm-tab-wrap-hack:after { content: ''; }

    /* Help users use markselection to safely style text background */
    span.CodeMirror-selectedtext { background: none; }

    .CodeMirror::-webkit-scrollbar {
                    height:4px;
                    width: 4px;
                    background-color: #F5F5F5;
                }

                .CodeMirror::-webkit-scrollbar-thumb {
                    background-color: rgba(10, 10, 10, 0.69);
                }

                .CodeMirror::-webkit-scrollbar-track {
                    -webkit-box-shadow: inset 0 0 4px rgba(0,0,0,0.3);
                    background-color: #F5F5F5;
                }
    `;var b=i(65);window.CodeMirror=b.a;i(70),i(71),i(96);class m extends s.a{constructor(){super(),this.on="true",this.off="false",this.checked=!1}static get styles(){return[s.b`
                :host{
                    display: inline-block;
                    width: 15%;
                    margin: 0 auto 0;
                }

                :host([checked]) .sl{
                    color: var(--default-primary-color);
                }

                .si {
                    display: none;
                }
                .sl {
                    position: relative;
                    display: block;
                    min-width: 112px;
                    cursor: pointer;
                    text-align: left;
                    margin: 0 16px;
                    padding: 8px 0 8px 0px;
                    font-size: 1.125em;
                    font-family: 'Josefin Sans', sans-serif;
                    color: var(--primary-text-color);
                }
                .sl:before, .sl:after {
                    content: "";
                    position: absolute;
                    margin: 0;
                    outline: 0;
                    top: 50%;
                    -ms-transform: translate(0, -50%);
                    -webkit-transform: translate(0, -50%);
                    transform: translate(0, -50%);
                    -webkit-transition: all 0.3s ease;
                    transition: all 0.3s ease;
                }
                .sl:before {
                    right: 8px;
                    width: 34px;
                    height: 14px;
                    background-color: #9E9E9E;
                    border-radius: 8px;
                }
                .sl:after {
                    right: 23px;
                    width: 20px;
                    height: 20px;
                    background-color: #FAFAFA;
                    border-radius: 50%;
                    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
                }
                .sl .ton {
                    display: none;
                }
                
                .sl .toff {
                    display: inline-block;
                }
                .si:checked + .sl:before {
                    background-color: var(--default-primary-color);
                }
                .si:checked + .sl:after {
                    background-color: var(--dark-primary-color);
                    -ms-transform: translate(80%, -50%);
                    -webkit-transform: translate(80%, -50%);
                    transform: translate(80%, -50%);
                }
                .si:checked + .sl .ton {
                    display: inline-block;
                }
                .si:checked + .sl .toff {
                    display: none;
                }
                
                @media (max-width:440px){
                    :host{
                        padding-left:0;
                    }
                }`]}render(){return s.c`
            ${this.message}
            <div>
                <input type="checkbox" id="cb" name="cb" class="si" ?checked=${this.checked}>
                <label for="cb" class="sl" @click="${e=>{e.preventDefault(),this.checked=!this.checked,this.fire("value-changed",this.value)}}">
                    <span class="ton">${this.on}</span>
                    <span class="toff">${this.off}</span>
                </label>
            </div>`}static get properties(){return{on:{type:String},off:{type:String},error:{type:String},checked:{type:Boolean,reflect:!0},message:{type:String}}}value(){return this.checked}}customElements.define("custom-switch",m);s.b`
  .spin {
    -webkit-animation-name: spinner;
    -webkit-animation-timing-function: linear;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-duration: 6s;

    animation-name: spinner;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: 6s;

    -webkit-transform-style: preserve-3d;
    -moz-transform-style: preserve-3d;
    -ms-transform-style: preserve-3d;
    transform-style: preserve-3d;
  }

  .spin:hover {
    -webkit-animation-play-state: paused;
    animation-play-state: paused;
  }`;const f=s.b`
  @keyframes ripple {
    0% {
        box-shadow: 0px 0px 0px 1px rgba(1, 136, 209, 0);
    }
    50% {
        box-shadow: 0px 0px 2.5px 25px rgba(1, 136, 209, 0.20);
    }
    100% {
        box-shadow: 0px 0px 2.5px 50px rgba(1, 136, 209, 0.10);;
    }
  }`;s.b`

  @keyframes fade-in-opacity-transition {
    from { visibility: hidden; opacity: 0; }
    to { opacity: 1; visibility: visible; }
  }

  @keyframes fade-out-opacity-transition {
    from { opacity: 1; visibility: visible; }
    to { visibility: hidden; opacity: 0; }
  }

  :host(.fadein) {
    animation: fade-in-opacity-transition .5s 1 normal linear;
  }

  :host(.fadeout) {
    animation: fade-out-opacity-transition .5s 1 normal linear forwards;
  }

  :host(.hide){
    display: none;
  }
`,s.b`

    @keyframes fade-opacity-forwards{
        from { opacity: 0; visibility: hidden; }
        to { opacity: 1; visibility: visible; }
    }
    
    @keyframes fade-opacity-reverse{
        from { opacity: 1; visibility: visible; }
        to { opacity: 0; visibility: hidden; }
    }

    .fadein {
        animation: fade-opacity-forwards ease-in-out 250ms forwards normal;
    }

    .fadeout {
        animation: fade-opacity-reverse ease-in-out 250ms forwards normal;
    }

    .fadeout-delay {
        animation: fade-opacity-reverse ease-in-out 250ms forwards normal;
        visibility: visible;
        opacity: 1;
        animation-delay: 250ms;
    }

    .fadein-delay {
        animation: fade-opacity-forwards ease-in-out 250ms forwards normal;
        visibility: hidden;
        opacity: 0;
        animation-delay: 250ms;
    }

    .iron-selected label.index::after{
        content: none;
    }
`;class g extends s.a{constructor(){super(),this.opened=!1,this.optics=[],this.setInitialValues()}setInitialValues(){this._optic="",this.message=""}static get styles(){return[n,f,s.b`
            paper-dropdown-menu{
                margin-left: 50%;
                transform: translateX(-50%);
            }

            :host {
                display: block;
                position: fixed;
                background-color: var(--default-primary-color);
                color: white;
                box-shadow: var(--shadow-box-4dp-custom);
                width: 320px;
                padding: 12px;
                visibility: hidden;
                will-change: transform;
                top: 225px;
                right: 16px;
                -webkit-transform: translate3d(calc(100% + 16px), 0, 0);
                transform: translate3d(calc(100% + 16px), 0, 0);
                transition-property: visibility, -webkit-transform, background-color;
                transition-property: visibility, transform, background-color;
                transition-duration: 0.25s;
                transition-delay: 0.1s;
                z-index : 300;
            }

            :host(.error){
                color: #fff;
                background-color: var(--error-color);
                box-shadow: var(--shadow-box-4dp-custom-error);
            }

            :host([opened]) {
                visibility: visible;
                -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0);
            }

            @media (min-width:840px){

                :host(.alert[opened]){
                    animation: ripple 5 .5s forwards linear;
                }
            }

            .layout-horizontal {
                display: var(--layout-horizontal_-_display); -ms-flex-direction: var(--layout-horizontal_-_-ms-flex-direction); -webkit-flex-direction: var(--layout-horizontal_-_-webkit-flex-direction); flex-direction: var(--layout-horizontal_-_flex-direction);
            }

            .label {
                -ms-flex: var(--layout-flex_-_-ms-flex); -webkit-flex: var(--layout-flex_-_-webkit-flex); flex: var(--layout-flex_-_flex); -webkit-flex-basis: var(--layout-flex_-_-webkit-flex-basis); flex-basis: var(--layout-flex_-_flex-basis);
                line-height: 24px;
                margin: 8px;
                font-size: 1.25em;
            }

            .modal-button {
                -ms-flex: var(--layout-flex_-_-ms-flex);
                -webkit-flex: var(--layout-flex_-_-webkit-flex);
                flex: var(--layout-flex_-_flex);
                -webkit-flex-basis: var(--layout-flex_-_-webkit-flex-basis);
                flex-basis: var(--layout-flex_-_flex-basis);
            }

            .modal-button > label {
                box-sizing: border-box;
                width: 100%;
                padding: 8px 24px;
            }

            #closeBtn {
                position: absolute;
                right: 5px;
                top: 5px;
            }

            @media (max-width: 770px) {
                :host {
                    top: auto;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    width: auto;
                    -webkit-transform: translate3d(0, 100%, 0);
                    transform: translate3d(0, 100%, 0);
                }
            }`]}render(){return s.c`
            <div class="layout-horizontal">
                <div class="label">${this.message}</div>
            </div>
            <paper-input label="Valor a ingresar" always-float-label id="sysin"></paper-input>
            <div class="layout-horizontal">
                <button class="styled-button modal-button" @click="${this.resolveVal}">
                    <label>Aceptar</label>
                </button>
            </div>`}static get properties(){return{message:{type:String},position:{type:String},opened:{type:Boolean,reflect:!0}}}resolveVal(){this.onResolve(this._("sysin").value),this.closeModal()}closeModal(){this.opened=!1}openModal(e){return this.opened=!0,this.message=e,new Promise((e,t)=>{this.onResolve=e,this.onReject=t})}reset(){this.setInitialValues(),this.classList.remove("error")}animate(){this.classList.toggle("alert"),setTimeout(()=>this.classList.toggle("alert"),2500)}}customElements.define("custom-simple-modal",g);i(72);var w=i(66);var y=i(47);const v=new class{constructor(){this.reset()}changeHeapPointer(e){this.heap_pointer=e}changeStackPointer(e){this.stack_pointer=e}insertTemporary(e,t){if(!this.tKeys.includes(e))throw Error(e+" is not defined");this.data[e]=t}setError(e){this.error=e}getError(e){return this.error}getTemporary(e){return this.data[e]}getStackPointer(){return this.stack_pointer}addToStackPointer(e){this.stack_pointer+=e}substractToStackPointer(e){this.stack_pointer-=e}getHeapPointer(){return this.heap_pointer}getFromStack(e){return this.stack[e]}getFromHeap(e){return this.heap[e]}insertInHeap(e,t){this.heap[e]=t,window.dispatchEvent(new CustomEvent("heap-changed",{detail:this.heap}))}insertInStack(e,t){this.stack[e]=t,window.dispatchEvent(new CustomEvent("stack-changed",{detail:this.stack}))}createTemporary(e){this.data[e.toLowerCase()]=0,this.tKeys.push(e.toLowerCase())}reset(){this.consola=[""],this.data={},this.tKeys=[],this.labels=new Map,this.methods=new Map,this.stack_pointer=0,this.heap_pointer=0,this.error=0,this.stack=new Array(5e3).fill(-1),this.heap=new Array(5e3).fill(-1),this.callStack=[],window.dispatchEvent(new CustomEvent("console-changed",{detail:this.consola})),window.dispatchEvent(new CustomEvent("stack-changed",{detail:this.stack})),window.dispatchEvent(new CustomEvent("heap-changed",{detail:this.heap})),window.dispatchEvent(new CustomEvent("heap-pointer-changed",{detail:this.heap_pointer})),window.dispatchEvent(new CustomEvent("stack-pointer-changed",{detail:this.stack_pointer}))}insertInCallStack(e){this.callStack.push(e)}lastNode(){return this.callStack.pop()}mapLabels(e){let t=e;for(;null!=t;)10===t.type?this.labels.set(t.value,t):7==t.type&&this.mapLabels(t.getChild(0)),t=t.next}mapMethods(e){this.methods.clear();let t=e;for(;null!=t;)7==t.type&&this.methods.set(t.value,t),t=t.next}getNode(e){return this.labels.get(e)}insertInConsole(e,t=!1){t?this.consola.push(e):this.consola[this.consola.length-1]=this.consola[this.consola.length-1]+e,window.dispatchEvent(new CustomEvent("console-changed",{detail:this.consola}))}};window.Structures=v;const j={names:["+","-","*","%","/","number","identifier","method","begin","end","label","tmp","stack","heap","goto","==","<>",">","<",">=","<=","print","=","sp","hp","call","var","E"],types:{"+":0,"-":1,"*":2,"%":3,"/":4,number:5,identifier:6,method:7,begin:8,end:9,label:10,tmp:11,stack:12,heap:13,goto:14,"==":15,"<>":16,">":17,"<":18,">=":19,"<=":20,sysin:21,print:22,"=":23,sp:24,hp:25,exit:26,call:27,var:28,e:29}},_=class{constructor(e,t,i,r){this.type=j.types[e.toString().toLowerCase()],this.name=e.toString().toLowerCase(),void 0===this.type&&console.log(e),this.value=t,this.line=i,this.column=r,this.children=[],this.next=null,this.last=null,this.parent=null,this.isFalse=!1,this.isLeader=!1;for(let e=4;e<arguments.length;e++)this.children.push(arguments[e]),arguments[e].parent=this}markLeader(){this.isLeader=!0}getValue(){return this.value}addChild(...e){e.forEach(e=>{this.children.push(e),e.parent=this})}getChild(e){return e>this.children.length?null:this.children[e]}getLine(){return this.line}setValue(e){this.value=e}setNext(e){let t=this;for(;null!=t.next;)t=t.next;t.next=e,null!==e&&(e.last=t)}changeType(e){this.type=j.types[e],this.name=e}printTree(e=""){console.log(`${e}#${j.names[this.type]} (${this.type})`),this.children.forEach(t=>{t.printTree(e+"\t")}),this.next&&this.next.printTree(e)}toString(){switch(this.type){case j.types.stack:return`Stack[${this.getChild(0).toString()}]`;case j.types.heap:return`Heap[${this.getChild(0).toString()}]`;case j.types["-"]:case j.types["*"]:case j.types["/"]:case j.types["+"]:case j.types["%"]:return`${this.getChild(0).toString()} ${j.names[this.type]} ${this.getChild(1).toString()}`;case j.types.tmp:case j.types.number:return this.value;case j.types.sp:return"P";case j.types.hp:return"H";case j.types.var:return this.getChild(0).type===j.types.heap?"var Heap[];\n":this.getChild(0).type===j.types.stack?"var Stack[];\n":this.children.length>1?`var ${this.children.map(e=>e.toString()).join(",")};\n`:`var ${this.getChild(0).toString()};\n`;case j.types.print:return`print (${this.value}, ${this.getChild(0).toString()});\n`;case j.types.label:return this.value+":\n";case j.types.goto:return`goto ${this.value};\n`;case j.types["<"]:case j.types[">"]:case j.types[">="]:case j.types["<="]:case j.types["<>"]:case j.types["=="]:return`if (${this.getChild(0).toString()}${this.isFalse?this.negate():j.names[this.type]}${this.getChild(1).toString()}) goto ${this.value};\n`;case j.types["="]:return`${this.getChild(0).toString()} = ${this.getChild(1).toString()};\n`;case j.types.call:return`call ${this.value};\n`;case j.types.method:{let e="",t=this.getChild(0);for(;null!==t;)e+=t.toString(),t=t.next;return`proc ${this.value} begin\n${e}end\n`}case j.types.e:return"E";default:return""}}copy(){const e=new _(this.name,this.value,this.line,this.column);e.name=this.name,e.type=this.type,e.isFalse=this.isFalse,e.isLeader=this.isLeader;for(const t of this.children)e.addChild(t.copy());return e}childrenSize(){return this.children.length}equals(e){return e.name===this.name&&e.type===this.type&&this.value===e.value&&e.column===this.column&&e.line===this.line}getNonNumericTypes(){switch(this.type){case j.types.hp:return["H"];case j.types.sp:return["P"];case j.types.tmp:return[this.getValue()];case j.types["-"]:case j.types["*"]:case j.types["/"]:case j.types["+"]:case j.types["%"]:{const e=[];return this.getChild(0).getType()!==j.types.number&&e.push(this.getChild(0).getValue()),this.getChild(1).getType()!==j.types.number&&e.push(this.getChild(1).getValue()),e}default:return[]}}typeEquality(e){if(e.childrenSize()!==this.childrenSize)return!1;if(this.getType()===e.getType()&&this.getValue()===e.getValue()){for(let t=0;t<e.childrenSize();t++)if(!this.getChild(t).typeEquality(e))return!1;return!0}return!1}getType(){return this.type}toStringSpecial(){switch(this.type){case j.types.var:return"var lista temporales;";case j.types[">"]:return`if (${this.getChild(0).toString()} GT ${this.getChild(1).toString()}) goto ${this.value}`;case j.types[">="]:return`if (${this.getChild(0).toString()} GTE ${this.getChild(1).toString()}) goto ${this.value}`;case j.types["<"]:return`if (${this.getChild(0).toString()} LT ${this.getChild(1).toString()}) goto ${this.value}`;case j.types["<="]:return`if (${this.getChild(0).toString()} LTE ${this.getChild(1).toString()}) goto ${this.value}`;case j.types["=="]:return`if (${this.getChild(0).toString()} EQEQ ${this.getChild(1).toString()}) goto ${this.value}`;case j.types["<>"]:return`if (${this.getChild(0).toString()} NOTEQ ${this.getChild(1).toString()}) goto ${this.value}`;default:return this.toString()}}negate(){switch(this.type){case j.types[">"]:return"<=";case j.types[">="]:return"<";case j.types["<="]:return">";case j.types["<"]:return">=";case j.types["<>"]:return"==";default:return"<>"}}hasZero(){return this.getChild(0).getType()===j.types.number&&0===this.getChild(0).value?0:this.getChild(1).getType()===j.types.number&&0===this.getChild(1).value?1:-1}hasTwo(){return this.getChild(0).getType()===j.types.number&&2===this.getChild(0).value?0:this.getChild(1).getType()===j.types.number&&2===this.getChild(1).value?1:-1}hasOne(){return this.getChild(0).getType()===j.types.number&&1===this.getChild(0).value?0:this.getChild(1).getType()===j.types.number&&1===this.getChild(1).value?1:-1}deleteAt(e){return this.children.splice(e,1)}converToFalse(){this.isFalse=!0}isConstantOperation(){return this.getChild(0).getType()===j.types.number&&this.getChild(1).getType()===j.types.number}trimMethodList(){null!=this.getChild(0).next&&(this.getChild(0).next.last=null,this.children[0]=this.getChild(0).next);let e=this.getChild(0);for(;null!=e.next;)e=e.next;e.last.next=e.next}usesTmp(e){switch(this.getChild(0)){case j.types.heap:case j.types.stack:if(this.getChild(0).getChild(0).getType()===j.types.tmp&&this.getChild(0).getChild(0).getValue()===e)return!0;break;case j.types.tmp:case j.types.sp:case j.types.hp:switch(this.getChild(1)){case j.types["-"]:case j.types["*"]:case j.types["/"]:case j.types["+"]:case j.types["%"]:if(this.getChild(1).getChild(0).getType()===j.types.tmp&&this.getChild(1).getChild(0).getValue()===e)return!0;if(this.getChild(1).getChild(1).getType()===j.types.tmp&&this.getChild(1).getChild(1).getValue()===e)return!0;break;case j.types.tmp:if(this.getChild(1).getValue()===e)return!0}}return!1}};const x=new class{constructor(){this.breakpoints=[],this.onReject=null,this.onResolve=null,this.stop=!0,this.lineByLine=!1,window.addEventListener("debugger-mode",e=>{e.detail?this.lineByLine=!0:(this.lineByLine=!1,this.stop=!0)})}heapAccess(e){const t=this.leftHandAccess(e.getChild(0));return-1!==t&&0!==t||(v.insertInConsole("null pointer exception...",!0),console.log(e.line,e.column),executeLine.next(new _("exit",null,-1,-1))),v.heap[t]}stackAccess(e){const t=this.leftHandAccess(e.getChild(0));return v.stack[t]}assignment(e){const t=this.leftHandAccess(e.getChild(1));switch(e.getChild(0).type){case j.types.tmp:v.data[e.getChild(0).value]=t,window.dispatchEvent(new CustomEvent("temporaries-changed",{detail:{temporaries:v.data,tmp:e.getChild(0).value}}));break;case j.types.sp:v.stack_pointer=parseInt(t),window.dispatchEvent(new CustomEvent("stack-pointer-changed",{detail:v.stack_pointer}));break;case j.types.hp:v.heap_pointer=parseInt(t),window.dispatchEvent(new CustomEvent("heap-pointer-changed",{detail:v.heap_pointer}));break;case j.types.stack:const i=this.leftHandAccess(e.getChild(0).getChild(0));v.insertInStack(i,t);break;case j.types.heap:const r=this.leftHandAccess(e.getChild(0).getChild(0));-1!=r&&0!=r||(v.insertInConsole("null pointer exception...",!0),executeLine.next(new _("exit",null,-1,-1))),v.insertInHeap(r,t)}}leftHandAccess(e){switch(e.type){case j.types["+"]:case j.types["-"]:case j.types["*"]:case j.types["%"]:case j.types["/"]:return this.aritmethicStmt(e);case j.types.number:return e.value;case j.types.tmp:return v.getTemporary(e.value.toString().toLowerCase());case j.types.heap:return this.heapAccess(e);case j.types.stack:return this.stackAccess(e);case j.types.hp:return v.heap_pointer;case j.types.sp:return v.stack_pointer}}aritmethicStmt(e){const t=this.leftHandAccess(e.getChild(0)),i=this.leftHandAccess(e.getChild(1));switch(e.type){case j.types["+"]:return t+i;case j.types["-"]:return t-i;case j.types["*"]:return t*i;case j.types["%"]:return Math.fmod(t,i);case j.types["/"]:return parseFloat(t/i).toPrecision(2)}return-1}printStmt(e){const t=e.value,i=this.leftHandAccess(e.getChild(0));switch(t){case'"%c"':10===i?v.insertInConsole("",!0):13!=i&&v.insertInConsole(String.fromCharCode(i));break;case'"%i"':v.insertInConsole(i);break;case'"%d"':v.insertInConsole(Number(i).toFixed(2))}}jmpInconditionalStmt(e){const t=e.value.toString(),i=v.getNode(t);executeLine.next(i.last).value}jmpConditionalStmt(e){const t=this.leftHandAccess(e.getChild(0)),i=this.leftHandAccess(e.getChild(1)),r=e.value,o=v.getNode(r);switch(e.type){case j.types["=="]:t===i&&executeLine.next(o).value;break;case j.types["<>"]:t!==i&&executeLine.next(o).value;break;case j.types[">"]:t>i&&executeLine.next(o).value;break;case j.types["<"]:t<i&&executeLine.next(o).value;break;case j.types[">="]:t>=i&&executeLine.next(o).value;break;case j.types["<="]:t<=i&&executeLine.next(o).value}}async executeProgram(e){console.log("STARTING EXECUTION...");let t=null,i=!0,r=!1;for(v.reset();t=executeLine.next().value;)switch(i&&(v.labels.clear(),v.mapLabels(t),v.mapMethods(t),i=!1),this.lineByLine&&this.breakpoints.length>0?(r||(r=this.breakpoints[0]===t.getLine()))&&await this.stopLine(t.getLine()):this.stop&&!this.lineByLine&&(this.breakpoints.includes(t.getLine())&&await this.stopLine(t.getLine()),this.stop=this.breakpoints.length>0),t.type){case j.types.var:this.declarationStmt(t);break;case j.types.goto:this.jmpInconditionalStmt(t);break;case j.types["<"]:case j.types[">"]:case j.types["<="]:case j.types[">="]:case j.types["<>"]:case j.types["=="]:this.jmpConditionalStmt(t);break;case j.types["="]:this.assignment(t);break;case j.types.print:this.printStmt(t);break;case j.types.end:executeLine.next(v.lastNode());break;case j.types.call:v.insertInCallStack(t);const e=v.methods.get(t.value);executeLine.next(e.getChild(0))}console.log("EXECUTION FINISHED..."),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"interpreter has finished"})),window.dispatchEvent(new CustomEvent("finished"))}declarationStmt(e){for(let t=0;t<e.children.length;t++)11===e.getChild(t).type&&(v.createTemporary[e.getChild(t).value]=-1)}setBreakPoint(e){this.breakpoints=e}stopLine(e){return window.dispatchEvent(new CustomEvent("stopped",{detail:e})),new Promise((e,t)=>{this.onResolve=e,this.onReject=t})}};var k=i(73);class A extends s.a{constructor(){super(),this.files={},window.addEventListener("stopped",e=>{this.started=1,this.highLight(e.detail)}),window.addEventListener("finished",()=>{this.started=0,this.debugged_line=-1}),window.addEventListener("run",()=>{0!==this.started&&this.debugg()}),this.breakPoints=[],this.started=0,this.debugged_line=0,this.parsed=!1,this.name="MainClass.j",this.src=""}static get styles(){return[o.d,o.f,p,s.b`
        .CodeMirror {
          border-top: 1px solid black;
        }

        .upload-btn-wrapper {
          grid-column: 1 / 3;
          border-bottom: 1px solid black;
          padding: 5px;
        }

        custom-accordion {
          margin: 20px;
          grid-column: 1 / 3;
        }

        :host {
          display: block;
          width: 95%;
          height: 100%;
          margin-left: 2.5%;
          transition: transform 250ms;
          box-shadow: var(--shadow-box-2dp-custom);
          background: white;
          border-radius: 5px;
          display: grid;
          grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
        }

        :host(:hover) {
          box-shadow: var(--shadow-box-8dp-custom);
        }

        textarea {
          height: 95%;
          width: 100%;
        }

        .upload-btn-wrapper {
          position: relative;
          overflow: hidden;
          display: inline-block;
        }

        .btn {
          border: 2px solid gray;
          color: gray;
          background-color: white;
          padding: 8px 20px;
          border-radius: 5px;
          font-size: 20px;
          font-weight: bold;
          cursor: pointer;
        }

        .upload-btn-wrapper input[type="file"] {
          font-size: 100px;
          position: absolute;
          width: 60px;
          height: 40px;
          top: 12px;
          left: 9px;
          opacity: 0;
          cursor: pointer;
        }

        paper-button {
          fill: black;
          border-radius: 5px;
          border: 2px solid grey;
        }

        .CodeMirror.cm-s-default {
          background: lightcyan;
          border-radius: 0 0 5px 5px;
          cursor: text;
        }

        .CodeMirror-gutter-elt {
          left: 0 !important;
        }

        .highlight-class {
          background: #00fff2 !important;
        }

        custom-switch {
          margin-left: 15%;
        }

        .overflowable {
          width: 100%;
        }

        .icon {
          width: 36px;
          height: 36px;
          display: block;
          padding: 5px;
          margin-left: 90%;
          border-radius: 100%;
          background: white;
          cursor: pointer;
          transition: 250ms all;
        }

        .icon:hover {
          fill: white;
          background: var(--dark-primary-color);
          box-shadow: var(--shadow-elevation-4dp);
        }

        pre {
          display: inline-block;
          width: calc(100% - 30px);
        }

        .lines {
          width: 25px;
        }
      `]}static get properties(){return{src:{type:String},code3D:{type:String},name:{type:String},breakPoints:{type:Array},started:{type:Number},debugged_line:{type:Number},temporary:{type:String},index:{type:Number},files:{type:Object},optCode:{type:String}}}firstUpdated(){this.editor=this._("pascaltext"),this.editor3D=this._("code3D"),window.Modal=this._("modal"),this.code_editor=b.a.fromTextArea(this.editor,{lineNumbers:!0,gutters:["CodeMirror-linenumbers","breakpoints"],matchBrackets:!0,mode:"javascript"}),this.code_editor_3D=b.a.fromTextArea(this.editor3D,{lineNumbers:!0,gutters:["CodeMirror-linenumbers","breakpoints"],matchBrackets:!0,mode:"javascript"}),this.code_editor_3D.on("gutterClick",(e,t)=>{const i=e.lineInfo(t);this.setBreakPoint(i.line,void 0===i.gutterMarkers),e.setGutterMarker(t,"breakpoints",i.gutterMarkers?null:this.makeMarker())}),this.code_editor.on("change",e=>{this.src=e.getValue(),""!==this.name&&void 0!==this.files[this.name]&&(this.files[this.name].src=this.src),this.dispatchEvent(new CustomEvent("editor-valor-cambio",{detail:e.getValue()}))}),this.code_editor_3D.on("change",e=>{this.codigo3D=e.getValue()}),this._("real-input").addEventListener("change",e=>{e.preventDefault();const t=new FileReader;t.addEventListener("load",e=>{const t=e.target.result;this.code_editor.setValue(t)}),t.readAsText(this._("real-input").files[0]),this.name=this._("real-input").files[0].name,this.dispatchEvent(new CustomEvent("name-changed",{detail:this.name}))})}render(){return s.c`
      <div class="upload-btn-wrapper" style="grid-column: 1 / 3;">
        <button class="btn"><span>${y.b}</span></button>
        <input type="file" name="myfile" id="real-input" />
        <paper-button @click="${this.translate}">${y.k}</paper-button>
        ${0===this.started?s.c`<paper-button @click="${this.interpret}"
              >${y.f}</paper-button
            >`:""}
        ${0!==this.started?s.c`<paper-button @click="${this.debugg}">
              ${1==this.started?y.c:y.j}</paper-button
            >`:""}
        <paper-button @click="${this.save}">${y.i}</paper-button>
        <paper-button @click="${this.refresh}">${y.h}</paper-button>
      </div>
      <div style="grid-column:1 / 3; border-bottom: 1px solid black;">
        ${this.debugged_line>0?"Current Line: "+this.debugged_line:""}
      </div>
      <div>
        <h3>MatrioshTS</h3>
        <textarea id="pascaltext"></textarea>
      </div>
      <div id="container-3D">
        <h3>Traduccion</h3>
        <textarea id="code3D"></textarea>
      </div>
      <custom-simple-modal id="modal"></custom-simple-modal>
    `}async translate(){let e;window.limpiarTodo();try{e=k.a.parse(this.src)}catch(e){window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores}))}if(!e)return;let t=e.traducir();e.graficarArbol2(),window.dispatchEvent(new CustomEvent("graficar-tree",{detail:window.strArbol})),this.set3D(window.strFunciones+t),window.errores.length>0&&window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores}))}async interpret(){let e;window.limpiarTodo();try{e=k.a.parse(this.src)}catch(e){window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores}))}if(!e)return;window.tablaSimbolos=new class{constructor(e){this.listaAmbitos=[],this.listaAmbitos.push(new w.a("Global"))}declararFunciones(e){e.hijos.forEach(e=>{"DECLAFUNCION"==e.token&&e.ejecutar()})}buscarFuncionDecla(e,t,i,r){let o;for(let s=this.listaAmbitos.length-1;s>=0;s--)if(o=this.listaAmbitos[s].buscarFuncionDecla(e,t,i,r),null!=o)return o;return null}buscarFuncionLlamada(e,t,i){let r;for(let o=this.listaAmbitos.length-1;o>=0;o--)if(r=this.listaAmbitos[o].buscarFuncionLlamada(e,t,i),null!=r)return r;return null}meterFuncion(e,t,i,r,o){return null==this.buscarFuncionDecla(e,t,i,o)&&(this.listaAmbitos[this.listaAmbitos.length-1].meterFuncion(e,t,i,r,o),!0)}buscarVariableSoloNombre(e){let t=this.listaAmbitos[this.listaAmbitos.length-1],i=this.listaAmbitos[0];if(t.esAnidada){let r;return this.listaAmbitos.length<1?null:1==this.listaAmbitos.length?t.buscarVariableSoloNombre(e):2==this.listaAmbitos.length?(r=t.buscarVariableSoloNombre(e),null!=r?r:i.buscarVariableSoloNombre(e)):(r=t.buscarVariableSoloNombre(e),null!=r?r:(r=this.listaAmbitos[this.listaAmbitos.length-2].buscarVariableSoloNombre(e),null!=r?r:i.buscarVariableSoloNombre(e)))}{let r;return this.listaAmbitos.length<1?null:1==this.listaAmbitos.length?t.buscarVariableSoloNombre(e):2==this.listaAmbitos.length?(r=t.buscarVariableSoloNombre(e),null!=r?r:i.buscarVariableSoloNombre(e)):(r=t.buscarVariableSoloNombre(e),null!=r?r:(r=this.listaAmbitos[this.listaAmbitos.length-2].buscarVariableSoloNombre(e),null!=r?r:i.buscarVariableSoloNombre(e)))}}buscarVariableSoloNombreLocal(e){return this.listaAmbitos[this.listaAmbitos.length-1].buscarVariableSoloNombre(e)}buscarVariable(e,t,i,r){let o=null;return 1==this.listaAmbitos.length?(o=this.listaAmbitos[0].buscarVariable(e,t,r,i),o):2==this.listaAmbitos.length?(o=this.listaAmbitos[1].buscarVariable(e,t,r,i),null!=o||(o=this.listaAmbitos[0].buscarVariable(e,t,r,i)),o):this.listaAmbitos.length>2?(o=this.listaAmbitos[this.listaAmbitos.length-1].buscarVariable(e,t,r,i),null!=o||(o=this.listaAmbitos[0].buscarVariable(e,t,r,i)),o):null}meterVariable(e,t,i,r,o,s,a){return null==this.buscarVariableSoloNombreLocal(t)&&(this.listaAmbitos[this.listaAmbitos.length-1].meterVariable(e,t,i,r,o,s,a),!0)}meterAmbitoFuerte(e){this.listaAmbitos.push(new w.a(e))}meterAmbitoFuerte(e,t){let i=new w.a(e);i.setAnidada(t),this.listaAmbitos.push(i)}sacarAmbitoFuerte(){this.listaAmbitos.pop()}meterAmbitoDebil(){this.listaAmbitos[this.listaAmbitos.length-1].meterAmbitoSuave()}sacarAmbitoDebil(){this.listaAmbitos[this.listaAmbitos.length-1].sacarAmbitoSuave()}graficarTabla(){let e="";return e+=" _______________________________________________________________________________________________\n",e+="|____CAMBIO_____|______ID_______|____AMBITO_____|______TIPO_____|______DIMS_____|_______ROL_____|\n",this.listaAmbitos.forEach(t=>{e+=t.graficarTabla()}),e+="|_______________|_______________|_______________|_______________|_______________|_______________|\n",e}graficarTabla2(){let e=[];this.listaAmbitos.forEach(t=>{e=e.concat(t.graficarTabla2())}),window.dispatchEvent(new CustomEvent("graficar-tabla",{detail:e}))}}(e),window.tablaObjetos=new class{constructor(){this.listaObjetos=[]}getLista(){return this.listaObjetos}buscarObjeto(e){for(let t=0;t<this.listaObjetos.length;t++)if(this.listaObjetos[t].nombre==e)return this.listaObjetos[t];return null}meterObjeto(e){return null==this.buscarObjeto(e.nombre)&&(this.listaObjetos.push(e),!0)}};let t=e.traducir();this.set3D(window.strFunciones+t),e.ejecutar3(),e.ejecutar2(),window.esAnidada=!0,e.ejecutar(),window.tablaSimbolos.graficarTabla2(),e.graficarArbol(),window.dispatchEvent(new CustomEvent("graficar-tree",{detail:window.strArbol})),window.errores.length>0&&window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores}))}sleep(e){return new Promise(t=>setTimeout(t,e))}setBreakPoint(e,t){if(t)this.breakPoints.push(e+1),this.breakPoints.sort();else{const t=this.breakPoints.indexOf(e+1);this.breakPoints.splice(t,1),this.breakPoints.sort(),x.setBreakPoint(this.breakPoints)}}makeMarker(){const e=document.createElement("div");return e.style.color="#822",e.innerHTML="●",e}set3D(e){this.codigo3D=e,this.code_editor_3D.setValue(e)}refresh(){this.breakPoints=[],x.setBreakPoint(this.breakPoints),Array.from(this.$$$(".highlight-class")).forEach(e=>e.classList.remove("highlight-class"))}highLight(e){const t=Array.from(this.$$$("#container-3D .CodeMirror-linenumber.CodeMirror-gutter-elt")).find(t=>Number(t.textContent)==e);t&&t.parentNode.parentNode.classList.add("highlight-class"),this.debugged_line=e}debugg(){this.started=1,Array.from(this.$$$(".highlight-class")).forEach(e=>e.classList.remove("highlight-class")),x.onResolve(!0)}graphViz(e){this.graph=`Digraph G {\n            ${e.writeNode()}\n        }`,this.fire("graphviz-generated",this.graph)}openFile(e){this.name=e,this.src=this.files[e].src,this.code_editor.setValue(this.src),this.requestUpdate()}setVarGlobal(){Backend.VarFlag=this._("varglobal").value()}copyToClipboard(){const e=document.createElement("textarea");e.value=this.optCode,document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e)}}customElements.define("editor-cql",A);const E=class extends s.a{_animation(e,t=null){if(this.disabled)return;let i=null!=e&&e.currentTarget.parentNode.parentNode||t;i.classList.toggle("active"),this.classList.toggle("active");let r=i.nextElementSibling;null!==r&&(r.classList.contains("hide")?r.classList.toggle("hide"):setTimeout(()=>r.classList.toggle("hide"),500),r.classList.toggle("chosen"))}close(e=null){let t=null!==e?e.currentTarget:this.$$(".accordion");this._animation(null,t)}open(){let e=this.disabled;this.disabled=!1,this.close(),this.disabled=e}};customElements.define("custom-accordion",class extends E{static get properties(){return{disabled:{type:Boolean}}}static get styles(){return[o.a,s.b`
                div:first-child {
                    width: 100%;
                    display: grid;
                    grid-template-columns: minmax(0,0.9fr) minmax(0,0.1fr);
                }

                div.panel{
                    background: var(--secondary-background-color);
                    width: 100%;
                    display: flex;
                    flex-direction: row;
                    flex-wrap: wrap;
                    align-items: center;
                    align-content: center;
                    justify-content: space-between;
                }

                button {
                    background: transparent;
                    border: none;
                    outline: none;
                    fill: var(--disabled-color);
                }

                .active span:first-child, span:nth-child(2){
                    display:none
                }

                .active span:nth-child(2), span:first-child{
                    display: block;
                }

                slot[name="title-box"]::slotted(label){ 
                    margin-left: 16px; 
                }

                @media (max-width:440px){
                    div:first-child {
                        grid-template-columns: minmax(0,0.75fr) minmax(0,0.25fr);
                    }
                }

                @media (max-width:840px){
                    div.panel {
                        flex-direction: column;
                        flex-wrap: initial;
                    }
                    
                    ::slotted(:last-child){
                        margin-bottom:12.5px;
                    }
                }

                :host([no-header]) div.panel{
                    border-radius: 5px;
                }
                
                :host([no-hover]) .accordion:hover, :host([no-hover]) .panel, :host([no-hover]) .accordion.active{
                    border-radius: 0;
                }
                
                :host([no-options]) .accordion{
                    display: none;
                }
                
                :host([no-shadow]) div.panel{
                    box-shadow: none;
                    background: transparent;
                    padding: 0;
                }`]}render(){return s.c`
            <div class="accordion">
                <slot name="title-box">
                </slot>
                <slot name="icons-box">
                    <button @click="${this._animation}">
                        <span>${y.g}</span>
                        <span>${y.e}</span>
                    </button>
                </slot>
            </div>
            <div class="panel chosen hide">
                <slot name="panel-box">
                <div style="text-align: center;">Nada que mostrar!</div>
                </slot>
            </div>
        `}constructor(){super(),this.disabled=!1}});class S extends s.a{constructor(){super(),window.File&&window.FileReader&&window.FileList&&window.Blob||alert("The File APIs are not fully supported in this browser."),this.output={}}static get styles(){return[s.b`
        :host {
          height: fit-content;
          display: block;
          padding: 25px;
          width: 100%;
        }

        input {
          margin: auto;
          display: block;
          outline: none;
        }

        .objects{
          cursor: pointer;
          margin-top: 10px;
        }

        .objects > div{
            background: var(--default-primary-color);
            padding: 5px;
            color: white;
        }

        .objects > div:first-child{
          border-top-left-radius: 5px;
          border-top-right-radius: 5px;
        }

        .objects > div:last-child{
          border-bottom-left-radius: 5px;
          border-bottom-right-radius: 5px;
        }

        .objects > div:hover{
          background: var(--accent-color);
          transition: 250 ease-in;
          font-size: 2em;
          height: 36px;
        }

        span{
          float: right;
          display:block;
          padding: 1px 8px;
          box-sizing: border-box;
        }

        span:hover{
          color: var(--accent-color);
          background: white;
          border-radius:5px;
          transition: 250 ease-in;
          font-weight: bolder;
        }
      `]}static get properties(){return{output:{type:Object}}}render(){return s.c`<input type="file" webkitdirectory="" directory="" @change=${this.handleFileSelect}>
                <div class="objects"> ${this.isObjectEmpty(this.output)?"":Object.keys(this.output).map(e=>s.c`
                    <div @dblclick=${this.openFile} key="${e}">
                      ${e}
                      <span @click=${this.deleteFile} key="${e}">X</span>
                    </div>`)}
                </div>`}deleteFile(e){delete this.output[e.currentTarget.getAttribute("key")],this.requestUpdate(),this.fire("update-import",this.output)}openFile(e){this.fire("open-file",e.currentTarget.getAttribute("key"))}handleFileSelect(e){const t=[],i=this;for(const r of Array.from(e.target.files))r.webkitRelativePath.includes(".j")&&(t.push(new FileReader),t[t.length-1].addEventListener("load",(function(e){const t=r.webkitRelativePath.split("/")[0];i.output[r.name.toLowerCase()]={src:e.target.result,relative:r.webkitRelativePath.split(t).join("."),name:r.name.toLowerCase().split(".")[0],parsed:!1},i.requestUpdate(),i.fire("update-import",i.output)})),t[t.length-1].readAsText(r))}}customElements.define("import-component",S);class C extends r.a{static get styles(){return[o.f,o.d,a,...super.styles,s.b`
        :host {
          --paper-tabs-selection-bar-color: var(--light-primary-color);
          --iron-icon-fill-color: var(--dark-primary-color);
        }

        custom-accordion {
          width: 95%;
          margin: auto;
          background: white;
          box-shadow: var(--shadow-box-2dp-custom);
          border-radius: 5px;
          margin: 5px auto;
        }

        textarea {
          background: blue;
          color: white;
          width: 100%;
          height: 1000px;
          outline: none;
          border: 0;
        }

        paper-tab.iron-selected {
          background: var(--accent-color);
          color: var(--light-primary-color);
          fill: var(--light-primary-color);
        }

        paper-tab {
          width: 30%;
          max-width: 30%;
          min-width: 30%;
          background: var(--dark-primary-color);
          color: white;
          fill: white;
          border-radius: 5px 5px 0 0;
        }

        paper-tab:not(:last-child) {
          margin: 2px;
        }

        #plus-paper-tab {
          width: 50px;
          min-width: 50px;
          max-width: 50px;
        }

        paper-tab:hover {
          background: var(--accent-color);
          color: var(--light-primary-color);
          fill: var(--light-primary-color);
        }

        paper-tabs {
          width: 90% !important;
          margin: auto;
        }

        paper-tab span {
          position: absolute;
          right: 0;
          top: 11px;
        }
      `]}static get properties(){return{information:{type:Object},errors:{type:Array},graph:{type:String},blockgraph:{type:String},files:{type:Object},selected:{type:Number},windows:{type:Array},current:{type:Number}}}render(){return s.c`
      <custom-accordion id="import">
        <label style="line-height: 1.75;" slot="title-box"
          >Carpeta para importar</label
        >
        <import-component
          slot="panel-box"
          @update-import=${this.updateData}
          @open-file="${this.open}"
        ></import-component>
      </custom-accordion>
      <paper-tabs scrollable fit-container .selected="${this.selected}">
        ${this.windows.map((e,t)=>s.c`<paper-tab idx="${t}" @click="${this.selectTab}"
              >${e}${0===t?"":s.c`<span idx="${t}" @click=${this.close}
                    >${y.a}</span
                  >`}</paper-tab
            >`)}
        <paper-tab @click="${this.newTab}" id="plus-paper-tab"
          >${y.g}</paper-tab
        >
      </paper-tabs>
      <iron-pages .selected="${this.selected}">
        ${this.windows.map(e=>s.c`<editor-cql
            @info-setted="${this.setInfo}"
            @graphviz-generated="${this.changeGraph}"
            .files=${this.files}
            @blockgraph-generated="${this.changeBlockGraph}"
          ></editor-cql>`)}
      </iron-pages>
      <console-element
        .information=${this.information}
        .errors="${this.errors}"
        .graph="${this.graph}"
        .blockgraph="${this.blockgraph}"
      ></console-element>
    `}updateData(e){this.files=e.detail,this.requestUpdate()}open(e){this.$$$("editor-cql")[this.selected].openFile(e.detail)}setInfo(e){this.information=e.detail.symtab,this.errors=e.detail.errors,this.requestUpdate()}selectTab(e){this.selected=Number(e.currentTarget.getAttribute("idx"))}newTab(){this.windows.push(`New${this.current++}.ts`),this.requestUpdate()}constructor(){super(),this.information={},this.files={},this.errors=[],this.graph="",this.selected=0,this.windows=["New0.j"],this.current=1}changeGraph(e){this.graph=e.detail}changeBlockGraph(e){this.blockgraph=e.detail}close(e){e.preventDefault(),this.windows.splice(Number(e.currentTarget.getAttribute("idx")),1),setTimeout(()=>{this.selected=this.windows.length-1},250)}}window.customElements.define("primary-view",C)}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,