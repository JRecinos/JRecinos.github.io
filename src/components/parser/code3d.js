
import { AstNode } from "./ast/ast-node.js";/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var code3d = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,20],$V2=[1,18],$V3=[1,17],$V4=[1,19],$V5=[1,14],$V6=[1,24],$V7=[1,13],$V8=[1,15],$V9=[1,25],$Va=[1,21],$Vb=[1,22],$Vc=[5,17,18,20,22,26,28,29,31,43,46,53,55,57],$Vd=[1,68],$Ve=[1,69],$Vf=[1,70],$Vg=[1,71],$Vh=[1,72],$Vi=[1,73],$Vj=[8,27],$Vk=[1,94],$Vl=[1,95],$Vm=[1,96],$Vn=[1,97],$Vo=[1,98],$Vp=[24,28],$Vq=[18,20,24,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"STMT_LIST":4,"EOF":5,"STMT":6,"CALL_STMT":7,"puntoycoma":8,"TMP_STMT":9,"JMP_STMT":10,"HEAP_STMT":11,"STACK_STMT":12,"PRINT_STMT":13,"METHOD_DECL_STMT":14,"LABEL_STMT":15,"DECL_STMT":16,"cast":17,"sp":18,"E":19,"hp":20,"TMP_LIST":21,"heap":22,"squarel":23,"number":24,"squarer":25,"stack":26,"comma":27,"tmp":28,"label":29,"colon":30,"identifier":31,"lpar":32,"rpar":33,"eq":34,"OPERATOR":35,"fmod":36,"ERROR_ASSIGN":37,"plus":38,"min":39,"div":40,"mod":41,"mult":42,"goto":43,"IFINIT":44,"GOTO_OP":45,"if":46,"gotoeq":47,"gotoneq":48,"gotogt":49,"gotogte":50,"gotolt":51,"gotolte":52,"printf":53,"parameter":54,"void":55,"llaveabre":56,"return":57,"llavecierra":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"puntoycoma",17:"cast",18:"sp",19:"E",20:"hp",22:"heap",23:"squarel",24:"number",25:"squarer",26:"stack",27:"comma",28:"tmp",29:"label",30:"colon",31:"identifier",32:"lpar",33:"rpar",34:"eq",36:"fmod",38:"plus",39:"min",40:"div",41:"mod",42:"mult",43:"goto",46:"if",47:"gotoeq",48:"gotoneq",49:"gotogt",50:"gotogte",51:"gotolt",52:"gotolte",53:"printf",54:"parameter",55:"void",56:"llaveabre",57:"return",58:"llavecierra"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[16,2],[16,2],[16,2],[16,2],[16,5],[16,5],[21,3],[21,1],[15,3],[15,2],[7,3],[9,3],[9,3],[9,3],[9,3],[9,6],[9,6],[9,6],[9,9],[9,9],[9,9],[9,6],[9,6],[9,6],[9,9],[9,9],[9,9],[9,5],[9,5],[9,5],[9,5],[9,5],[9,5],[9,5],[9,5],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[37,3],[35,1],[35,1],[35,1],[35,1],[35,1],[11,6],[11,6],[11,6],[11,6],[11,9],[11,9],[11,9],[11,9],[11,6],[11,6],[11,6],[11,6],[11,9],[11,9],[11,9],[11,9],[11,5],[11,5],[11,8],[11,8],[12,6],[12,6],[12,6],[12,6],[12,9],[12,9],[12,9],[12,9],[12,6],[12,6],[12,6],[12,6],[12,9],[12,9],[12,9],[12,9],[12,5],[12,5],[12,5],[12,5],[12,8],[12,8],[12,8],[12,8],[10,2],[10,8],[10,6],[10,8],[10,6],[10,8],[10,6],[10,8],[10,6],[44,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[13,6],[13,9],[13,6],[13,9],[14,9],[14,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			Root = $$[$0-1];
            this.$ = $$[$0-1];
        
break;
case 2:

			$$[$0-1].setNext($$[$0]);
		
break;
case 3:

			this.$ = $$[$0];
		
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 12:

		this.$ = $$[$0-1];
	
break;
case 10: case 11: case 57: case 58: case 59: case 60: case 61: case 116: case 117: case 118: case 119: case 120: case 121:

		this.$ = $$[$0];
	
break;
case 13:

		this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("sp", null, _$[$0].first_line,_$[$0].first_column)
						);
	
break;
case 14:

		this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("e", null, _$[$0].first_line,_$[$0].first_column)
						);
	
break;
case 15:

			this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("hp", null, _$[$0].first_line,_$[$0].first_column)
					);
	
break;
case 16:

		this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column);
		$$[$0].forEach(el=>this.$.addChild(el));
	
break;
case 17:

			this.$ = new AstNode("var",null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column)
				);
	
break;
case 18:

			this.$ = new AstNode("var",null, _$[$0-2].first_line,_$[$0-2].first_column,
				new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column)
			);
	
break;
case 19:

		this.$ = $$[$0-2];
		this.$.push(new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column));
	
break;
case 20:

		this.$ = [
			new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
		]
	
break;
case 21:

		$$[$0-2].next = new AstNode("label",$$[$0],_$[$0].first_line, _$[$0].first_column);
		this.$ = $$[$0-2];
	
break;
case 22:

		this.$ = new AstNode("label", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
	
break;
case 23:

		this.$ = new AstNode("call", $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column );
	
break;
case 24:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
						);
	
break;
case 25:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
						);
	
break;
case 26:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("sp", null, _$[$0].first_line,_$[$0].first_column)
						);
	
break;
case 27:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("hp", null, _$[$0].first_line,_$[$0].first_column)
						);
	
break;
case 28:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("number",parseFloat($$[$0-1]),_$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 29:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 30:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 31:

		this.$ = new AstNode("=", null, _$[$0-7].first_line,_$[$0-7].first_column,
					new AstNode("tmp",$$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column),
					new AstNode("stack",null,_$[$0-6].first_line, _$[$0-6].first_column,
						new AstNode("number",parseFloat($$[$0-1]),_$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 32:

		this.$ = new AstNode("=", null, _$[$0-7].first_line,_$[$0-7].first_column,
					new AstNode("tmp",$$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column),
					new AstNode("stack",null,_$[$0-6].first_line, _$[$0-6].first_column,
						new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 33:

		this.$ = new AstNode("=", null, _$[$0-7].first_line,_$[$0-7].first_column,
					new AstNode("tmp",$$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column),
					new AstNode("stack",null,_$[$0-6].first_line, _$[$0-6].first_column,
						new AstNode("sp", null, _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 34:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("number",parseFloat($$[$0-1]),_$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 35:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 36:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("hp", null, _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 37:

		this.$ = new AstNode("=", null, _$[$0-7].first_line,_$[$0-7].first_column,
					new AstNode("tmp",$$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column),
					new AstNode("heap",null,_$[$0-6].first_line, _$[$0-6].first_column,
						new AstNode("number",parseFloat($$[$0-1]),_$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 38:

		this.$ = new AstNode("=", null, _$[$0-7].first_line,_$[$0-7].first_column,
					new AstNode("tmp",$$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column),
					new AstNode("heap",null,_$[$0-6].first_line, _$[$0-6].first_column,
						new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 39:

		this.$ = new AstNode("=", null, _$[$0-7].first_line,_$[$0-7].first_column,
					new AstNode("tmp",$$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column),
					new AstNode("heap",null,_$[$0-6].first_line, _$[$0-6].first_column,
						new AstNode("hp", null, _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);

	
break;
case 40:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 41:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 42:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 43:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column),
							)
						);
	
break;
case 44:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("sp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 45:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("sp", null, _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 46:

		this.$ = new AstNode("=",null, _$[$0-4].first_line,_$[$0-4].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 47:

		this.$ = new AstNode("=",null, _$[$0-4].first_line,_$[$0-4].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("hp", null, _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 48:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 49:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("tmp", $$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 50:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("tmp", $$[$0-3], _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("tmp", $$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 51:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("tmp", $$[$0-3], _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column),
							)
						);
	
break;
case 52:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("sp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 53:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("sp", null, _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 54:

		this.$ = new AstNode("=",null, _$[$0-7].first_line,_$[$0-7].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("hp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 55:

		this.$ = new AstNode("=",null, _$[$0-7].first_line,_$[$0-7].first_column,
						new AstNode("tmp", $$[$0-7], _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("hp", null, _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 56:

	this.$ = new AstNode("=",null,_$[$0-1].first_line,_$[$0-1].first_column,
				new AstNode("E",null, _$[$0-2].first_line,_$[$0-2].first_column),
				new AstNode("number", parseFloat(number), _$[$0].first_line, _$[$0].first_column)
			)

break;
case 62:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 63:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 64:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 65:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 66:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 67:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 68:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 69:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 70:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp",null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 71:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 72:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 73:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 74:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp",null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 75:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 76:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 77:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("heap",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 78:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("hp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 79:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("hp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 80:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("hp", null, _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("hp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 81:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("hp", null, _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("hp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("tmp", $$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 82:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number",parseFloat($$[$0]),_$[$0].first_line, _$[$0].first_column)
				);

	
break;
case 83:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 84:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0],_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 85:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]),_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 86:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number",parseFloat($$[$0]),_$[$0].first_line, _$[$0].first_column)
				);

	
break;
case 87:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 88:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0],_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 89:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]),_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 90:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp",null,_$[$0].first_line, _$[$0].first_column)
				);

	
break;
case 91:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 92:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null ,_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 93:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null,_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 94:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp",null,_$[$0].first_line, _$[$0].first_column)
				);

	
break;
case 95:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null, _$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 96:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null ,_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 97:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("stack",null,_$[$0-8].first_line, _$[$0-8].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null,_$[$0].first_line, _$[$0].first_column)
				);
	
break;
case 98:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
							new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
							new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
								new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
								new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 99:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 100:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("sp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 101:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("sp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);
	
break;
case 102:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
							new AstNode("sp", null, _$[$0-7].first_line,_$[$0-7].first_column),
							new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
								new AstNode("hp", null, _$[$0-3].first_line,_$[$0-3].first_column),
								new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 103:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("sp", null, _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line, _$[$0-4].first_column,
							new AstNode("hp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("tmp", $$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 104:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("sp", null, _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("sp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 105:

		this.$ = new AstNode("=",null, _$[$0-6].first_line,_$[$0-6].first_column,
						new AstNode("sp", null, _$[$0-7].first_line,_$[$0-7].first_column),
						new AstNode("%", null, _$[$0-4].first_line,_$[$0-4].first_column,
							new AstNode("sp", null, _$[$0-3].first_line,_$[$0-3].first_column),
							new AstNode("tmp", $$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column)
							)
						);
	
break;
case 106:

		this.$ = new AstNode($$[$0-1],
						 $$[$0],
						 _$[$0-1].first_line,
						 _$[$0-1].first_column);

	
break;
case 107:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("number",parseFloat($$[$0-5]), _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("tmp", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()
	
break;
case 108:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("number",parseFloat($$[$0-4]), _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("tmp", $$[$0-2], _$[$0-1].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()
	
break;
case 109:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()
	
break;
case 110:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("tmp",$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()
	
break;
case 111:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("tmp", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()
	
break;
case 112:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("tmp",$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("tmp", $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()
	
break;
case 113:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("number", parseFloat($$[$0-5]), _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()
	
break;
case 114:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("number", parseFloat($$[$0-4]), _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()
	
break;
case 115:

		this.$ = false
	
break;
case 122:

		this.$ = new AstNode($$[$0-5], $$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column,
				new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
			);
	
break;
case 123:

		this.$ = new AstNode($$[$0-8], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column,
				new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
			);
	
break;
case 124:

		this.$ = new AstNode($$[$0-5], $$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column,
				new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column)
			);
	
break;
case 125:

		this.$ = new AstNode($$[$0-8], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column,
				new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column)
			);
	
break;
case 126: case 127:

		let begin_node = new AstNode("begin",null,_$[$0-6].first_line, _$[$0-6].first_column);
		begin_node.setNext($$[$0-3]);
		begin_node.setNext(new AstNode("end",null,_$[$0-4].first_line, _$[$0-4].first_column));
		this.$ = new AstNode("method", $$[$0-7], _$[$0-7].first_line, _$[$0-7].first_column, begin_node);
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:$V1,20:$V2,22:$V3,26:$V4,28:$V5,29:$V6,31:$V7,43:$V8,44:16,46:$V9,53:$Va,55:$Vb},{1:[3]},{5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:$V1,20:$V2,22:$V3,26:$V4,28:$V5,29:$V6,31:$V7,43:$V8,44:16,46:$V9,53:$Va,55:$Vb},o($Vc,[2,3]),{8:[1,28]},{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},o($Vc,[2,10]),o($Vc,[2,11]),{8:[1,34]},{32:[1,35]},{34:[1,36]},{29:[1,37]},{24:[1,39],28:[1,40],32:[1,38]},{23:[1,41]},{34:[1,42]},{23:[1,43]},{34:[1,44]},{32:[1,45]},{31:[1,46]},{18:[1,48],19:[1,49],20:[1,50],21:51,22:[1,52],26:[1,53],28:[1,54],31:[1,47]},{27:[1,55],30:[1,56]},o([24,28,32],[2,115]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,12]),{33:[1,57]},{18:[1,60],20:[1,61],22:[1,63],24:[1,59],26:[1,62],28:[1,58],36:[1,64]},{8:[2,106]},{24:[1,65],28:[1,66]},{45:67,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi},{45:74,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi},{20:[1,76],28:[1,75],32:[1,77]},{20:[1,78],36:[1,79]},{18:[1,81],28:[1,80],32:[1,82]},{18:[1,84],20:[1,83],36:[1,85]},{54:[1,86]},{32:[1,87]},{32:[1,88]},{8:[2,13]},{8:[2,14]},{8:[2,15]},{8:[2,16],27:[1,89]},{23:[1,90]},{23:[1,91]},o($Vj,[2,20]),{15:92,29:$V6},o($Vc,[2,22]),{8:[2,23]},{8:[2,24],35:93,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{8:[2,25],35:99,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{8:[2,26],35:100,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{8:[2,27],35:101,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{23:[1,102]},{23:[1,103]},{32:[1,104]},{45:105,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi},{45:106,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi},{24:[1,108],28:[1,107]},o($Vp,[2,116]),o($Vp,[2,117]),o($Vp,[2,118]),o($Vp,[2,119]),o($Vp,[2,120]),o($Vp,[2,121]),{24:[1,109],28:[1,110]},{25:[1,111]},{25:[1,112]},{17:[1,113]},{35:114,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{32:[1,115]},{25:[1,116]},{25:[1,117]},{17:[1,118]},{35:119,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{35:120,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo},{32:[1,121]},{27:[1,122]},{33:[1,123]},{33:[1,124]},{28:[1,125]},{24:[1,126]},{24:[1,127]},o($Vc,[2,21]),{24:[1,129],28:[1,128]},o($Vq,[2,57]),o($Vq,[2,58]),o($Vq,[2,59]),o($Vq,[2,60]),o($Vq,[2,61]),{18:[1,132],20:[1,133],24:[1,130],28:[1,131]},{24:[1,134]},{24:[1,135]},{18:[1,138],24:[1,136],28:[1,137],32:[1,139]},{20:[1,142],24:[1,140],28:[1,141],32:[1,143]},{18:[1,146],20:[1,147],24:[1,144],28:[1,145]},{24:[1,149],28:[1,148]},{24:[1,150],28:[1,151]},{43:[1,152]},{43:[1,153]},{43:[1,154]},{43:[1,155]},{34:[1,156]},{34:[1,157]},{33:[1,158]},{24:[1,159],28:[1,160]},{20:[1,161]},{34:[1,162]},{34:[1,163]},{33:[1,164]},{24:[1,165],28:[1,166]},{24:[1,167],28:[1,168]},{18:[1,170],20:[1,169]},{24:[1,173],28:[1,171],32:[1,172]},{56:[1,174]},{56:[1,175]},o($Vj,[2,19]),{25:[1,176]},{25:[1,177]},{8:[2,42]},{8:[2,43]},{8:[2,40]},{8:[2,41]},{8:[2,45]},{8:[2,47]},{8:[2,44]},{8:[2,46]},{25:[1,178]},{25:[1,179]},{25:[1,180]},{17:[1,181]},{25:[1,182]},{25:[1,183]},{25:[1,184]},{17:[1,185]},{27:[1,186]},{27:[1,187]},{27:[1,188]},{27:[1,189]},{33:[1,190]},{33:[1,191]},{33:[1,192]},{33:[1,193]},{29:[1,194]},{29:[1,195]},{29:[1,196]},{29:[1,197]},{18:[1,201],20:[1,200],24:[1,198],28:[1,199]},{18:[1,205],20:[1,204],24:[1,202],28:[1,203]},{20:[1,207],28:[1,206]},{8:[2,78]},{8:[2,79]},{27:[1,208]},{18:[1,211],20:[1,212],24:[1,209],28:[1,210]},{18:[1,215],20:[1,216],24:[1,214],28:[1,213]},{18:[1,218],28:[1,217]},{8:[2,98]},{8:[2,99]},{8:[2,100]},{8:[2,101]},{27:[1,219]},{27:[1,220]},{33:[1,221]},{17:[1,222]},{33:[1,223]},{4:224,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:$V1,20:$V2,22:$V3,26:$V4,28:$V5,29:$V6,31:$V7,43:$V8,44:16,46:$V9,53:$Va,55:$Vb},{4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:$V1,20:$V2,22:$V3,26:$V4,28:$V5,29:$V6,31:$V7,43:$V8,44:16,46:$V9,53:$Va,55:$Vb},{8:[2,17]},{8:[2,18]},{8:[2,28]},{8:[2,29]},{8:[2,30]},{33:[1,226]},{8:[2,34]},{8:[2,35]},{8:[2,36]},{33:[1,227]},{18:[1,230],20:[1,231],24:[1,228],28:[1,229]},{24:[1,233],28:[1,232]},{24:[1,234]},{24:[1,235]},{43:[1,236]},{43:[1,237]},{43:[1,238]},{43:[1,239]},{8:[2,108]},{8:[2,114]},{8:[2,110]},{8:[2,112]},{8:[2,62]},{8:[2,64]},{8:[2,70]},{8:[2,72]},{8:[2,63]},{8:[2,65]},{8:[2,71]},{8:[2,73]},{25:[1,240]},{25:[1,241]},{24:[1,242],28:[1,243]},{8:[2,82]},{8:[2,83]},{8:[2,90]},{8:[2,91]},{8:[2,84]},{8:[2,85]},{8:[2,92]},{8:[2,93]},{25:[1,244]},{25:[1,245]},{24:[1,246],28:[1,247]},{24:[1,248],28:[1,249]},{8:[2,122]},{33:[1,250]},{8:[2,124]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:$V1,20:$V2,22:$V3,26:$V4,28:$V5,29:$V6,31:$V7,43:$V8,44:16,46:$V9,53:$Va,55:$Vb,57:[1,251]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:$V1,20:$V2,22:$V3,26:$V4,28:$V5,29:$V6,31:$V7,43:$V8,44:16,46:$V9,53:$Va,55:$Vb,57:[1,252]},{18:[1,255],24:[1,253],28:[1,254]},{20:[1,258],24:[1,256],28:[1,257]},{33:[1,259]},{33:[1,260]},{33:[1,261]},{33:[1,262]},{33:[1,263]},{33:[1,264]},{33:[1,265]},{33:[1,266]},{29:[1,267]},{29:[1,268]},{29:[1,269]},{29:[1,270]},{34:[1,271]},{34:[1,272]},{33:[1,273]},{33:[1,274]},{34:[1,275]},{34:[1,276]},{33:[1,277]},{33:[1,278]},{33:[1,279]},{33:[1,280]},{24:[1,282],28:[1,281]},{8:[1,283]},{8:[1,284]},{25:[1,285]},{25:[1,286]},{25:[1,287]},{25:[1,288]},{25:[1,289]},{25:[1,290]},{8:[2,48]},{8:[2,49]},{8:[2,53]},{8:[2,55]},{8:[2,50]},{8:[2,51]},{8:[2,52]},{8:[2,54]},{8:[2,107]},{8:[2,113]},{8:[2,109]},{8:[2,111]},{18:[1,294],20:[1,293],24:[1,291],28:[1,292]},{18:[1,298],20:[1,297],24:[1,295],28:[1,296]},{8:[2,80]},{8:[2,81]},{18:[1,301],20:[1,302],24:[1,299],28:[1,300]},{18:[1,305],20:[1,306],24:[1,304],28:[1,303]},{8:[2,102]},{8:[2,103]},{8:[2,104]},{8:[2,105]},{33:[1,307]},{33:[1,308]},{58:[1,309]},{58:[1,310]},{8:[2,31]},{8:[2,32]},{8:[2,33]},{8:[2,37]},{8:[2,38]},{8:[2,39]},{8:[2,66]},{8:[2,68]},{8:[2,74]},{8:[2,76]},{8:[2,67]},{8:[2,69]},{8:[2,75]},{8:[2,77]},{8:[2,86]},{8:[2,87]},{8:[2,94]},{8:[2,95]},{8:[2,88]},{8:[2,89]},{8:[2,96]},{8:[2,97]},{8:[2,123]},{8:[2,125]},o($Vc,[2,126]),o($Vc,[2,127])],
defaultActions: {26:[2,1],37:[2,106],48:[2,13],49:[2,14],50:[2,15],57:[2,23],128:[2,42],129:[2,43],130:[2,40],131:[2,41],132:[2,45],133:[2,47],134:[2,44],135:[2,46],159:[2,78],160:[2,79],165:[2,98],166:[2,99],167:[2,100],168:[2,101],176:[2,17],177:[2,18],178:[2,28],179:[2,29],180:[2,30],182:[2,34],183:[2,35],184:[2,36],194:[2,108],195:[2,114],196:[2,110],197:[2,112],198:[2,62],199:[2,64],200:[2,70],201:[2,72],202:[2,63],203:[2,65],204:[2,71],205:[2,73],209:[2,82],210:[2,83],211:[2,90],212:[2,91],213:[2,84],214:[2,85],215:[2,92],216:[2,93],221:[2,122],223:[2,124],259:[2,48],260:[2,49],261:[2,53],262:[2,55],263:[2,50],264:[2,51],265:[2,52],266:[2,54],267:[2,107],268:[2,113],269:[2,109],270:[2,111],273:[2,80],274:[2,81],277:[2,102],278:[2,103],279:[2,104],280:[2,105],285:[2,31],286:[2,32],287:[2,33],288:[2,37],289:[2,38],290:[2,39],291:[2,66],292:[2,68],293:[2,74],294:[2,76],295:[2,67],296:[2,69],297:[2,75],298:[2,77],299:[2,86],300:[2,87],301:[2,94],302:[2,95],303:[2,88],304:[2,89],305:[2,96],306:[2,97],307:[2,123],308:[2,125]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//importaciones
	

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */;
break;
case 1:/*skip comment*/;
break;
case 2:return "parameter";
break;
case 3:return 19
break;
case 4:return 29;
break;
case 5:return 28;
break;
case 6:return 24
break;
case 7:return 'call';
break;
case 8:return 20;
break;
case 9:return 18;
break;
case 10:return 22;
break;
case 11:return 26;
break;
case 12:return 46;
break;
case 13:return 34;
break;
case 14:return 27;
break;
case 15:return 8;
break;
case 16:return "plus";
break;
case 17:return "min";
break;
case 18:return "div";
break;
case 19:return "parameter";
break;
case 20:return "parameter";
break;
case 21:return "mod";
break;
case 22:return "mult";
break;
case 23:return "goto";
break;
case 24:return 'proc'
break;
case 25:return 36
break;
case 26:return "gotoeq";
break;
case 27:return "gotoneq";
break;
case 28:return "gotogt";
break;
case 29:return "gotolt";
break;
case 30:return "gotogte";
break;
case 31:return "gotolte";
break;
case 32:return "void";
break;
case 33:return "cast";
break;
case 34:return "cast";
break;
case 35:return "return";
break;
case 36:return "squarel";
break;
case 37:return "squarer";
break;
case 38:return "llaveabre";
break;
case 39:return "llavecierra";
break;
case 40:return "squarel";
break;
case 41:return "squarer";
break;
case 42:return "printf";
break;
case 43:return 32;
break;
case 44:return 33;
break;
case 45:return 30;
break;
case 46:return 31;
break;
case 47:return 'invalid';
break;
case 48:return 5;
break;
case 49:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[^\n]*)/i,/^(?:"%\.2f")/i,/^(?:E)/i,/^(?:[l][0-9]+)/i,/^(?:[t][0-9]+)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:call)/i,/^(?:H)/i,/^(?:P)/i,/^(?:Heap)/i,/^(?:Stack)/i,/^(?:if)/i,/^(?:=)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:"%c")/i,/^(?:"%d")/i,/^(?:%)/i,/^(?:\*)/i,/^(?:goto)/i,/^(?:proc)/i,/^(?:fmod)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:void)/i,/^(?:int)/i,/^(?:double)/i,/^(?:return)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:llaveabre)/i,/^(?:llavecierra)/i,/^(?:printf)/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:[_A-Za-z][_A-Za-z0-9]*)/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = code3d;
exports.Parser = code3d.Parser;
exports.parse = function () { return code3d.parse.apply(code3d, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
    export var Root = null;
    export {code3d};