/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traductor = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,32],$V2=[1,33],$V3=[1,20],$V4=[1,34],$V5=[1,30],$V6=[1,28],$V7=[1,29],$V8=[1,38],$V9=[1,35],$Va=[1,36],$Vb=[1,26],$Vc=[1,21],$Vd=[1,22],$Ve=[1,37],$Vf=[5,27,29,30,31,33,45,51,53,54,57,61,62,66,79,81,107],$Vg=[5,27,29,30,31,33,45,48,50,51,53,54,57,61,62,66,79,81,107],$Vh=[1,44],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[12,37],$Vm=[12,27,37,38,40,44,59,65,71,72,75,82,83,87,88,89,90,91,92,93,94,95,96,97,98],$Vn=[2,82],$Vo=[1,58],$Vp=[1,63],$Vq=[1,88],$Vr=[1,81],$Vs=[1,87],$Vt=[1,69],$Vu=[1,75],$Vv=[1,73],$Vw=[1,74],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[12,27,37,38,40,44,59,82,83,87,88,89,90,91,92,93,94,95,96,97,98],$VD=[12,40],$VE=[1,102],$VF=[1,123],$VG=[1,121],$VH=[1,122],$VI=[12,27,37,38,40,44,59,82,83],$VJ=[1,131],$VK=[1,132],$VL=[1,133],$VM=[1,134],$VN=[1,135],$VO=[1,136],$VP=[1,159],$VQ=[37,40,59],$VR=[5,27,29,30,31,33,45,48,50,51,53,54,56,57,61,62,66,79,81,107],$VS=[27,29,30,31,45,48,50,51,53,54,57,61,62,66,79,81,107],$VT=[1,196],$VU=[37,40],$VV=[1,201],$VW=[12,27,37,38,40,44,58,59,65,71,72,75,82,83,87,88,89,90,91,92,93,94,95,96,97,98],$VX=[12,27,37,38,40,44,59,82,83,87,88,89,90,91,92,93,94],$VY=[12,27,37,38,40,44,59,82,83,87,88,89,90,91,92,93,94,95,97],$VZ=[1,225],$V_=[27,40],$V$=[1,238],$V01=[12,26,27,37,40,58,65],$V11=[48,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIASF":4,"EOF":5,"SENTENCIAF":6,"SENTENCIAS":7,"SENTENCIA":8,"DECLAFUNCION":9,"IMPRIMIR":10,"DECLARACION":11,"puntoycoma":12,"ASIGNACION":13,"LISTARECURSIVA":14,"DEFOBJETO":15,"SENTIF":16,"SENTWHILE":17,"SENTDO":18,"SENTFOR":19,"SENTBREAK":20,"SENTCONTINUE":21,"SENTRETURN":22,"SENTSWITCH":23,"LLAMADAFUNCION":24,"BLOQUESENT":25,"llaveabre":26,"llavecierra":27,"BLOQUESENTF":28,"break":29,"continue":30,"return":31,"COND":32,"function":33,"ID":34,"parentesisabre":35,"LISTAPARAMS":36,"parentesiscierra":37,"dospuntos":38,"LISTADIMS":39,"coma":40,"PARAM":41,"LISTAEXP":42,"TERNARIO":43,"pregunta":44,"switch":45,"BLOQUESWITCH":46,"LISTACASE":47,"default":48,"CASE":49,"case":50,"for":51,"FORINIT":52,"while":53,"do":54,"IF_LIST":55,"else":56,"if":57,"corcheteabre":58,"corchetecierra":59,"TIPOCAMBIO":60,"const":61,"let":62,"LISTADECLA":63,"DECLAELEMENT":64,"igual":65,"type":66,"LISTAATRIBUTOS":67,"EXPOBJ":68,"LISTAATRIBUTOSDEF":69,"INCREMENTOS":70,"masmas":71,"menosmenos":72,"ELEMENTRECURSIVO":73,"LISTAACCESODIMS":74,"punto":75,"length":76,"pop":77,"push":78,"console":79,"log":80,"graficar_ts":81,"and":82,"or":83,"not":84,"REL":85,"EXP":86,"mayor":87,"menor":88,"menoroigual":89,"mayoroigual":90,"igualigual":91,"diferente":92,"+":93,"-":94,"*":95,"potencia":96,"/":97,"%":98,"ENTERO":99,"DECIMAL":100,"CADENA":101,"verdadero":102,"falso":103,"null":104,"undefined":105,"EXPARRAY":106,"IDENTIFICADOR":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"puntoycoma",26:"llaveabre",27:"llavecierra",29:"break",30:"continue",31:"return",33:"function",35:"parentesisabre",37:"parentesiscierra",38:"dospuntos",40:"coma",44:"pregunta",45:"switch",48:"default",50:"case",51:"for",53:"while",54:"do",56:"else",57:"if",58:"corcheteabre",59:"corchetecierra",61:"const",62:"let",65:"igual",66:"type",71:"masmas",72:"menosmenos",75:"punto",76:"length",77:"pop",78:"push",79:"console",80:"log",81:"graficar_ts",82:"and",83:"or",84:"not",87:"mayor",88:"menor",89:"menoroigual",90:"mayoroigual",91:"igualigual",92:"diferente",93:"+",94:"-",95:"*",96:"potencia",97:"/",98:"%",99:"ENTERO",100:"DECIMAL",101:"CADENA",102:"verdadero",103:"falso",104:"null",105:"undefined",107:"IDENTIFICADOR"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[25,3],[25,2],[28,3],[20,2],[21,2],[22,2],[22,3],[9,9],[9,8],[9,6],[9,8],[9,7],[9,5],[36,3],[36,1],[41,3],[41,4],[24,4],[24,3],[43,5],[23,5],[46,6],[47,2],[47,1],[49,4],[19,9],[52,1],[52,1],[17,5],[18,7],[16,3],[16,1],[55,7],[55,5],[39,3],[39,2],[60,1],[60,1],[11,2],[63,3],[63,1],[64,6],[64,4],[64,5],[64,3],[64,3],[64,1],[15,7],[67,6],[67,5],[67,4],[67,3],[68,3],[69,5],[69,3],[13,3],[13,1],[70,2],[70,2],[14,2],[14,1],[14,2],[73,2],[73,3],[73,2],[73,4],[73,5],[74,4],[74,3],[10,7],[10,4],[32,3],[32,3],[32,2],[32,1],[32,1],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,1],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,1],[86,1],[86,2],[86,1],[86,1],[86,1],[86,1],[86,1],[86,3],[86,1],[86,1],[86,1],[86,1],[86,1],[106,3],[106,2],[42,3],[42,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            return $$[$0-1];
        
break;
case 2:

            $$[$0-1].hijos.push($$[$0]);
        
break;
case 3:

            this.$ = new Sentencias ("SENTENCIAS", "SENTENCIAS", _$[$0], [$$[$0]]);
        
break;
case 4: case 44:

            $$[$0-1].hijos.push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 5:

            this.$ = new Sentencias ("SENTENCIAS","SENTENCIAS",_$[$0] , [$$[$0]]);
        
break;
case 6: case 7: case 8: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 48: case 49: case 53: case 78: case 96: case 97: case 104: case 120: case 121: case 122: case 123: case 124:

            this.$ = $$[$0];
        
break;
case 9: case 10: case 11: case 21: case 22: case 24: case 74: case 119:

            this.$ = $$[$0-1];
        
break;
case 23:

           this.$ = new Sentencias ("SENTENCIAS","SENTENCIAS",[0,0], []);
        
break;
case 25:

            this.$ = new SentBREAK ("BREAK", "BREAK", _$[$0-1], []);
        
break;
case 26:

            this.$ = new SentCONTINUE ("CONTINUE", "CONTINUE", _$[$0-1], []);
        
break;
case 27:

            this.$ = new SentRETURN("RETURN", "RETURN", _$[$0-1], []);
        
break;
case 28:

            this.$ = new SentRETURN ("RETURN", "RETURN", _$[$0-2], [$$[$0-1]]);
        
break;
case 29:

            this.$ = new DeclaFuncion ("DECLAFUNCION", "DECLAFUNCION", _$[$0-7], [$$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]]);
        
break;
case 30:

            this.$ = new DeclaFuncion ("DECLAFUNCION", "DECLAFUNCION", _$[$0-6], [$$[$0-6], $$[$0-4], $$[$0-1], new NodoMM ("LISTADIMS", "LISTADIMS", _$[$0-7], 0), $$[$0]]);
        
break;
case 31:

            this.$ = new DeclaFuncion ("DECLAFUNCION", "DECLAFUNCION", _$[$0-4], [$$[$0-4], $$[$0-2], new NodoMM ("ID", "void", _$[$0-5], [] ) , new NodoMM ("LISTADIMS", "LISTADIMS", _$[$0-5], 0), $$[$0]]);
        
break;
case 32:

            this.$ = new DeclaFuncion ("DECLAFUNCION", "DECLAFUNCION", _$[$0-6], [$$[$0-6], new NodoMM ("LISTAPARAMS", "LISTAPARAMS", _$[$0-7], []), $$[$0-2], $$[$0-1], $$[$0]]);
        
break;
case 33:

            this.$ = new DeclaFuncion ("DECLAFUNCION", "DECLAFUNCION", _$[$0-5], [$$[$0-5], new NodoMM ("LISTAPARAMS", "LISTAPARAMS", _$[$0-6], []), $$[$0-1], new NodoMM ("LISTADIMS", "LISTADIMS", _$[$0-6], 0), $$[$0]]);
        
break;
case 34:

            this.$ = new DeclaFuncion ("DECLAFUNCION", "DECLAFUNCION", _$[$0-3], [$$[$0-3], new NodoMM ("LISTAPARAMS", "LISTAPARAMS", _$[$0-4], []), new NodoMM ("ID", "void", _$[$0-4], [] ), new NodoMM ("LISTADIMS", "LISTADIMS", _$[$0-4], 0), $$[$0]]);
        
break;
case 35: case 61: case 127:

            $$[$0-2].hijos.push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 36:


            this.$ = new NodoMM ("LISTAPARAMS", "LISTAPARAMS", _$[$0], [$$[$0]]);
        
break;
case 37:

            this.$ = new NodoMM ("PARAM", "PARAM", _$[$0-1], [$$[$0-2], $$[$0], new NodoMM ("LISTADIMS", "LISTADIMS", _$[$0-2], 0)])
        
break;
case 38:

            this.$ = new NodoMM ("PARAM", "PARAM", _$[$0-2], [$$[$0-3], $$[$0-1], $$[$0]])
        
break;
case 39:

            this.$ = new ExpLlamadaFuncion ("LLAMADAFUNCION", "LLAMADAFUNCION", _$[$0-3], [$$[$0-3], $$[$0-1]]);
        
break;
case 40:

            this.$ = new ExpLlamadaFuncion ("LLAMADAFUNCION", "LLAMADAFUNCION", _$[$0-2], [$$[$0-2], new NodoMM ("LISTAEXP", "LISTAEXP", _$[$0-2], [])]);
        
break;
case 41:

            this.$ = new ExpTernario ("TERNARIO","TERNARIO",_$[$0-4],[$$[$0-4], $$[$0-2], $$[$0]]);
        
break;
case 42:

            this.$ = new SentSWITCH ("SWITCH","SWITCH",_$[$0-2],[$$[$0-2],$$[$0]]);
        
break;
case 43:

            this.$ = new SentSWITCH ("SWITCH","BLOQUESWITCH",_$[$0-5],[$$[$0-4],$$[$0-1]]);
        
break;
case 45:

            let nodolistacase = new SentSWITCH ("LISTACASE","LISTACASE",_$[$0],[$$[$0]]);
            this.$ = nodolistacase;
        
break;
case 46:

            this.$ = new SentSWITCH ("CASE","CASE",_$[$0-3],[$$[$0-2],$$[$0]]);
        
break;
case 47:

            this.$ = new SentFOR ("FOR","FOR",_$[$0-8],[$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]);
        
break;
case 50:

            this.$ = new SentWHILE ("WHILE","WHILE",_$[$0-4],[$$[$0-2],$$[$0]]);
        
break;
case 51:

            this.$ = new SentDO ("DO","DO",_$[$0-6],[$$[$0-2],$$[$0-5]]);
        
break;
case 52:

            let nodoelse = new SentIF("else","ELSE",_$[$0-1],[$$[$0]]);
            $$[$0-2].hijos.push(nodoelse);
            this.$ = $$[$0-2];
        
break;
case 54:

        let nodoifelse = new SentIF("IFELSE","IFELSE",_$[$0-6],[$$[$0-2],$$[$0]]);
        $$[$0-6].hijos.push(nodoifelse);
        this.$ = $$[$0-6];
    
break;
case 55:

        let nodoif = new SentIF("IF","IF",_$[$0-4],[$$[$0-2],$$[$0]]);
        this.$ = new SentIF("IFMAESTRO","IFMAESTRO",_$[$0-4],[nodoif]);
    
break;
case 56:

            $$[$0-2].hijos = $$[$0-2].hijos+ 1;
            this.$ = $$[$0-2];
        
break;
case 57:

            this.$ = new NodoMM ("LISTADIMS", "LISTADIMS", _$[$0-1], 1);
        
break;
case 58:

            this.$ = new NodoMM("const", "const", _$[$0], []);
        
break;
case 59:

            this.$ = new NodoMM("let", "let", _$[$0], []);
        
break;
case 60:

            this.$ = new Declaracion ("DECLA", "DECLA", _$[$0-1], [$$[$0-1], $$[$0]]);
        
break;
case 62:

            this.$ = new Declaracion ("LISTADECLA", "LISTADECLA", _$[$0], [$$[$0]]);
        
break;
case 63:

            this.$ = new Declaracion ("DECLAARR1", "DECLAELEMENT", _$[$0-5], [$$[$0-5], $$[$0-3], $$[$0-2], $$[$0]]);
        
break;
case 64:

            this.$ = new Declaracion ("DECLAARR2", "DECLAELEMENT", _$[$0-3], [$$[$0-3], $$[$0-1], $$[$0]]);
        
break;
case 65:

            this.$ = new Declaracion ("DECLAVAR1", "DECLAELEMENT", _$[$0-4], [$$[$0-4], $$[$0-2], $$[$0]]);
        
break;
case 66:

            this.$ = new Declaracion ("DECLAVAR2", "DECLAELEMENT", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 67:

            this.$ = new Declaracion ("DECLAVAR3", "DECLAELEMENT", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 68:

            this.$ = new Declaracion ("DECLAVAR4", "DECLAELEMENT", _$[$0], [$$[$0]]);
        
break;
case 69:

            this.$ = new DefObj ("DEFOBJ", "DEFOBJ", _$[$0-5], [$$[$0-5], $$[$0-2]]);
        
break;
case 70:

            $$[$0-5].hijos.push(new NodoMM("ATTR", "ATTR", _$[$0-5], [$$[$0-3], $$[$0-1], $$[$0]]));
            this.$ = $$[$0-5];
        
break;
case 71:

            $$[$0-4].hijos.push(new NodoMM("ATTR", "ATTR", _$[$0-4], [$$[$0-2], $$[$0]]));
            this.$ = $$[$0-4];
        
break;
case 72:

            this.$ = new NodoMM("LATTR", "LATTR", _$[$0-3], [
                new NodoMM("ATTR", "ATTR", _$[$0-3], [$$[$0-3], $$[$0-1], $$[$0]])
            ]);
        
break;
case 73:

            this.$ = new NodoMM("LATTR", "LATTR", _$[$0-2], [
                new NodoMM("ATTR", "ATTR", _$[$0-2], [$$[$0-2], $$[$0]])
            ]);
        
break;
case 75:

            $$[$0-4].hijos.push(new NodoMM("ATTRDEF", "ATTRDEF", _$[$0-4], [$$[$0-2], $$[$0]]));
            this.$ = $$[$0-4];
        
break;
case 76:

            this.$ = new ExpObjeto("EXPOBJ", "EXPOBJ", _$[$0-2], [
                new NodoMM("ATTR", "ATTR", _$[$0-2], [$$[$0-2], $$[$0]])
            ]);
        
break;
case 77:

            this.$ = new Asignacion ("ASIGNACION", "ASIGNACION", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 79:

            this.$ = new Asignacion ("ASIGNACION", "ASIGNACION", _$[$0-1], [
                $$[$0-1], 
                new Expresion ("MAS", "+", _$[$0-1], [$$[$0-1], new Expresion ("NUMERICO", "1", _$[$0-1], [] )])
            ]);
        
break;
case 80:

            this.$ = new Asignacion ("ASIGNACION", "ASIGNACION", _$[$0-1], [
                $$[$0-1], 
                new Expresion ("MENOS", "-", _$[$0-1], [$$[$0-1], new Expresion ("NUMERICO", "1", _$[$0-1], [] )])
            ]);
        
break;
case 81:

            $$[$0-1].hijos = $$[$0-1].hijos.concat($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 82:

            this.$ = new Recursivo ("LLAMADARECURSIVA", "LLAMADARECURSIVA", _$[$0], [$$[$0]]);
        
break;
case 83:

            this.$ = new Recursivo ("LLAMADARECURSIVA", "LLAMADARECURSIVA", _$[$0-1], [$$[$0-1], $$[$0]]);
        
break;
case 84:
   
            this.$ = [$$[$0]];
        
break;
case 85:

            this.$ = [$$[$0-1], $$[$0]];
        
break;
case 86:

            this.$ = [new NodoMM("LENGTH", "LENGTH", _$[$0-1], [])];
        
break;
case 87:

            this.$ = [new NodoMM("POP", "POP", _$[$0-3], [])];
        
break;
case 88:

            this.$ = [new NodoMM("PUSH", "PUSH", _$[$0-4], [$$[$0-1]])];
        
break;
case 89:

            $$[$0-3].hijos.push($$[$0-1]);
            this.$ = $$[$0-3];
        
break;
case 90:

            this.$ = new NodoMM ("LISTAACCESODIMS", "LISTAACCESODIMS",_$[$0-1],[$$[$0-1]]);
        
break;
case 91:

            this.$ = new Imprimir ("imprimir","PRINT",_$[$0-6], [$$[$0-2]]);
        
break;
case 92:

            this.$ = new GraficarTS ("imprimir","PRINT",_$[$0-3], []);
        
break;
case 93:

            this.$ = new Condicional ("AND", "&&", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 94:

            this.$ = new Condicional ("OR", "||", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 95:

            this.$ = new Condicional ("NOT", "!", _$[$0-1], [$$[$0]]);
        
break;
case 98:

            this.$ = new Relacional ("MAYOR", ">", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 99:

            this.$ = new Relacional ("MENOR", "<", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 100:

            this.$ = new Relacional ("MENOROIGUAL", "<=", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 101:

            this.$ = new Relacional ("MAYOROIGUAL", ">=", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 102:

            this.$ = new Relacional ("IGUALIGUAL", "==", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 103:

            this.$ = new Relacional ("DIFERENTE", "!=", _$[$0-2], [$$[$0-2], $$[$0]]);
        
break;
case 105:

            this.$ = new Expresion ("MAS", "+", _$[$0-2], [$$[$0-2],$$[$0]] );
        
break;
case 106:

            this.$ = new Expresion ("MENOS", "-", _$[$0-2], [$$[$0-2],$$[$0]] );
        
break;
case 107:

            this.$ = new Expresion ("POR", "*", _$[$0-2], [$$[$0-2],$$[$0]] );
        
break;
case 108:

            this.$ = new Expresion ("POTENCIA", "**", _$[$0-2], [$$[$0-2],$$[$0]] );
        
break;
case 109:

            this.$ = new Expresion ("DIV", "/", _$[$0-2], [$$[$0-2],$$[$0]] );
        
break;
case 110:

            this.$ = new Expresion ("MODULO", "%", _$[$0-2], [$$[$0-2],$$[$0]] );
        
break;
case 111: case 112:

            this.$ = new Expresion ("NUMERICO", yytext, _$[$0], [] );
        
break;
case 113:

            this.$ = new Expresion ("NEGADO", "-", _$[$0-1], [$$[$0]] );
        
break;
case 114:

            this.$ = new Expresion ("STRING", ((yytext.split("\\\"").join("\"")).split("\\t").join("\t")).split("\\n").join("\n").split("\\\\").join("\\").split("\\r").join("\r"), _$[$0], [] );
        
break;
case 115:

            this.$ = new Expresion ("BOOLEAN", "true", _$[$0], [] );
        
break;
case 116:

            this.$ = new Expresion ("BOOLEAN", "false", _$[$0], [] );
        
break;
case 117:

            this.$ = new Expresion ("NULL", "null", _$[$0], [] );
        
break;
case 118:

            this.$ = new Expresion ("UNDEFINED", "undefined", _$[$0], [] );
        
break;
case 125:

            this.$ = new ExpArray ("EXPARRAY", "EXPARRAY", _$[$0-1], [$$[$0-1]]);
        
break;
case 126:

            this.$ = new ExpArray ("EXPARRAY", "EXPARRAY", _$[$0], []);
        
break;
case 128:

            this.$ = new NodoMM ("LISTAEXP", "LISTAEXP", _$[$0], [$$[$0]]);
        
break;
case 129:

            this.$ = new NodoMM ("ID", yytext, _$[$0], [] );
        
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:$V0,30:$V1,31:$V2,33:$V3,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},{1:[3]},{5:[1,39],6:40,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:$V0,30:$V1,31:$V2,33:$V3,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},o($Vf,[2,3]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vg,[2,8]),{12:[1,41]},{12:[1,42]},{12:[1,43],65:$Vh,71:$Vi,72:$Vj,73:45,75:$Vk},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{12:[1,49]},{34:50,107:$Ve},{75:[1,51]},{35:[1,52]},{34:55,63:53,64:54,107:$Ve},o($Vl,[2,78]),o($Vm,$Vn,{74:56,35:[1,57],58:$Vo}),{34:59,107:$Ve},o($Vg,[2,53],{56:[1,60]}),{35:[1,61]},{25:62,26:$Vp},{35:[1,64]},{12:[1,65]},{12:[1,66]},{12:[1,67],14:82,24:86,26:$Vq,32:68,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{35:[1,89]},{107:[2,58]},{107:[2,59]},o([12,26,27,35,37,38,40,44,58,59,65,71,72,75,82,83,87,88,89,90,91,92,93,94,95,96,97,98],[2,129]),{35:[1,90]},{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),{14:82,24:86,26:$Vq,32:91,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($Vm,[2,81]),o($VC,[2,79]),o($VC,[2,80]),{34:92,76:[1,93],77:[1,94],78:[1,95],107:$Ve},o($Vg,[2,21]),{35:[1,96]},{80:[1,97]},{37:[1,98]},{12:[2,60],40:[1,99]},o($VD,[2,62]),o($VD,[2,68],{38:[1,100],65:[1,101]}),o($Vm,[2,83],{58:$VE}),{14:82,24:86,26:$Vq,32:105,34:25,35:$Vr,37:[1,104],42:103,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,32:106,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{65:[1,107]},{25:108,26:$Vp,57:[1,109]},{14:82,24:86,26:$Vq,32:110,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{53:[1,111]},{7:112,8:114,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,113],29:$V0,30:$V1,31:$V2,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},{11:116,13:117,14:118,34:119,52:115,60:23,61:$V9,62:$Va,70:24,107:$Ve},o($Vg,[2,25]),o($Vg,[2,26]),o($Vg,[2,27]),{12:[1,120],44:$VF,82:$VG,83:$VH},{14:82,24:86,26:$Vq,32:124,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VI,[2,96]),o($VI,[2,97]),o($VI,[2,104],{87:[1,125],88:[1,126],89:[1,127],90:[1,128],91:[1,129],92:[1,130],93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VC,[2,111]),o($VC,[2,112]),{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:137,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VC,[2,114]),o($VC,[2,115]),o($VC,[2,116]),o($VC,[2,117]),o($VC,[2,118]),{14:82,24:86,26:$Vq,32:138,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VC,[2,120],{73:45,71:$Vi,72:$Vj,75:$Vk}),o($VC,[2,121]),o($VC,[2,122]),o($VC,[2,123]),o($VC,[2,124]),{14:82,24:86,26:$Vq,32:105,34:25,35:$Vr,42:139,43:71,58:$Vs,59:[1,140],68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{34:142,69:141,107:$Ve},{14:82,24:86,26:$Vq,32:143,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,32:144,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($Vl,[2,77],{44:$VF,82:$VG,83:$VH}),o($Vm,[2,84],{74:145,58:$Vo}),o($Vm,[2,86]),{35:[1,146]},{35:[1,147]},{34:151,36:148,37:[1,149],41:150,107:$Ve},{35:[1,152]},{12:[1,153]},{34:55,64:154,107:$Ve},{34:155,107:$Ve},{14:82,24:86,26:$Vq,32:156,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,32:157,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{37:[1,158],40:$VP},o($VC,[2,40]),o($VQ,[2,128],{44:$VF,82:$VG,83:$VH}),{44:$VF,59:[1,160],82:$VG,83:$VH},{26:[1,161]},o($Vg,[2,52]),{35:[1,162]},{37:[1,163],44:$VF,82:$VG,83:$VH},{35:[1,164]},{8:166,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,165],29:$V0,30:$V1,31:$V2,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},o($VR,[2,23]),o($VS,[2,5]),{12:[1,167]},{12:[2,48]},{12:[2,49]},{65:$Vh,71:$Vi,72:$Vj,73:45,75:$Vk},o([65,71,72,75],$Vn,{74:56,58:$Vo}),o($Vg,[2,28]),{14:82,24:86,26:$Vq,32:168,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,32:169,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,32:170,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VI,[2,95]),{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:171,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:172,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:173,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:174,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:175,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:176,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:177,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:178,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:179,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:180,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:181,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{14:82,24:86,26:$Vq,34:25,35:$Vr,58:$Vs,68:84,70:85,86:182,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VC,[2,113]),{37:[1,183],44:$VF,82:$VG,83:$VH},{40:$VP,59:[1,184]},o($VC,[2,126]),{27:[1,185],40:[1,186]},{38:[1,187]},{37:[1,188],44:$VF,82:$VG,83:$VH},{37:[1,189],44:$VF,82:$VG,83:$VH},o($Vm,[2,85],{58:$VE}),{37:[1,190]},{14:82,24:86,26:$Vq,32:191,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{37:[1,192],40:[1,193]},{26:$VT,28:195,38:[1,194]},o($VU,[2,36]),{38:[1,197]},{14:82,24:86,26:$Vq,32:105,34:25,35:$Vr,42:198,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($Vg,[2,92]),o($VD,[2,61]),o($VD,[2,67],{39:199,58:$VV,65:[1,200]}),o($VD,[2,66],{44:$VF,82:$VG,83:$VH}),{44:$VF,59:[1,202],82:$VG,83:$VH},o($VC,[2,39]),{14:82,24:86,26:$Vq,32:203,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VW,[2,90]),{34:205,67:204,107:$Ve},{14:82,24:86,26:$Vq,32:206,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{25:207,26:$Vp},{14:82,24:86,26:$Vq,32:208,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VR,[2,22]),o($VS,[2,4]),{14:82,24:86,26:$Vq,32:209,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},o($VI,[2,93]),o([12,27,37,38,40,44,59,83],[2,94],{82:$VG}),{38:[1,210],44:$VF,82:$VG,83:$VH},o($VI,[2,98],{93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VI,[2,99],{93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VI,[2,100],{93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VI,[2,101],{93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VI,[2,102],{93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VI,[2,103],{93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VX,[2,105],{95:$VL,96:$VM,97:$VN,98:$VO}),o($VX,[2,106],{95:$VL,96:$VM,97:$VN,98:$VO}),o($VY,[2,107],{96:$VM,98:$VO}),o($VC,[2,108]),o($VY,[2,109],{96:$VM,98:$VO}),o($VC,[2,110]),o($VC,[2,119]),o($VC,[2,125]),o($VC,[2,74]),{34:211,107:$Ve},{14:82,24:86,26:$Vq,32:212,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{26:[1,214],46:213},{25:215,26:$Vp},o($Vm,[2,87]),{37:[1,216],44:$VF,82:$VG,83:$VH},{26:$VT,28:218,38:[1,217]},{34:151,41:219,107:$Ve},{34:220,107:$Ve},o($Vf,[2,34]),{4:221,6:3,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:$V0,30:$V1,31:$V2,33:$V3,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},{34:222,107:$Ve},{37:[1,223],40:$VP},o($VD,[2,64],{58:$VZ,65:[1,224]}),{14:82,24:86,26:$Vq,32:226,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{59:[1,227]},o($VW,[2,89]),o($VQ,[2,127],{44:$VF,82:$VG,83:$VH}),{27:[1,228],40:[1,229]},{38:[1,230]},{37:[1,231],44:$VF,82:$VG,83:$VH},o($Vg,[2,50]),{37:[1,232],44:$VF,82:$VG,83:$VH},{12:[1,233],44:$VF,82:$VG,83:$VH},{14:82,24:86,26:$Vq,32:234,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{38:[1,235]},o($V_,[2,76],{44:$VF,82:$VG,83:$VH}),o($Vg,[2,42]),{47:236,49:237,50:$V$},o($VR,[2,55]),o($Vm,[2,88]),{34:239,107:$Ve},o($Vf,[2,31]),o($VU,[2,35]),{26:$VT,28:241,39:240,58:$VV},{6:40,8:4,9:5,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,242],29:$V0,30:$V1,31:$V2,33:$V3,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},o($VU,[2,37],{39:243,58:$VV}),{12:[1,244]},{14:82,24:86,26:$Vq,32:245,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{59:[1,246]},o($VD,[2,65],{44:$VF,82:$VG,83:$VH}),o($V01,[2,57]),{12:[1,247]},{34:248,107:$Ve},{34:249,107:$Ve},{25:250,26:$Vp},{12:[1,251]},{13:252,14:118,34:119,70:24,107:$Ve},o([12,27,37,38,40,59],[2,41],{44:$VF,82:$VG,83:$VH}),{14:82,24:86,26:$Vq,32:253,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{48:[1,254],49:255,50:$V$},o($V11,[2,45]),{14:82,24:86,26:$Vq,32:256,34:25,35:$Vr,43:71,58:$Vs,68:84,70:85,84:$Vt,85:70,86:72,94:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:83,107:$Ve},{26:$VT,28:258,39:257,58:$VV},{26:$VT,28:259,58:$VZ},o($Vf,[2,33]),o($Vf,[2,24]),o($VU,[2,38],{58:$VZ}),o($Vg,[2,91]),o($VD,[2,63],{44:$VF,82:$VG,83:$VH}),o($V01,[2,56]),o($Vg,[2,69]),{38:[1,260]},o($V_,[2,73],{39:261,58:$VV}),o($VR,[2,54]),o($Vg,[2,51]),{37:[1,262]},o($V_,[2,75],{44:$VF,82:$VG,83:$VH}),{38:[1,263]},o($V11,[2,44]),{38:[1,264],44:$VF,82:$VG,83:$VH},{26:$VT,28:265,58:$VZ},o($Vf,[2,30]),o($Vf,[2,32]),{34:266,107:$Ve},o($V_,[2,72],{58:$VZ}),{25:267,26:$Vp},{7:268,8:114,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:$V0,30:$V1,31:$V2,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},{7:269,8:114,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,29:$V0,30:$V1,31:$V2,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},o($Vf,[2,29]),o($V_,[2,71],{39:270,58:$VV}),o($Vg,[2,47]),{8:166,10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,27:[1,271],29:$V0,30:$V1,31:$V2,34:25,45:$V4,51:$V5,53:$V6,54:$V7,55:27,57:$V8,60:23,61:$V9,62:$Va,66:$Vb,70:24,79:$Vc,81:$Vd,107:$Ve},o($V11,[2,46],{10:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,60:23,70:24,34:25,55:27,8:166,29:$V0,30:$V1,31:$V2,45:$V4,51:$V5,53:$V6,54:$V7,57:$V8,61:$V9,62:$Va,66:$Vb,79:$Vc,81:$Vd,107:$Ve}),o($V_,[2,70],{58:$VZ}),o($Vg,[2,43])],
defaultActions: {35:[2,58],36:[2,59],39:[2,1],116:[2,48],117:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

import {NodoMM} from "../tree/NodoMM";
import {Expresion} from "../tree/Expresion";
import {Relacional} from "../tree/Relacional";
import {Condicional} from "../tree/Condicional";
import {Imprimir} from "../tree/Imprimir";
import {GraficarTS} from "../tree/GraficarTS";
import {Sentencias} from "../tree/Sentencias";
import {Declaracion} from "../tree/Declaracion";
import {DeclaFuncion} from "../tree/DeclaFuncion";
import {Recursivo} from "../tree/Recursivo";
import {Asignacion} from "../tree/Asignacion";
import {ExpArray} from "../tree/ExpArray";
import {ExpLlamadaFuncion} from "../tree/ExpLlamadaFuncion";
import {DefObj} from "../tree/DefObj";
import {ExpObjeto } from "../tree/ExpObjeto";
import {SentIF} from "../tree/SentIF";
import {SentWHILE} from "../tree/SentWHILE";
import {SentDO} from "../tree/SentDO";
import {SentSWITCH} from "../tree/SentSWITCH";
import {SentFOR} from "../tree/SentFOR";
import {SentBREAK} from "../tree/SentBREAK";
import {SentCONTINUE} from "../tree/SentCONTINUE";
import {SentRETURN} from "../tree/SentRETURN";
import {ExpTernario} from "../tree/ExpTernario";
import { plantillaError } from "../utilities/plantillaError";
  /*
  if (hash["token"] == "INVALID") {
          window.errores.push(
            new plantillaError(
              "Lexico",
              "Lexema: " + hash["text"] + ", no reconocido.",
              hash["loc"]["last_line"],
              hash["loc"]["last_column"]
            )
          );
        } else {
          window.errores.push(
            new plantillaError(
              "Sintactico",
              "Error en: " +
                hash["text"] +
                ", se esperaba " +
                hash["expected"] +
                ".",
              hash["loc"]["last_line"],
              hash["loc"]["last_column"]
            )
          );
        }

   */



parser.treeparser  = {
 raiz : null
};

 parser.error ={
  error:[]

};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */;
break;
case 1:/*skip comment*/;
break;
case 2:this.begin('comment');
break;
case 3:this.popState();
break;
case 4:/* skip comment content*/
break;
case 5:/* skip whitespace */
break;
case 6:return 100;
break;
case 7:return 99;
break;
case 8:return 98;
break;
case 9:return 71;
break;
case 10:return 96;
break;
case 11:return 72;
break;
case 12:return 91;
break;
case 13:return 92;
break;
case 14:return 90;
break;
case 15:return 89;
break;
case 16:return 87;
break;
case 17:return 88;
break;
case 18:return 44;
break;
case 19:return 38;
break;
case 20:return 82;
break;
case 21:return 83;
break;
case 22:return 65;
break;
case 23:return 84;
break;
case 24:return 94;
break;
case 25:return 93;
break;
case 26:return 98;
break;
case 27:return 95;
break;
case 28:return 97;
break;
case 29:return 35;
break;
case 30:return 37;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 58;
break;
case 34:return 59;
break;
case 35:return 12;
break;
case 36:return 40;
break;
case 37:return 75;
break;
case 38:return 66;
break;
case 39:return 57;
break;
case 40:return 56;
break;
case 41:return 79;
break;
case 42:return 80;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 31;
break;
case 46:return 30;
break;
case 47:return 29;
break;
case 48:return 48;
break;
case 49:return 50;
break;
case 50:return 45;
break;
case 51:return 102;
break;
case 52:return 103;
break;
case 53:return 'double';
break;
case 54:return 62;
break;
case 55:return 61;
break;
case 56:return 81;
break;
case 57:return 51;
break;
case 58:return 76;
break;
case 59:return 104;
break;
case 60:return 105;
break;
case 61:return 78;
break;
case 62:return 77;
break;
case 63:return 33;
break;
case 64:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 101;
break;
case 65:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 101;
break;
case 66:return 107;
break;
case 67:return 5;
break;
case 68:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:(0|[0-9]+))/,/^(?:%)/,/^(?:\+\+)/,/^(?:\*\*)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\?)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:!)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:type\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:double\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:length\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:"((\\")|[^"])*")/,/^(?:'((\\')|[^'])*')/,/^(?:(ñ|Ñ|_|[a-zA-Z])(ñ|Ñ|[a-zA-Z]|[0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traductor;
exports.Parser = traductor.Parser;
exports.parse = function () { return traductor.parse.apply(traductor, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}